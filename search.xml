<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS 样式</title>
    <url>//frontend/base/css-style/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器</title>
    <url>//frontend/base/browser/</url>
    <content><![CDATA[<p>11</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>Blender 入门</title>
    <url>//design/Blender/</url>
    <content><![CDATA[<p>to be continue…</p>
]]></content>
      <categories>
        <category>视觉设计笔记</category>
      </categories>
      <tags>
        <tag>Blender</tag>
        <tag>建模</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 从 0 到打包</title>
    <url>//frontend/ui/ionic/</url>
    <content><![CDATA[<h3 id="常用官方组件"><a href="#常用官方组件" class="headerlink" title="常用官方组件"></a>常用官方组件</h3><a id="more"></a>

<h3 id="自定义-TabBar"><a href="#自定义-TabBar" class="headerlink" title="自定义 TabBar"></a>自定义 TabBar</h3><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><h3 id="平台联动"><a href="#平台联动" class="headerlink" title="平台联动"></a>平台联动</h3><h4 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h4><h4 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h4><h4 id="微信登录与分享"><a href="#微信登录与分享" class="headerlink" title="微信登录与分享"></a>微信登录与分享</h4><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><h4 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h4><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
        <tag>Angular</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>React 基础</title>
    <url>//frontend/frame/react/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h2><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><h2 id="EXPO"><a href="#EXPO" class="headerlink" title="EXPO"></a>EXPO</h2><h3 id="把-iconfont-导入到-react-native-expo-中"><a href="#把-iconfont-导入到-react-native-expo-中" class="headerlink" title="把 iconfont 导入到 react-native expo 中"></a>把 iconfont 导入到 react-native expo 中</h3><p>查看 <a href="https://www.cnblogs.com/unclefang/p/13857824.html" target="_blank" rel="noopener">在 react native expo 中使用 iconfont 自定义图标</a></p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全解决方案</title>
    <url>//frontend/flow/web-safety/</url>
    <content><![CDATA[<p><strong>常见的攻击类型</strong>：XSS 攻击、CSRF 攻击、SQL 注入、点击劫持、URL 跳转漏洞、OS 命令注入攻击。</p>
<p>浏览器安全其实是受<em>同源策略</em>（同域名、同端口、同协议名）保护的，但是<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;link&gt;</code>等标签都可以跨域加载资源，而不受同源策略的限制。</p>
<ol>
<li><p>这些带 <em>src</em> 属性的标签每次加载时，浏览器会发起一次 <em>GET</em> 请求。</p>
</li>
<li><p>通过 <em>src</em> 属性加载的资源，浏览器限制了 javascript 的权限，使其不能读、写返回的内容。</p>
</li>
</ol>
<a id="more"></a>

<h2 id="1-XSS-攻击"><a href="#1-XSS-攻击" class="headerlink" title="1. XSS 攻击"></a>1. XSS 攻击</h2><p>XSS (Cross-Site Scripting)，跨站脚本攻击。</p>
<h3 id="1-1-非持久型-XSS（反射型-XSS-）"><a href="#1-1-非持久型-XSS（反射型-XSS-）" class="headerlink" title="1.1 非持久型 XSS（反射型 XSS ）"></a>1.1 非持久型 XSS（反射型 XSS ）</h3><p><strong>原理</strong>：恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>
<p><strong>特征</strong>：</p>
<ol>
<li>即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。</li>
<li>攻击者需要诱骗点击,必须要通过用户点击链接才能发起</li>
<li>反馈率低，所以较难发现和响应修复</li>
<li>盗取用户敏感保密信息</li>
</ol>
<h3 id="1-2-持久型-XSS（存储型-XSS）"><a href="#1-2-持久型-XSS（存储型-XSS）" class="headerlink" title="1.2 持久型 XSS（存储型 XSS）"></a>1.2 持久型 XSS（存储型 XSS）</h3><p><strong>原理</strong>：一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，恶意攻击者利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p>
<p><strong>特点</strong>：</p>
<ol>
<li>持久性，植入在数据库中</li>
<li>盗取用户敏感私密信息</li>
<li>危害面广</li>
</ol>
<h3 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h3><ol>
<li><p>设置白名单CSP</p>
<p>通常可以通过两种方式来开启 CSP：<br>设置 HTTP Header 中的 Content-Security-Policy<br>设置 meta 标签的方式，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"default-src *; style-src 'self' 'unsafe-inline' myxxx.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' myxxx.com"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>default-src &#39;self&#39;</code> 只允许加载本站资源</li>
<li><code>img-src https://*</code> 只允许加载 HTTPS 协议图片</li>
<li><code>child-src &#39;none&#39;</code> 允许加载任何来源框架</li>
</ul>
</li>
<li><p>后端处理用户输入提交的内容，通常做法是转义输入输出的内容，即对于引号、尖括号、斜杠进行转义。后端输出给前端的数据进行统一转义处理。</p>
</li>
<li><p>HttpOnly Cookie</p>
<p>Web 应用程序在设置 cookie 时，将其属性设为 <em>HttpOnly</em>，就可以避免该网页的 cookie 被客户端恶意 JavaScript 窃取，保护用户 cookie 信息。这是预防 XSS 攻击窃取用户 cookie 最有效的防御手段。</p>
</li>
<li><p>X-XSS-Protection设置: </p>
<p><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8; X-Content-Type-Options=nosniff; X-XSS-Protection: 1;mode=block&quot; /&gt;</code></p>
<p>或</p>
<p><code>&lt;meta http-equiv=&quot;X-XSS-Protection&quot; content=&quot;1; mode=block&quot; /&gt;</code></p>
<ul>
<li><code>0</code>：禁用XSS保护；</li>
<li><code>1</code>：启用XSS保护；</li>
<li><code>1; mode=block</code>：启用XSS保护，并在检查到XSS攻击时，停止渲染页面（例如IE8中，检查到攻击时，整个页面会被一个#替换）。`</li>
</ul>
</li>
</ol>
<h2 id="2-CSRF-攻击"><a href="#2-CSRF-攻击" class="headerlink" title="2. CSRF 攻击"></a>2. CSRF 攻击</h2><p>CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的Web攻击，它利用用户<em>已登录</em>的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p>
<h3 id="2-1-攻击步骤"><a href="#2-1-攻击步骤" class="headerlink" title="2.1 攻击步骤"></a>2.1 攻击步骤</h3><p>这里假定 <em>网站A</em> 为用户信任的网站，即被攻击的网站；<em>网站B</em> 为危险网站，即发出攻击的网站。</p>
<ol>
<li><p>用户在浏览器中登录 网站A；</p>
</li>
<li><p>网站A 通过验证，在浏览器中产生 cookie;</p>
</li>
<li><p>用户在没有登出 网站A 的情况下，访问了 网站B；</p>
</li>
<li><p>网站B 请求访问 网站A，发出了一个 request 请求；</p>
</li>
<li><p>根据 网站B 在 <em>step4</em> 中的请求，浏览器带着 <em>step2</em> 中产生的 cookie 访问 网站A。</p>
</li>
</ol>
<h3 id="2-2-解决方案"><a href="#2-2-解决方案" class="headerlink" title="2.2 解决方案"></a>2.2 解决方案</h3><ol>
<li><p><strong>Token 验证</strong>：目前比较完善的解决方案是加入 Anti-CSRF-Token, 即发送请求时在 HTTP 请求中以参数的形式加入一个随机产生的 token，服务器读取浏览器当前域 cookie 中这个 token值，进行比较校验。</p>
</li>
<li><p>可以对 Cookie 设置 <code>SameSite</code> 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</p>
</li>
<li><p>通过 Referer 限制，Referer 信息告诉服务器是从哪个页面链接过来的。意思是说，只接受本站的请求，服务器才做响应；如果不是，就拦截。</p>
</li>
<li><p>验证码操作。</p>
</li>
</ol>
<h2 id="3-SQL-注入"><a href="#3-SQL-注入" class="headerlink" title="3. SQL 注入"></a>3. SQL 注入</h2><p><strong>本质</strong>：数据和代码未分离，即数据当做了代码来执行。</p>
<p>有可能会造成获取数据库信息、管理员后台用户名和密码、读取服务器敏感文件等问题，甚至修改数据库内容。</p>
<h3 id="3-1-攻击步骤"><a href="#3-1-攻击步骤" class="headerlink" title="3.1 攻击步骤"></a>3.1 攻击步骤</h3><p>通过表单提交等方式，输入恶意代码，后端查询数据时，直接把前端提交的内容直接嵌入到将要执行的 SQL 语句中了。</p>
<p>例如：<code>$sql = &#39;select * from user where id =&#39;.$id;</code></p>
<p>这里用用户输入的变量 <code>$id</code> 来拼接 SQL 语句，存在安全隐患。如果 <code>$i = &#39;2 or 1=1&#39;</code>，这里就能轻松的获取到 user 表的仍意信息。利用 SQL 注入漏洞，我们能够获取想要的信息，同时可以通过猜测和报错获取到数据库其它表的结构和信息，如果数据库、服务器权限设置不当，甚至有可能能获取到整个服务器的控制权限。 </p>
<h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><ol>
<li><p><strong>限制权限</strong>：严格限制Web应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害</p>
</li>
<li><p>`校验预期值**：后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理。</p>
</li>
<li><p><strong>字符串转义</strong>：对进入数据库的特殊字符<code>&#39;，&quot;，，&lt;，&gt;，&amp;，，;</code> 等，进行转义处理，或编码转换。基本上所有的后端语言都有对字符串进行转义处理的方法，比如 lodash 的 <code>lodash._escapehtmlchar</code> 库。</p>
</li>
<li><p><strong>优化SQL查询</strong>：所有的查询语句建议使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的 <code>query</code> 方法中的 <code>?</code> 占位参数。</p>
</li>
</ol>
<h2 id="4-点击劫持"><a href="#4-点击劫持" class="headerlink" title="4. 点击劫持"></a>4. 点击劫持</h2><h3 id="4-1-攻击步骤"><a href="#4-1-攻击步骤" class="headerlink" title="4.1 攻击步骤"></a>4.1 攻击步骤</h3><p>通过 iframe 透明化，漏出来一个按钮，诱惑用户点击。</p>
<h3 id="4-2-解决方案"><a href="#4-2-解决方案" class="headerlink" title="4.2 解决方案"></a>4.2 解决方案</h3><ol>
<li><p>X-FRAME-OPTIONS 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。X-FRAME-OPTIONS 有 3 个值可选：</p>
<ul>
<li><code>DENY</code>，表示页面不允许通过 iframe 的方式展示</li>
<li><code>SAMEORIGIN</code>，表示页面可以在相同域名下通过 iframe 的方式展示</li>
<li><code>ALLOW-FROM</code>，表示页面可以在指定来源的 iframe 中展示</li>
</ul>
</li>
<li><p>通过 js 的方法判断，来隐藏 iframe 显示的页面。</p>
</li>
</ol>
<h2 id="5-URL-跳转漏洞"><a href="#5-URL-跳转漏洞" class="headerlink" title="5. URL 跳转漏洞"></a>5. URL 跳转漏洞</h2><h3 id="5-1-攻击步骤"><a href="#5-1-攻击步骤" class="headerlink" title="5.1 攻击步骤"></a>5.1 攻击步骤</h3><p>借助未验证的 URL 跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。</p>
<h3 id="5-2-解决方案"><a href="#5-2-解决方案" class="headerlink" title="5.2 解决方案"></a>5.2 解决方案</h3><ol>
<li><p>referer 的限制</p>
<p>如果确定传递URL参数进入的来源，我们可以通过该方式实现安全限制，保证该 URL 的有效性，避免恶意用户自己生成跳转链接</p>
</li>
<li><p>加入有效性验证 Token</p>
<p>我们保证所有生成的链接都是来自于我们可信域的，通过在生成的链接里加入用户不可控的 Token 对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用，但是如果功能本身要求比较开放，可能导致有一定的限制。</p>
</li>
</ol>
<h2 id="6-OS-命令注入攻击"><a href="#6-OS-命令注入攻击" class="headerlink" title="6. OS 命令注入攻击"></a>6. OS 命令注入攻击</h2><h3 id="6-1-攻击步骤"><a href="#6-1-攻击步骤" class="headerlink" title="6.1 攻击步骤"></a>6.1 攻击步骤</h3><p>通过 Web 应用，执行非法的操作系统命令达到攻击的目的。</p>
<h3 id="6-2-解决方案"><a href="#6-2-解决方案" class="headerlink" title="6.2 解决方案"></a>6.2 解决方案</h3><ol>
<li><p>后端对前端提交内容进行规则限制（比如正则表达式）。</p>
</li>
<li><p>在调用系统命令前对所有传入参数进行命令行参数转义过滤。</p>
</li>
<li><p>不要直接拼接命令语句，借助一些工具做拼接、转义预处理，例如 Node.js 的 <code>shell-escape</code> npm包。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>XSS攻击</tag>
        <tag>CSRF攻击</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript生成随机数</title>
    <url>//frontend/js/random/</url>
    <content><![CDATA[<h2 id="主要方法：Math"><a href="#主要方法：Math" class="headerlink" title="主要方法：Math"></a>主要方法：Math</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.round();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.0 ~ 1.0 之间的一个伪随机数， 即：&gt;= 0 &amp;&amp; &lt; 1， 如：0.31415926</span></span><br><span class="line"><span class="built_in">Math</span>.random();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转为数字，并向下取整</span></span><br><span class="line"><span class="built_in">parseInt</span>(string, radix);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="常见随机数取值方法："><a href="#常见随机数取值方法：" class="headerlink" title="常见随机数取值方法："></a>常见随机数取值方法：</h2><ol>
<li><p>随机获取 1 到 10 的整数，其中取 0 的概览极小，即当 <code>Math.random()</code> 值等于 0 时，此方法结果才等于 0。</p>
<p><code>Math.ceil(Math.random()*10);</code></p>
</li>
<li><p>随机均衡获取 0 或者 1 的其中一个</p>
<p><code>Math.round(Math.random());</code></p>
</li>
<li><p>随机均衡获取 0 到 9 的整数</p>
<p><code>Math.floor(Math.random()*10);</code></p>
</li>
<li><p>随机获取 0 到 10 的整数，其中 取 0 或 10 的几率为其他数字几率的 50%。</p>
<p><code>Math.round(Math.random()*10);</code></p>
</li>
<li><p>随机均衡生成 [1 ~ max] 的整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max + <span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max + <span class="number">1</span>));</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * max);</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机均衡生成 [0 ~ max] 的整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max + <span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max + <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机均衡生成 [min ~ max] 的整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>随机</tag>
      </tags>
  </entry>
  <entry>
    <title>Lodash.js 应用总结</title>
    <url>//frontend/lib/lodash.js/</url>
    <content><![CDATA[<p>to be continue…</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
        <tag>Javascript Lib</tag>
        <tag>Lodash.js</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Day.js 应用总结</title>
    <url>//frontend/lib/day.js/</url>
    <content><![CDATA[<h2 id="Day-js-和-Moment-js-的区别与选择"><a href="#Day-js-和-Moment-js-的区别与选择" class="headerlink" title="Day.js 和 Moment.js 的区别与选择"></a>Day.js 和 Moment.js 的区别与选择</h2><p>Day.js 和 Moment.js 一样是处理时间和日期的 JavaScript 库。接口几乎完全一致，Day.js 体积比 Moment.js 小好几倍。</p>
<p>查看<a href="/lib/moment.js/">Moment.js 应用总结</a></p>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install dayjs --save</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dayjs = <span class="built_in">require</span>(<span class="string">'dayjs'</span>)</span><br><span class="line">dayjs().format()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dayjs.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  dayjs().format()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dayjs <span class="keyword">from</span> <span class="string">'dayjs'</span></span><br><span class="line">dayjs().format()</span><br></pre></td></tr></table></figure>

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h3 id="格式化参数"><a href="#格式化参数" class="headerlink" title="格式化参数"></a>格式化参数</h3><p><strong>注意</strong>: 如星期等数据需要先设置本地化格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置为中文格式</span></span><br><span class="line">dayjs.locale(<span class="string">'zh-cn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加依赖LocalizedFormat插件</span></span><br><span class="line"><span class="comment">// 浏览器加载方式 dayjs.extend(window.dayjs_plugin_localizedFormat)</span></span><br><span class="line">dayjs.extend(LocalizedFormat);</span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dayjs() === dayjs(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// true</span></span><br><span class="line">dayjs() === dayjs(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>dayjs(null)</code> 为无效输入。</p>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><blockquote>
<p>参考资料：</p>
</blockquote>
<ol>
<li><a href="https://dayjs.gitee.io/docs/zh-CN/get-set/quarter" target="_blank" rel="noopener">Day.js中文网</a></li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Day.js</tag>
        <tag>Javascript Lib</tag>
        <tag>时间处理</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoClick 自动点击 刷票刷网课</title>
    <url>//project/autoclick/</url>
    <content><![CDATA[<h3 id="功能说明："><a href="#功能说明：" class="headerlink" title="功能说明："></a>功能说明：</h3><ol>
<li><p>延迟指定时间点击指定按钮</p>
</li>
<li><p>循环指定时间点击指定按钮</p>
</li>
</ol>
<h3 id="插件下载地址"><a href="#插件下载地址" class="headerlink" title="插件下载地址"></a>插件下载地址</h3><ol>
<li><p><a href="https://github.com/gaofanghuang/chrome-plug-in/tree/main/autoClick" target="_blank" rel="noopener">** Chrome 扩展版 Github **</a></p>
</li>
<li><p><a href="https://github.com/gaofanghuang/chrome-plug-in/raw/main/autoClick/AutoClick.crx" target="_blank" rel="noopener">** Chrome 扩展版 下载 **</a></p>
</li>
</ol>
<a id="more"></a>

<h2 id="功能更新："><a href="#功能更新：" class="headerlink" title="功能更新："></a>功能更新：</h2><h3 id="v0-1-2021-05-06："><a href="#v0-1-2021-05-06：" class="headerlink" title="v0.1 2021-05-06："></a>v0.1 2021-05-06：</h3><ol>
<li>发布v0.1</li>
</ol>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Chrome扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos Creator + Typescript 开发入门</title>
    <url>//code/cocos/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="属性类型的声明"><a href="#属性类型的声明" class="headerlink" title="属性类型的声明"></a>属性类型的声明</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = cc._decorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BlockType = cc.Enum(&#123;dog:<span class="number">1</span>, cat: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Player <span class="keyword">extends</span> cc.Component &#123;</span><br><span class="line">  <span class="comment">// 整型</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Integer)</span><br><span class="line">  blockCount: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 浮点型</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Float)</span><br><span class="line">  blockWidth: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 布尔型</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Boolean)</span><br><span class="line">  blockIsDead: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Node)</span><br><span class="line">  blockItem: cc.Node = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点数组</span></span><br><span class="line">  <span class="meta">@property</span>([cc.Node])</span><br><span class="line">  blockList: <span class="built_in">Array</span>&lt;cc.Node&gt; = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文本</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Label)</span><br><span class="line">  blockName: cc.Label = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 预制体</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Prefab)</span><br><span class="line">  blockPrefab: cc.Prefab = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 坐标</span></span><br><span class="line">  <span class="meta">@property</span>(cc.Vec2)</span><br><span class="line">  blockVec: cc.Vec2 = cc.v2()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 枚举类型</span></span><br><span class="line">  <span class="meta">@property</span>(&#123;</span><br><span class="line">      <span class="keyword">type</span>: BlockType</span><br><span class="line">  &#125;)</span><br><span class="line">  blockType = BlockType.dog</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="comment">// init logic</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>]]></content>
      <categories>
        <category>游戏开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Typescript</tag>
        <tag>Cocos Creator</tag>
        <tag>游戏引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua 入门</title>
    <url>//code/lua/</url>
    <content><![CDATA[<h2 id="1-Lua-是什么"><a href="#1-Lua-是什么" class="headerlink" title="1. Lua 是什么"></a>1. Lua 是什么</h2><p>一种嵌入式脚本语言，为应用程序提供灵活的扩展和定制功能。通常用于制作游戏 Mod。</p>
<a id="more"></a>

<h3 id="1-1-安装调试"><a href="#1-1-安装调试" class="headerlink" title="1.1 安装调试"></a>1.1 安装调试</h3><p>在 VsCode 上搭建 Lua 编译环境</p>
<ol>
<li><p>安装 MinGW</p>
</li>
<li><p>安装 Lua 编译环境</p>
<p><a href="http://luadist.org/" target="_blank" rel="noopener">LuaDist官方下载地址</a></p>
</li>
<li><p>配置环境变量</p>
<p><img src="/images/lua/lua-path1.jpg" alt=""></p>
<p><img src="/images/lua/lua-path2.jpg" alt=""></p>
</li>
<li><p>Vscode 中 Lua 环境的配置</p>
<p>插件：<code>Lua Debug</code>、<code>Code Runner</code></p>
<p>Code Runner 配置:</p>
<p>勾选： </p>
<ul>
<li>✔ Run In Terminal</li>
<li>✔ Show Execution Message</li>
</ul>
<p><img src="/images/lua/runcode-config.jpg" alt=""></p>
</li>
<li><p>launch 配置</p>
<p>运行 → 添加配置 → 选择 Lua Debug</p>
<p><img src="/images/lua/launch.jpg" alt=""></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">"configurations": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>运行调试</li>
</ol>
<p><code>ctrl + shift + d</code> 打开运行面板，点击右上角的 <code>Run File</code> 运行 或 <code>Debug File</code> 调试。</p>
</li>
</ol>
<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><h3 id="2-1-类型-amp-值"><a href="#2-1-类型-amp-值" class="headerlink" title="2.1 类型&amp;值"></a>2.1 类型&amp;值</h3><p>Lua 是一种动态类型语言。Lua 没有类型定义，也就是说 Lua 的变量是没有类型的，只有值才有。</p>
<h4 id="2-1-1-基本类型"><a href="#2-1-1-基本类型" class="headerlink" title="2.1.1 基本类型"></a>2.1.1 基本类型</h4><p><strong>8种基本类型</strong>：<code>nil</code>，<code>boolean</code>，<code>number</code>，<code>string</code>，<code>function</code>，<code>userdata</code>，<code>thread</code> 和 <code>table</code>。</p>
<ol>
<li><p><code>nil</code>: 表示无效值，类似 javascript 中的 <code>null</code>。</p>
</li>
<li><p><code>boolean</code>: <code>true</code> 或 <code>false</code>。<code>nil</code> 和 <code>false</code> 为假，任何其他值都是真。</p>
</li>
<li><p><code>number</code>: 表示双精度类型的实浮点数。</p>
</li>
<li><p><code>string</code>: 字符串。</p>
</li>
<li><p><code>function</code>: 由 <code>Lua</code> 或 <code>C</code> 编写的函数。</p>
</li>
<li><p><code>userdata</code>: 允许将任意 <code>C</code> 数据结构存储在 Lua 变量中。</p>
</li>
<li><p><code>thread</code>: 表示执行的独立线路，用于执行协同程序。</p>
</li>
<li><p><code>table</code>: 关联数组，可以使用除 nil 和 NaN 之外的任何 Lua 值对数组进行索引，最简单构造表达式是<code>{}</code>，用来创建一个空表。</p>
</li>
</ol>
<p><strong>Tips</strong>: </p>
<ul>
<li><p><code>nil</code> 作比较时应该加上双引号</p>
</li>
<li><p>数字 <code>0</code> 也是 <code>true</code></p>
</li>
<li><p>当lua进行数学运算时，会尝试自动把值为数字类型为字符串的，转换为数字。</p>
</li>
<li><p>多行字符串用<code>[[]]</code>表示</p>
</li>
<li><p>字符串长度用 <code>#</code> 表示</p>
</li>
<li><p>Lua 数组的初始索引，不是 <em>0</em>， 而是<strong>1</strong>。</p>
</li>
</ul>
<h3 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h3><p>例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--这是单行注释--</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"这是单行注释"</span>);</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"> 这是多行注释</span></span><br><span class="line"><span class="comment"> 这是多行注释2</span></span><br><span class="line"><span class="comment"> --]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"这是多行注释"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-标识符"><a href="#2-3-标识符" class="headerlink" title="2.3 标识符"></a>2.3 标识符</h3><ol>
<li><p>Lua 区分大小写。</p>
</li>
<li><p>最好不要使用下划线加大写字母的标示符，因为这是 Lua 的内部全局变量格式，容易造成混淆冲突。</p>
</li>
<li><p>Lua 不允许使用特殊字符如 @, $, 和 % 来定义标示符</p>
</li>
</ol>
<p>例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--正确的标识符--</span></span><br><span class="line">abc apple red_moon hotDog dior999 _abc</span><br><span class="line"></span><br><span class="line"><span class="comment">--错误的标识符--</span></span><br><span class="line">_ZOO d@w s$<span class="number">9</span> r%s</span><br></pre></td></tr></table></figure>

<h3 id="2-4-关键字"><a href="#2-4-关键字" class="headerlink" title="2.4 关键字"></a>2.4 关键字</h3><p>保留关键字不能作为常量或变量或其他用户自定义标示符：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">and</td>
<td align="center">break</td>
<td align="center">do</td>
<td align="center">else</td>
</tr>
<tr>
<td align="center">elseif</td>
<td align="center">end</td>
<td align="center">false</td>
<td align="center">for</td>
</tr>
<tr>
<td align="center">function</td>
<td align="center">if</td>
<td align="center">in</td>
<td align="center">local</td>
</tr>
<tr>
<td align="center">nil</td>
<td align="center">not</td>
<td align="center">or</td>
<td align="center">repeat</td>
</tr>
<tr>
<td align="center">return</td>
<td align="center">then</td>
<td align="center">true</td>
<td align="center">until</td>
</tr>
<tr>
<td align="center">while</td>
<td align="center">goto</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="2-5-变量-amp-全局变量"><a href="#2-5-变量-amp-全局变量" class="headerlink" title="2.5 变量&amp;全局变量"></a>2.5 变量&amp;全局变量</h3><p>Lua 变量有三种类型：<code>全局变量</code>、<code>局部变量</code>、<code>表中的域</code>。</p>
<p>默认情况下，Lua 的变量是全局的，不需要刻意声明某个变量是全局变量。</p>
<p>当访问一个没有定义的变量时，不会报错，值为 nil。</p>
<p>想删除某个全局变量时，只需设置这个变量的值为 nil 即可。</p>
<p>变量的默认值均为 nil。</p>
<p>可以用 <code>local</code> 显式声明为<em>局部变量</em>。</p>
<h3 id="2-6-循环"><a href="#2-6-循环" class="headerlink" title="2.6 循环"></a>2.6 循环</h3><h4 id="2-6-1-循环处理方式"><a href="#2-6-1-循环处理方式" class="headerlink" title="2.6.1 循环处理方式"></a>2.6.1 循环处理方式</h4><table>
<thead>
<tr>
<th align="center">循环类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">while 循环</td>
<td align="center">在条件为 true 时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。</td>
</tr>
<tr>
<td align="center">for 循环</td>
<td align="center">重复执行指定语句，重复次数可在 for 语句中控制。</td>
</tr>
<tr>
<td align="center">repeat…until</td>
<td align="center">重复执行循环，直到 指定的条件为真时为止</td>
</tr>
<tr>
<td align="center">循环嵌套</td>
<td align="center">可以在循环内嵌套一个或多个循环语句（while do … end;for … do … end;repeat … until;）</td>
</tr>
</tbody></table>
<p>例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">#### <span class="number">2.6</span><span class="number">.2</span> 循环控制语句</span><br><span class="line"></span><br><span class="line">| 控制语句 | 描述 |</span><br><span class="line">| :<span class="comment">--: | :--: | 	</span></span><br><span class="line">| <span class="keyword">break</span> 语句 | 退出当前循环或语句，并开始脚本执行紧接着的语句。 | </span><br><span class="line">| <span class="keyword">goto</span> 语句 | 将程序的控制点转移到一个标签处。 | </span><br><span class="line"></span><br><span class="line">#### <span class="number">2.6</span><span class="number">.3</span> 无限循环</span><br><span class="line"></span><br><span class="line">在循环体中如果条件永远为 `<span class="literal">true</span>` 循环语句就会永远执行下去。</span><br><span class="line"></span><br><span class="line">### <span class="number">2.7</span> 条件</span><br><span class="line"></span><br><span class="line">| 语句 | 描述 |</span><br><span class="line">| :<span class="comment">--: | :--: | </span></span><br><span class="line">| <span class="keyword">if</span> 语句 | <span class="keyword">if</span> 语句 由一个布尔表达式作为条件判断，其后紧跟其他语句组成。 |</span><br><span class="line">| <span class="keyword">if</span>...<span class="keyword">else</span> 语句 | <span class="keyword">if</span> 语句 可以与 <span class="keyword">else</span> 语句搭配使用, 在 <span class="keyword">if</span> 条件表达式为 <span class="literal">false</span> 时执行 <span class="keyword">else</span> 语句代码。 |</span><br><span class="line">| <span class="keyword">if</span> 嵌套语句 | 可以在<span class="keyword">if</span> 或 <span class="keyword">else</span> <span class="keyword">if</span>中使用一个或多个 <span class="keyword">if</span> 或 <span class="keyword">else</span> <span class="keyword">if</span> 语句 。 |</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"></span><br><span class="line">```lua</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发笔记</category>
      </categories>
      <tags>
        <tag>lau</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex 和 grid 布局详解</title>
    <url>//frontend/base/css-flex/</url>
    <content><![CDATA[<p>Flex 布局，即弹性布局，任何一个容器都可以设置为 Flex 布局。</p>
<p>Grid 布局，即网格布局，任何一个容器都可以设置为 Grid 布局。</p>
<blockquote>
<p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。</p>
</blockquote>
<a id="more"></a>

<style>
.base-flex {
  display: flex;
}
.base-gird {
  display: grid;
}
.base-box {
  width: 300px;
  min-height: 100px;
  background: #f2f2f2;
  margin-bottom: 1rem;
}
.base-dot {
  width: 30px;
  height: 30px;
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
}
.dot-big {
  width: 100px;
}
.color1 {
  background: #79E2B7;
}
.color2 {
  background: #28C5C2;
}
.color3 {
  background: #8347ff;
}
.row {
  flex-direction: row;
}
.row-reverse {
  flex-direction: row-reverse;
}
.column {
  flex-direction: column;
}
.column-reverse {
  flex-direction: column-reverse;
}
.nowrap {
  flex-wrap: nowrap;
}
.wrap {
  flex-wrap: wrap;
}
.wrap-reverse {
  flex-wrap: wrap-reverse;
}
.x-start {
  justify-content: flex-start;
}
.x-end {
  justify-content: flex-end;
}
.x-center {
  justify-content: center;
}
.x-between {
  justify-content: space-between;
}
.x-around {
  justify-content: space-around;
}
.x-evenly {
  justify-content: space-evenly;
}
.y-start {
  align-items: flex-start;
}
.y-end {
  align-items: flex-end;
}
.y-center {
  align-items: center;
}
.y-baseline {
  align-items: baseline;
}
.y-stretch {
  align-items: stretch;
}
.table {
  height: auto;
}
.table-row {
  width: 100%;
}
.table-cell {
  flex: 1;
}
.y-stretch .table-cell {
  height: auto;
}
.all-y-start {
  align-content: flex-start;
}
.all-y-end {
  align-content: flex-end;
}
.all-y-center {
  align-content: center;
}
.all-y-between {
  align-content: space-between;
}
.all-y-around {
  align-content: space-around;
}
.all-y-stretch {
  align-content: stretch;
}
.row-start {
  justify-items: flex-start;
}
.row-end {
  justify-items: flex-end;
}
.row-center {
  justify-items: center;
}
.row-stretch {
  justify-items: stretch;
}
.row-baseline {
  justify-items: baseline;
}
.row-h312 {
  grid-template-rows: 30% 10% 20%;
}
.col-w312 {
  grid-template-columns: 30% 10% 20%;
}
.gird-9 {
  grid-template-rows: 33.33% 33.33% 33.33%;
  grid-template-columns: 33.33% 33.33% 33.33%;
}
.gird-16 {
  grid-template-rows: repeat(4, 25%);
  grid-template-columns: repeat(4, 25%);
}
.gird-16-2 {
  grid-template-rows: repeat(2, 10px 50px);
  grid-template-columns: repeat(2, 10px 50px 80px);
}
.gird-16-3 {
  grid-template-rows: repeat(2, 10px 50px);
  grid-template-columns: repeat(auto-fill, 50px);
}
.gird-fr-1-2 {
  grid-template-rows: repeat(2, 30px);
  grid-template-columns: repeat(2, 1fr 2fr);
}
.gird-fr-50-3-1 {
  grid-template-rows: repeat(2, 30px);
  grid-template-columns: 50px 3fr 1fr;
}
.gird-minmax-20-50 {
  grid-template-columns: 1fr 2fr minmax(20px, 50px);
}
.gird-r3-minmax-20-50 {
  grid-template-columns: repeat(3, 1fr 2fr minmax(20px, 50px));
}
.gird-auto-1 {
  grid-template-columns: 1fr auto 2fr;
}
.gird-name {
  grid-template-rows: [r1] 50px [r2] 100px [r3];
  grid-template-columns: [c1] 50px [c2] 30px [c3] 80px [c4];
}
.gird-gap-10-10 {
  gap: 10px 10px;
}
.gird-area-9 {
  grid-template-areas: 'g1 g2 g3'
                       'g4 g5 g6'
                       'g7 g8 g9';
}
.gird-flow-row {
  grid-auto-flow: row;
}
.gird-flow-column {
  grid-auto-flow: column;
}
.gird-flow-dense {
  grid-auto-flow: row dense;
}
.gird-flow-dense .base-dot {
  width: 100%;
  height: 100%;
}
.dot-1 {
  grid-row-start: 1;
  grid-row-end: 3;  
}
.dot-2 {
  grid-row-start: 1;
  grid-row-end: 4;  
}
.dot-3 {
  grid-row-start: 1;
  grid-row-end: 5;  
}
.dot-4 {
  grid-row-start: r2;
  grid-row-end: r3;  
  grid-column-start: c2;
  grid-column-end: c3;
}
.dot-5 {
  grid-row-start: g6-start;
  grid-row-end: g9-end;  
  grid-column-start: g6-start;
  grid-column-end: g9-end;
}
.dot-6 {
  grid-row-start: span 3; 
  grid-column-start: span 2;
}
.dot-7 {
  grid-row: g3-start / g5-end; 
  grid-column: g3-start / g5-end;
}
.z-9 {
  z-index: 9;
}
.gird-x-center {
  justify-items: center;
}
.gird-y-center {
  align-items: center;
}
.gird-x-c-center {
  justify-content: center;
}
.gird-y-c-center {
  align-content: center;
}
.gird-auto-row {
  grid-auto-rows: 20px;
}
.area-5 {
  grid-area: g5;
}
.order-9 {
  order: 9;
}
.grow-2 {
  flex-grow: 2;
}
.grow-3 {
  flex-grow: 3;
}
.shrink-0 {
  flex-shrink: 0;
}
.shrink-2 {
  flex-shrink: 2;
}
.basis-1 {
  flex-basis: 100px;
}
.basis-half {
  flex-basis: 50%;
}
</style>

<h2 id="1-Flex-基础语法"><a href="#1-Flex-基础语法" class="headerlink" title="1. Flex 基础语法"></a>1. Flex 基础语法</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.base-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">// or 行内弹性布局</span></span><br><span class="line">  <span class="comment">// display: inline-flex;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，设为 Flex 布局以后，子元素的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p>
<p><img src="/images/flex/axis.png" alt=""></p>
<h3 id="1-1-Flex-容器的属性"><a href="#1-1-Flex-容器的属性" class="headerlink" title="1.1 Flex 容器的属性"></a>1.1 Flex 容器的属性</h3><h4 id="1-1-1-flex-direction"><a href="#1-1-1-flex-direction" class="headerlink" title="1.1.1 flex-direction"></a>1.1.1 flex-direction</h4><p><code>flex-direction</code>: 项目的排列方向</p>
<ul>
<li>row 从左到右</li>
<li>row-reverse 从右到左</li>
<li>column 从下到上</li>
<li>column-reverse 从上到下</li>
</ul>
<p>flex-direction: <code>row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>;</p>
<p><strong>例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box base-flex"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>项目沿 X 轴方向，从左到右排列</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex row">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 X 轴方向，从右到左排列</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row-reverse</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex row-reverse">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 Y 轴方向，从下到上排列</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex column">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 Y 轴方向，从上到下排列</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.column-reverse</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex column-reverse">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<h4 id="1-1-2-flex-wrap"><a href="#1-1-2-flex-wrap" class="headerlink" title="1.1.2 flex-wrap"></a>1.1.2 flex-wrap</h4><p><code>flex-wrap</code>: 项目的换行方式</p>
<ul>
<li>nowrap 不换行</li>
<li>wrap 换行，从上到下，第一行在上方</li>
<li>wrap-reverse 换行，从下到上，第一行在下方</li>
</ul>
<p>flex-wrap: <code>nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>;</p>
<p><strong>例</strong>：</p>
<ul>
<li>项目不换行</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nowrap</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex nowrap">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>项目换行</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>项目换行，从下到上，第一行在下方</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap-reverse</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap-reverse">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<h4 id="1-1-3-flex-flow"><a href="#1-1-3-flex-flow" class="headerlink" title="1.1.3 flex-flow"></a>1.1.3 flex-flow</h4><p><code>flex-flow</code>: 项目的排列方向和换行方式缩写，默认值为 row nowrap</p>
<p>flex-flow: <code>&lt;flex-direction&gt;</code> || <code>&lt;flex-wrap&gt;</code></p>
<p><strong>例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box base-flex row-reverse wrap-reverse"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color1"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color2"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color3"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color1"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color2"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot dot-big color3"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="base-box base-flex row-reverse wrap-reverse">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<h4 id="1-1-4-justify-content"><a href="#1-1-4-justify-content" class="headerlink" title="1.1.4 justify-content"></a>1.1.4 justify-content</h4><p><code>justify-content</code>: 项目 X 轴的对齐方式</p>
<ul>
<li>flex-start 向开始端对齐，默认为左</li>
<li>flex-end 向结束端对齐，默认为右</li>
<li>center 水平居中对齐</li>
<li>space-between 两端对齐，项目之间的间隔都相等</li>
<li>space-around 每个项目两侧的间隔相等（项目之间的间隔比项目与边框的间隔大一倍）</li>
<li>space-evenly 项目到容器的边距比与项目之前的间隔比一致</li>
</ul>
<p>justify-content: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>space-evenly</code>;</p>
<p><strong>例</strong>：</p>
<ul>
<li>项目沿 X 轴方向，向<em>开始端</em>对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-start</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex x-start">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<p><strong>Tips</strong>: 当设置了 <code>flex-direction: row-reverse;</code> 时，<code>justify-content: flex-start;</code> 不起作用, 是因为设置 flex-direction 后，轴线的方向发生变化，<code>flex-start</code> 方向也随之变化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box base-flex row-reverse x-start"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="base-box base-flex row-reverse x-start">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box base-flex row-reverse x-end"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="base-box base-flex row-reverse x-end">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 X 轴方向，向<em>结束端</em>对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-end</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex x-end">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 X 轴方向，向中间对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-center</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex x-center">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 X 轴方向，两端对齐，项目到容器的边距为 0，项目之间的间隔均等</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-between</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex x-between">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 X 轴方向，项目到容器的边距<em>比</em>为 1，项目之间的间隔<em>比</em>为 2</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-around</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex x-around">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<p><strong>Tips</strong>：这里想要项目到容器的边距比与项目之前的间隔比一致的话，可以使用 <code>space-between</code> 属性, 再给容器设置宽高为 0 的伪元素<code>before</code>、<code>after</code>，即可。更简单的方法，使用<code>space-evenly</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-padding</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.box-padding</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box base-flex x-between box-padding"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<style>
  .box-padding:before,
  .box-padding:after {
    display: block;
    width: 0;
    height: 0;
    content: "";
  }
</style>
<div class="base-box base-flex x-between box-padding">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目到容器的边距比与项目之前的间隔比一致</li>
</ul>
<p><strong>Tips</strong>: 注意该属性部分浏览器可能还未实现，如果考虑到兼容性，可以使用上面的方法。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-evenly</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex x-evenly">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<h4 id="1-1-5-align-items"><a href="#1-1-5-align-items" class="headerlink" title="1.1.5 align-items"></a>1.1.5 align-items</h4><p><code>align-items</code>: 项目 Y 轴的对齐方式</p>
<ul>
<li>flex-start 向开始端对齐，默认为上</li>
<li>flex-end 向结束端对齐，默认为下</li>
<li>center 垂直居中对齐</li>
<li>baseline 项目里第一行文字的基线对齐</li>
<li>stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度</li>
</ul>
<p>align-items: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</p>
<p><strong>例</strong>：</p>
<ul>
<li>项目沿 Y 轴方向，向<em>开始端</em>对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.y-start</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex y-start">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 Y 轴方向，向<em>结束端</em>对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.y-end</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex y-end">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目沿 Y 轴方向，向中间对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.y-center</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex y-center">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>项目里第一行文字的基线对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.y-baseline</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box base-flex y-baseline"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 1.6rem"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 0.4rem"</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-dot color3"</span> <span class="attr">style</span>=<span class="string">"font-size: 0.8rem"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="base-box base-flex y-baseline">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">
    <div style="font-size: 1.8rem">2</div>
    <div style="font-size: 0.8rem">2.1</div>
  </div>
  <div class="base-dot color3" style="font-size: 1.2rem">3</div>
</div>

<ul>
<li>如果项目未设置高度或设为 auto，将占满整个容器的高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.y-stretch</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex y-stretch">
  <div class="base-dot color1" style="height: auto">1</div>
  <div class="base-dot color2" style="height: auto">2</div>
  <div class="base-dot color3" style="height: auto">3</div>
</div>

<p><strong>Tips</strong>：<code>stretch</code> 这个属性在显示表格数据的时候，可以使单元格高度自适应。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-box table base-flex wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-flex table-row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-cell base-dot color1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-cell base-dot color2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-cell base-dot color3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-flex table-row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-cell base-flex x-center y-center y-stretch"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-cell base-dot color1"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-row table-cell"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-row table-cell base-dot color2"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-row table-cell base-dot color3"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="base-box table base-flex wrap">
  <div class="base-flex table-row">
    <div class="table-cell base-dot color1">1</div>
    <div class="table-cell base-dot color2">2</div>
    <div class="table-cell base-dot color3">3</div>
  </div>
  <div class="base-flex table-row">
    <div class="table-cell base-flex x-center y-center y-stretch">
      <div class="table-cell base-dot color1">4</div>
    </div>
    <div class="table-row table-cell">
      <div class="table-row table-cell base-dot color2">5</div>
      <div class="table-row table-cell base-dot color3">6</div>
      <div class="table-row table-cell base-dot color1">7</div>
    </div>
  </div>
</div>

<h4 id="1-1-6-align-content"><a href="#1-1-6-align-content" class="headerlink" title="1.1.6 align-content"></a>1.1.6 align-content</h4><p><code>align-content</code>: 多根轴线的对齐方式(仅存在多根轴线时起作用)</p>
<p><strong>Tips</strong>:</p>
<ol>
<li><p>当<code>flex-wrap: wrap</code>时，项目会自动换行，此时就产生了多根轴线，项目换了几行就有几根轴线。这里说的轴线仅表示 Y 轴。</p>
</li>
<li><p>当存在多轴线时，<code>align-items: flex-start</code>不起作用。</p>
</li>
</ol>
<ul>
<li>flex-start 向开始端对齐</li>
<li>flex-end 向结束端对齐</li>
<li>center 垂直居中对齐</li>
<li>space-between 两端对齐，项目之间的间隔都相等</li>
<li>space-around 每个项目两侧的间隔相等（项目之间的间隔比项目与边框的间隔大一倍）</li>
<li>stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度</li>
</ul>
<p>align-content: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>;</p>
<p><strong>例</strong>：</p>
<ul>
<li>项目沿 Y 轴方向，向开始端对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.all-y-start</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap all-y-start" style="height: 120px">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>项目沿 Y 轴方向，向结束端对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.all-y-end</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap all-y-end" style="height: 120px">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>项目沿 Y 轴方向，向中间对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.all-y-center</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap all-y-center" style="height: 120px">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>项目沿 Y 轴方向，两端对齐，项目之间的间隔都相等</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.all-y-between</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap all-y-between" style="height: 120px">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>项目沿 Y 轴方向，每个项目两侧的间隔相等（项目之间的间隔比项目与边框的间隔大一倍）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.all-y-around</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap all-y-around" style="height: 120px">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<ul>
<li>如果项目未设置高度或设为 auto，将占满整个容器的高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.all-y-stretch</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex wrap all-y-stretch" style="height: 120px">
  <div class="base-dot dot-big color1" style="height: auto">1</div>
  <div class="base-dot dot-big color2" style="height: auto">2</div>
  <div class="base-dot dot-big color3" style="height: auto">3</div>
  <div class="base-dot dot-big color1" style="height: auto">4</div>
  <div class="base-dot dot-big color2" style="height: auto">5</div>
  <div class="base-dot dot-big color3" style="height: auto">6</div>
  <div class="base-dot dot-big color1" style="height: auto">7</div>
  <div class="base-dot dot-big color2" style="height: auto">8</div>
  <div class="base-dot dot-big color3" style="height: auto">9</div>
</div>

<h3 id="1-2-Flex-项目的属性"><a href="#1-2-Flex-项目的属性" class="headerlink" title="1.2 Flex 项目的属性"></a>1.2 Flex 项目的属性</h3><h4 id="1-2-1-order"><a href="#1-2-1-order" class="headerlink" title="1.2.1 order"></a>1.2.1 order</h4><p><code>order</code>: 定义项目的排列顺序，数值小的排前面。默认为 0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.order-9</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex">
  <div class="base-dot color1 order-9">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<h4 id="1-2-2-flex-grow"><a href="#1-2-2-flex-grow" class="headerlink" title="1.2.2 flex-grow"></a>1.2.2 flex-grow</h4><p><code>flex-grow</code>：属性定义项目的放大比例，数字越大占的比例越大。默认为 0。为 0 时，即使存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grow-2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grow-3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2 grow-2">2</div>
  <div class="base-dot color3 grow-3">3</div>
</div>


<h4 id="1-2-3-flex-shrink"><a href="#1-2-3-flex-shrink" class="headerlink" title="1.2.3 flex-shrink"></a>1.2.3 flex-shrink</h4><p><code>flex-shrink</code>：属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。为 0 时，即使空间不足也不缩小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shrink-0</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shrink-2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex">
  <div class="base-dot dot-big color1">1</div>
  <div class="base-dot dot-big color2">2</div>
  <div class="base-dot dot-big color3 shrink-2">3</div>
  <div class="base-dot dot-big color1">4</div>
  <div class="base-dot dot-big color2">5</div>
  <div class="base-dot dot-big color3">6</div>
  <div class="base-dot dot-big color1 shrink-0">7</div>
  <div class="base-dot dot-big color2">8</div>
  <div class="base-dot dot-big color3">9</div>
</div>

<h4 id="1-2-4-flex-basis"><a href="#1-2-4-flex-basis" class="headerlink" title="1.2.4 flex-basis"></a>1.2.4 flex-basis</h4><p><code>flex-basis</code>：设置项目的初始大小</p>
<p><strong>Tips</strong>：当一个元素同时被设置了 flex-basis (除值为 auto 外) 和 width (或者在 flex-direction: column 情况下设置了 height) ，flex-basis 具有更高的优先级。auto 表示项目的原大小。</p>
<p>flex-basis: <code>&lt;width&gt;</code> | <code>auto</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.basis-1</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.basis-half</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-flex">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2 basis-1">2</div>
  <div class="base-dot color3 basis-half">3</div>
</div>

<h4 id="1-2-5-flex"><a href="#1-2-5-flex" class="headerlink" title="1.2.5 flex"></a>1.2.5 flex</h4><p><code>flex</code>：<code>&lt;flex-grow&gt;</code>, <code>&lt;flex-shrink&gt;</code> 和 <code>&lt;flex-basis&gt;</code> 的简写，默认值为 0 1 auto。后两个属性可选。</p>
<p>两个快捷值：</p>
<ol>
<li><p>auto (1 1 auto)</p>
</li>
<li><p>none (0 0 auto)</p>
</li>
</ol>
<h4 id="1-2-6-align-self"><a href="#1-2-6-align-self" class="headerlink" title="1.2.6 align-self"></a>1.2.6 align-self</h4><p>align-self 类似于容器中的 align-items， 作用于项目，并且优先级高于容器中的 align-items。默认值为auto 时表示继承容器中的 align-items 的值，如果没有容器，则等同于 stretch。</p>
<p>align-self: <code>auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</p>
<h2 id="2-Grid-基础语法"><a href="#2-Grid-基础语法" class="headerlink" title="2. Grid 基础语法"></a>2. Grid 基础语法</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.base-grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">// or 行内网格布局</span></span><br><span class="line">  <span class="comment">// display: inline-grid;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，设为网格布局以后，容器项目的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</p>
<h3 id="2-1-Grid-容器的属性"><a href="#2-1-Grid-容器的属性" class="headerlink" title="2.1 Grid 容器的属性"></a>2.1 Grid 容器的属性</h3><h4 id="2-1-1-grid-template-rows-amp-grid-template-columns"><a href="#2-1-1-grid-template-rows-amp-grid-template-columns" class="headerlink" title="2.1.1 grid-template-rows &amp; grid-template-columns"></a>2.1.1 grid-template-rows &amp; grid-template-columns</h4><ul>
<li><p><code>grid-template-rows</code>：设置网格中每一行的行高。</p>
</li>
<li><p><code>grid-template-columns</code>：设置网格中每一列的列宽。</p>
</li>
</ul>
<p><strong>例</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row-h312</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">30%</span> <span class="number">10%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird row-h312">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.col-w312</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">30%</span> <span class="number">10%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird col-w312">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li>切分九宫格</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-9</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
</div>

<ul>
<li>repeat() 自动重复切割</li>
</ul>
<p><code>repeat(&lt;重复次数&gt;, &lt;重复的宽度&gt;)</code>, <em>重复宽度</em>可以设置为多个值为一组，以空格隔开，<em>重复次数</em>可以使用<code>auto-fill</code>关键字来进行自动计算。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-16</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">25%</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">25%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-16">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
  <div class="base-dot color1">10</div>
  <div class="base-dot color2">11</div>
  <div class="base-dot color3">12</div>
  <div class="base-dot color1">13</div>
  <div class="base-dot color2">14</div>
  <div class="base-dot color3">15</div>
  <div class="base-dot color3">16</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-16-2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">10px</span> <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">10px</span> <span class="number">50px</span> <span class="number">80px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-16-2">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
  <div class="base-dot color1">10</div>
  <div class="base-dot color2">11</div>
  <div class="base-dot color3">12</div>
  <div class="base-dot color1">13</div>
  <div class="base-dot color2">14</div>
  <div class="base-dot color3">15</div>
  <div class="base-dot color3">16</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-16-3</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">10px</span> <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-16-3">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
  <div class="base-dot color1">10</div>
  <div class="base-dot color2">11</div>
  <div class="base-dot color3">12</div>
  <div class="base-dot color1">13</div>
  <div class="base-dot color2">14</div>
  <div class="base-dot color3">15</div>
  <div class="base-dot color3">16</div>
</div>

<ul>
<li>fr 网格宽度比例</li>
</ul>
<p><strong>Tips</strong>: 使用<code>fr</code>作为网格宽度单位，并且使用<code>auto-fill</code>设置为<code>repeat()</code>的重复次数时，该样式不生效，此时 css 报错：_Invalid property value_。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-fr-1-2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr <span class="number">2</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-fr-1-2">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-fr-50-3-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的意思是说，第一列宽为 50px，剩下的宽度为<code>(100% - 50px)</code>，然后第二列宽度为 <code>(100% - 50px)/ (3 + 1) * 3</code>，第三列宽度为 <code>(100% - 50px) / (3 + 1) * 1</code>。</p>
<div class="base-box base-gird gird-fr-50-3-1">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<ul>
<li>minmax() 宽度范围</li>
</ul>
<p><code>minmax(&lt;最小值&gt;, &lt;最大值&gt;)</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-minmax-20-50</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="built_in">minmax</span>(<span class="number">20px</span>, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-minmax-20-50">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-r3-minmax-20-50</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr <span class="number">2</span>fr minmax(<span class="number">20px</span>, <span class="number">50px</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong>：这里第 7、8、9 列的宽度和第 1、2、4 列的宽度不一致，是因为使用了 fr 为单位，此时列宽优先为单元格的列宽。</p>
<div class="base-box base-gird gird-r3-minmax-20-50">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<ul>
<li>auto 关键字</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-auto-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr auto <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong>：当某列的宽设置为 auto 时，此时列宽优先为单元格的列宽。</p>
<div class="base-box base-gird gird-auto-1">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<ul>
<li>网格线的命名</li>
</ul>
<p>可以使用方括号<code>[]</code>，指定每一根网格线的名字。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-name</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [r1] <span class="number">50px</span> [r2] <span class="number">100px</span> [r3];</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [c1] <span class="number">50px</span> [c2] <span class="number">30px</span> [c3] <span class="number">80px</span> [c4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-name">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<h4 id="2-2-2-row-gap-amp-column-gap-amp-gap"><a href="#2-2-2-row-gap-amp-column-gap-amp-gap" class="headerlink" title="2.2.2 row-gap &amp; column-gap &amp; gap"></a>2.2.2 row-gap &amp; column-gap &amp; gap</h4><ul>
<li><p><code>row-gap</code> 行与行之间的间距</p>
</li>
<li><p><code>column-gap</code> 列与列之间的间距</p>
</li>
<li><p><code>gap</code> 行间距与列间距的简写 <code>gap: &lt;row-gap&gt; &lt;column-gap&gt;;</code></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-gap-10-10</span> &#123;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9 gird-gap-10-10">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
</div>

<h4 id="2-2-3-grid-template-areas"><a href="#2-2-3-grid-template-areas" class="headerlink" title="2.2.3 grid-template-areas"></a>2.2.3 grid-template-areas</h4><p><code>grid-template-areas</code>指定区域，一个区域由单个或多个单元格组成。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-area-9</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">'g1 g2 g3'</span></span><br><span class="line">    <span class="string">'g4 g5 g6'</span></span><br><span class="line">    <span class="string">'g7 g8 g9'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong>: 区域的命名会影响到网格线，每个区域的起始网格线，会自动命名为<code>[区域名-start]</code>，终止网格线自动命名为<code>[区域名-end]</code>。</p>
<div class="base-box base-gird gird-9 gird-area-9">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
</div>

<p><strong>Q</strong>：划分区域和网格线的作用？</p>
<p><strong>A</strong>：可以在指定项目（单元格）位置和大小的时候使用，详见 → <a href="#2-2-1-grid-column-start-amp-grid-column-end-amp-grid-row-start-amp-grid-row-end">2.2.1 grid-column-start &amp; grid-column-end &amp; grid-row-start &amp; grid-row-end</a></p>
<h4 id="2-2-4-grid-auto-flow"><a href="#2-2-4-grid-auto-flow" class="headerlink" title="2.2.4 grid-auto-flow"></a>2.2.4 grid-auto-flow</h4><p><code>grid-auto-flow</code>，指定项目的排列顺序。</p>
<ul>
<li><p><code>row</code> 默认值<code>row</code>，先从左到右横排，如果第一行排满就切换到第二行，继续排。</p>
</li>
<li><p><code>column</code> 先从上到下竖排，如果第一列排满就切换到第二列，继续排。</p>
</li>
<li><p><code>row dense</code> 横排紧凑模式，如果出现空隙，则调度后面合适的项目填补</p>
</li>
<li><p><code>column dense</code> 竖排紧凑模式，如果出现空隙，则调度后面合适的项目填补</p>
</li>
</ul>
<p><strong>Tips</strong>: 使用<code>row dense</code>和<code>column dense</code>会打乱项目的顺序，适合在瀑布流排版的时候使用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-flow-row</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gird-flow-column</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9 gird-flow-column">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-flow-dense</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row dense;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-16 gird-flow-dense gird-gap-10-10">
  <div class="base-dot color1 dot-1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1 dot-3">4</div>
  <div class="base-dot color2 dot-2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3 dot-1">9</div>
</div>

<h4 id="2-1-5-justify-items-amp-align-items-amp-place-items"><a href="#2-1-5-justify-items-amp-align-items-amp-place-items" class="headerlink" title="2.1.5 justify-items &amp; align-items &amp; place-items"></a>2.1.5 justify-items &amp; align-items &amp; place-items</h4><ul>
<li><code>justify-items</code>: 单元格内容的水平对齐方式。</li>
</ul>
<p>start 向开始端对齐，默认为左<br>end 向结束端对齐，默认为右<br>center 水平居中对齐<br>stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度</p>
<p>justify-items: <code>start</code> | <code>end</code> | <code>center</code> | <code>stretch</code>;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-x-center</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9 gird-x-center">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
</div>

<ul>
<li><code>align-items</code>: 单元格内容的垂直对齐方式。</li>
</ul>
<p>align-items: <code>start</code> | <code>end</code> | <code>center</code> | <code>stretch</code>;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-y-center</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9 gird-y-center">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
</div>

<ul>
<li><code>place-items</code>: justify-items 和 align-items 的简写，水平垂直居中的对齐方式</li>
</ul>
<p><code>place-items: start end;</code>，这里如果省略第二个值，则浏览器认为与第一个值相等。</p>
<h4 id="2-1-6-justify-content-amp-justify-content-amp-place-content"><a href="#2-1-6-justify-content-amp-justify-content-amp-place-content" class="headerlink" title="2.1.6 justify-content &amp; justify-content &amp; place-content"></a>2.1.6 justify-content &amp; justify-content &amp; place-content</h4><ul>
<li><code>justify-content</code>: 内容区域(网格相对于容器)的水平对齐方式。</li>
</ul>
<p>justify-content: <code>start</code> | <code>end</code> | <code>center</code> | <code>stretch</code> | <code>space-around</code> | <code>space-between</code> | <code>space-evenly</code>;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-x-c-center</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird col-w312 gird-x-c-center">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<ul>
<li><code>align-content</code>: 内容区域(网格相对于容器)的垂直对齐方式。</li>
</ul>
<p>align-content: <code>start</code> | <code>end</code> | <code>center</code> | <code>stretch</code> | <code>space-around</code> | <code>space-between</code> | <code>space-evenly</code>;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-y-c-center</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird col-w312 gird-y-c-center">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
</div>

<h4 id="2-1-7-grid-auto-columns-amp-grid-auto-rows"><a href="#2-1-7-grid-auto-columns-amp-grid-auto-rows" class="headerlink" title="2.1.7 grid-auto-columns &amp; grid-auto-rows"></a>2.1.7 grid-auto-columns &amp; grid-auto-rows</h4><p>用来指定浏览器自动创建的多余网格的列宽和行高。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gird-auto-row</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9 gird-auto-row">
  <div class="base-dot color1">1</div>
  <div class="base-dot color2">2</div>
  <div class="base-dot color3">3</div>
  <div class="base-dot color1">4</div>
  <div class="base-dot color2">5</div>
  <div class="base-dot color3">6</div>
  <div class="base-dot color1">7</div>
  <div class="base-dot color2">8</div>
  <div class="base-dot color3">9</div>
  <div class="base-dot color1">10</div>
  <div class="base-dot color2">11</div>
</div>

<h4 id="2-1-8-grid-template-amp-grid"><a href="#2-1-8-grid-template-amp-grid" class="headerlink" title="2.1.8 grid-template &amp; grid"></a>2.1.8 grid-template &amp; grid</h4><ul>
<li><p><code>grid-template</code>: grid-template-columns、grid-template-rows 和 grid-template-areas 的简写</p>
</li>
<li><p><code>grid</code>: grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns 和 grid-auto-flow 的简写</p>
</li>
</ul>
<h3 id="2-2-Grid-项目的属性"><a href="#2-2-Grid-项目的属性" class="headerlink" title="2.2 Grid 项目的属性"></a>2.2 Grid 项目的属性</h3><h4 id="2-2-1-grid-column-start-amp-grid-column-end-amp-grid-row-start-amp-grid-row-end"><a href="#2-2-1-grid-column-start-amp-grid-column-end-amp-grid-row-start-amp-grid-row-end" class="headerlink" title="2.2.1 grid-column-start &amp; grid-column-end &amp; grid-row-start &amp; grid-row-end"></a>2.2.1 grid-column-start &amp; grid-column-end &amp; grid-row-start &amp; grid-row-end</h4><ul>
<li><p><code>grid-column-start</code>: 定位项目左边框所在的垂直线网格</p>
</li>
<li><p><code>grid-column-end</code>: 定位项目右边框所在的垂直线网格</p>
</li>
<li><p><code>grid-row-start</code>: 定位项目上边框所在的水平线网格</p>
</li>
<li><p><code>grid-row-end</code>: 定位项目下边框所在的水平线网格</p>
</li>
</ul>
<p><strong>例</strong>：</p>
<ol>
<li><p>以第几条网格线定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dot-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-9">
 <div class="base-dot color1 dot-1" style="width: auto; height: auto">1</div>
 <div class="base-dot color2">2</div>
 <div class="base-dot color3">3</div>
 <div class="base-dot color1">4</div>
 <div class="base-dot color2">5</div>
 <div class="base-dot color3">6</div>
</div>
</li>
<li><p>以网格线名字定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dot-4</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: r2;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: r3;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: c2;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: c3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-name">
 <div class="base-dot color1 dot-4" style="width: auto; height: auto">1</div>
 <div class="base-dot color2">2</div>
 <div class="base-dot color3">3</div>
 <div class="base-dot color1">4</div>
 <div class="base-dot color2">5</div>
 <div class="base-dot color3">6</div>
</div>
</li>
<li><p>以区域定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dot-5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: g5-start;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: g6-end;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: g5-end;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: g6-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-area-9">
 <div class="base-dot color1 dot-5" style="width: auto; height: auto">1</div>
 <div class="base-dot color2">2</div>
 <div class="base-dot color3">3</div>
 <div class="base-dot color1">4</div>
 <div class="base-dot color2">5</div>
 <div class="base-dot color3">6</div>
</div>
</li>
<li><p>span 跨越网格</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dot-6</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: span <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-16">
 <div class="base-dot color1 dot-6" style="width: auto; height: auto">1</div>
 <div class="base-dot color2">2</div>
 <div class="base-dot color3">3</div>
 <div class="base-dot color1">4</div>
 <div class="base-dot color2">5</div>
 <div class="base-dot color3">6</div>
</div>
</li>
<li><p>指定项目重叠顺序</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.z-9</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-area-9">
 <div class="base-dot color1 dot-5 z-9" style="width: auto; height: auto;">1</div>
 <div class="base-dot color2">2</div>
 <div class="base-dot color3">3</div>
 <div class="base-dot color1">4</div>
 <div class="base-dot color2 dot-7" style="width: auto; height: auto">5</div>
 <div class="base-dot color3">6</div>
</div>

</li>
</ol>
<h4 id="2-2-2-grid-column-amp-grid-row"><a href="#2-2-2-grid-column-amp-grid-row" class="headerlink" title="2.2.2 grid-column &amp; grid-row"></a>2.2.2 grid-column &amp; grid-row</h4><ul>
<li><p><code>grid-column</code>: grid-column-start 和 grid-column-end 的简写</p>
</li>
<li><p><code>grid-row</code>: grid-row-start 和 grid-row-end 的简写</p>
</li>
</ul>
<p>grid-column: <code>&lt;start-line&gt;</code> / <code>&lt;end-line&gt;</code></p>
<p>grid-row: <code>&lt;start-line&gt;</code> / <code>&lt;end-line&gt;</code></p>
<p><strong>Tips</strong>: 如果斜杠后面的参数不写，则默认跨越 <em>1</em> 个网格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dot-7</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: g3-start / g5-end; </span><br><span class="line">  <span class="attribute">grid-column</span>: g3-start / g5-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这里 .dot-7 效果 = .dot-8 */</span></span><br><span class="line"><span class="selector-class">.dot-8</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: g3-start / span <span class="number">2</span>; </span><br><span class="line">  <span class="attribute">grid-column</span>: g3-start / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-grid-area"><a href="#2-2-3-grid-area" class="headerlink" title="2.2.3 grid-area"></a>2.2.3 grid-area</h4><ol>
<li><p>指定项目放在某个区域</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.area-5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: g5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="base-box base-gird gird-area-9">
 <div class="base-dot color1 area-5">1</div>
 <div class="base-dot color2">2</div>
 <div class="base-dot color3">3</div>
 <div class="base-dot color1">4</div>
 <div class="base-dot color2">5</div>
 <div class="base-dot color3">6</div>
</div>
</li>
<li><p>用作 <code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code> 的简写</p>
<p>grid-area: <code>&lt;row-start&gt;</code> / <code>&lt;column-start&gt;</code> / <code>&lt;row-end&gt;</code> / <code>&lt;column-end&gt;</code></p>
</li>
</ol>
<h4 id="2-2-4-justify-self-amp-align-self-amp-place-self"><a href="#2-2-4-justify-self-amp-align-self-amp-place-self" class="headerlink" title="2.2.4 justify-self &amp; align-self &amp; place-self"></a>2.2.4 justify-self &amp; align-self &amp; place-self</h4><ul>
<li><p>justify-self: <code>start</code> | <code>end</code> | <code>center</code> | <code>stretch</code></p>
</li>
<li><p>align-self: <code>start</code> | <code>end</code> | <code>center</code> | <code>stretch</code></p>
</li>
<li><p>place-self: <code>&lt;align-self&gt;</code> <code>&lt;justify-self&gt;</code></p>
</li>
</ul>
<h2 id="3-常用布局"><a href="#3-常用布局" class="headerlink" title="3. 常用布局"></a>3. 常用布局</h2><h3 id="3-1-页面布局"><a href="#3-1-页面布局" class="headerlink" title="3.1 页面布局"></a>3.1 页面布局</h3><h4 id="3-1-1-单列布局"><a href="#3-1-1-单列布局" class="headerlink" title="3.1.1 单列布局"></a>3.1.1 单列布局</h4><ol>
<li><p>上中下居中</p>
</li>
<li><p>上下通栏，中间居中</p>
</li>
</ol>
<h4 id="3-1-2-两列布局"><a href="#3-1-2-两列布局" class="headerlink" title="3.1.2 两列布局"></a>3.1.2 两列布局</h4><ol>
<li><p>左边固定宽度高度（高度为屏幕高度）；右边宽度自适应，高度随内容滚动</p>
</li>
<li><p>左边固定宽度，高度跟随右边；右边宽度自适应，高度随内容滚动</p>
</li>
</ol>
<h4 id="3-1-3-三列布局"><a href="#3-1-3-三列布局" class="headerlink" title="3.1.3 三列布局"></a>3.1.3 三列布局</h4><ol>
<li><p>左右侧边栏高度跟随中间（等高），左右宽度固定；中间内容高度滚动，中间宽度自适应</p>
</li>
<li><p>左右侧边栏高度跟随中间（等高），中间内容高度滚动，左中右按比例宽度自适应</p>
</li>
</ol>
<h4 id="3-1-4-粘连布局"><a href="#3-1-4-粘连布局" class="headerlink" title="3.1.4 粘连布局"></a>3.1.4 粘连布局</h4><ol>
<li>当container内容高度大于屏幕高度时，footer跟随在内容后面；当container内容高度小于屏幕高度时，footer位于屏幕底部。</li>
</ol>
<h3 id="3-2-组件布局"><a href="#3-2-组件布局" class="headerlink" title="3.2 组件布局"></a>3.2 组件布局</h3><h3 id="3-3-业务布局"><a href="#3-3-业务布局" class="headerlink" title="3.3 业务布局"></a>3.3 业务布局</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">《Flex 布局教程：语法篇》 by 阮一峰</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">《CSS Grid 网格布局教程》 by 阮一峰</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_in_Flexbox" target="_blank" rel="noopener">《Box alignment in Flexbox》 by MDN</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Flex</tag>
        <tag>grid</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Easy API</title>
    <url>//project/easyapi/</url>
    <content><![CDATA[<p>一个符合 RESTful API 架构的 Web 接口，使用 Nest + MySql 开发。</p>
<a id="more"></a>

<h2 id="1-用户模块"><a href="#1-用户模块" class="headerlink" title="1.用户模块"></a>1.用户模块</h2><h3 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1 注册账号"></a>1.1 注册账号</h3><p>地址：<code>/api/user/register</code></p>
<p>方法：<code>Post</code></p>
<p>参数:<br><strong>body</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/** 用户名 */</span></span><br><span class="line">  userName: string,</span><br><span class="line">  <span class="comment">/** 密码 */</span></span><br><span class="line">  password: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/** 0 请求成功 */</span></span><br><span class="line">  <span class="string">"ReturnCode"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"ErrorMassage"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">"Data"</span>: &#123;</span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="string">"userName"</span>: <span class="string">"abc123"</span>,</span><br><span class="line">    <span class="comment">/** 昵称 */</span></span><br><span class="line">    <span class="string">"nickName"</span>: <span class="string">"abc123"</span>,</span><br><span class="line">    <span class="comment">/** 普通用户 */</span></span><br><span class="line">    <span class="string">"role"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/** 用户id */</span></span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/** 创建时间 */</span></span><br><span class="line">    <span class="string">"createTime"</span>: <span class="string">"2020-09-16T07:11:16.000Z"</span>,</span><br><span class="line">    <span class="comment">/** 更新时间 */</span></span><br><span class="line">    <span class="string">"updateTime"</span>: <span class="string">"2020-09-16T07:11:16.000Z"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-登录账号"><a href="#1-2-登录账号" class="headerlink" title="1.2 登录账号"></a>1.2 登录账号</h3><p>地址：<code>/api/user/login</code></p>
<p>方法：<code>Post</code></p>
<p>参数：<br><strong>body</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 用户名 */</span></span><br><span class="line">  userName: string,</span><br><span class="line">  <span class="comment">/* 密码 */</span></span><br><span class="line">  password: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ReturnCode"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"ErrorMassage"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">"Data"</span>: &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"userName"</span>: <span class="string">"abc123"</span>,</span><br><span class="line">    <span class="string">"nickName"</span>: <span class="string">"abc123"</span>,</span><br><span class="line">    <span class="string">"role"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"createTime"</span>: <span class="string">"2020-09-16T07:11:16.000Z"</span>,</span><br><span class="line">    <span class="string">"updateTime"</span>: <span class="string">"2020-09-16T07:11:16.000Z"</span>,</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImFiYzEyMyIsImlkIjoyLCJuaWNrTmFtZSI6ImFiYzEyMyIsInJvbGUiOjAsImlhdCI6MTYwMDI0MDU2NiwiZXhwIjoxNjAwMjY5MzY2fQ.FSaFgz21MYa1VFfTzK5aOrYeSrnG-DYMmdH_oHW6sAg"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-根据id获取用户信息"><a href="#1-2-根据id获取用户信息" class="headerlink" title="1.2 根据id获取用户信息"></a>1.2 根据id获取用户信息</h3><p>地址：<code>/api/user/{id}</code></p>
<p>方法：<code>Get</code></p>
<p>参数：<code>{}</code></p>
<p>返回：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ReturnCode"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"ErrorMassage"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">"Data"</span>: &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"userName"</span>: <span class="string">"abc123"</span>,</span><br><span class="line">    <span class="string">"nickName"</span>: <span class="string">"abc123"</span>,</span><br><span class="line">    <span class="string">"role"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"createTime"</span>: <span class="string">"2020-09-16T07:11:16.000Z"</span>,</span><br><span class="line">    <span class="string">"updateTime"</span>: <span class="string">"2020-09-16T07:11:16.000Z"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-登录后编辑用户信息"><a href="#1-3-登录后编辑用户信息" class="headerlink" title="1.3 登录后编辑用户信息"></a>1.3 登录后编辑用户信息</h3><p>地址：<code>/api/user/{id}</code></p>
<p>方法：<code>Patch</code></p>
<p>参数：</p>
<p><strong>Authorization</strong>: <code>BearerToken={token}</code></p>
<p><strong>body</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  nickName: <span class="string">"hahaha"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ReturnCode"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"ErrorMassage"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">"Data"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
        <tag>Nest</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>知乎Plus Zhihu Plus</title>
    <url>//project/zhihuplus/</url>
    <content><![CDATA[<h3 id="功能说明："><a href="#功能说明：" class="headerlink" title="功能说明："></a>功能说明：</h3><ol>
<li><p>增加暗色极简阅读模式，保护眼睛；</p>
</li>
<li><p>去除官方或用户插入的广告，更易阅读;</p>
</li>
<li><p>升级为纤细优雅的滚动条，使画面更简洁；</p>
</li>
<li><p>增加无图模式，摸鱼必备。</p>
</li>
</ol>
<a id="more"></a>
<h3 id="插件下载地址"><a href="#插件下载地址" class="headerlink" title="插件下载地址"></a>插件下载地址</h3><ol>
<li><p><a href="https://github.com/gaofanghuang/chrome-plug-in/tree/main/zhihuPlus" target="_blank" rel="noopener">** Chrome 扩展版 **</a> → 最新版</p>
</li>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/411416-%E7%9F%A5%E4%B9%8Eplus" target="_blank" rel="noopener">** Tampermonkey Userscript 油猴脚本版 → Greasy Fork **</a> → 此版本已停止更新</p>
</li>
</ol>
<h2 id="功能更新："><a href="#功能更新：" class="headerlink" title="功能更新："></a>功能更新：</h2><h3 id="v0-3-2021-01-13"><a href="#v0-3-2021-01-13" class="headerlink" title="v0.3 2021-01-13:"></a>v0.3 2021-01-13:</h3><ol>
<li>发布 Chrome 扩展版</li>
<li>增加无图模式</li>
</ol>
<h3 id="v0-2-2020-09-17"><a href="#v0-2-2020-09-17" class="headerlink" title="v0.2 2020-09-17:"></a>v0.2 2020-09-17:</h3><ol>
<li>增加了：外站链接点击后直接跳转</li>
<li>修复了：关闭阅读模式时，样式未完全恢复的问题</li>
<li>增加了：专栏页面阅读模式</li>
</ol>
<h3 id="v0-1-2020-09-16："><a href="#v0-1-2020-09-16：" class="headerlink" title="v0.1 2020-09-16："></a>v0.1 2020-09-16：</h3><ol>
<li>发布v0.1</li>
</ol>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Chrome扩展</tag>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 数据类型及结构</title>
    <url>//frontend/js/data-type/</url>
    <content><![CDATA[<h2 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>基本类型（基本数值、基本数据类型）是一种<em>既非对象也无方法</em>的数据。</p>
<p>在 JavaScript 中，共有<em>7</em>种基本类型：string，number，bigint，boolean，null，undefined，symbol (ECMAScript 2016新增)。</p>
<a id="more"></a>

<ol>
<li><p><code>string</code>: 字符串</p>
</li>
<li><p><code>number</code>: 数值</p>
</li>
<li><p><code>bigint</code>: 大整数</p>
</li>
<li><p><code>boolean</code>: 布尔</p>
</li>
<li><p><code>null</code>: 空值</p>
</li>
<li><p><code>undefined</code>: 未定义</p>
</li>
<li><p><code>symbol</code>: 字面量</p>
</li>
</ol>
<h3 id="bigint"><a href="#bigint" class="headerlink" title="bigint"></a>bigint</h3><p>bigint 在平时的开发中很少用到，它用于表示大于 2^53 - 1 的整数，和 number 的区别在于：number 的最大值为 2^53 - 1，而 BigInt 可以表示任意大的整数。</p>
<h3 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h3><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="built_in">console</span>.log(a, a === <span class="number">0.3</span>) <span class="comment">// 0.30000000000000004 false</span></span><br></pre></td></tr></table></figure>

<p><code>D1.D2D3D4...Dp x BE</code>, 这种通用形式被称作浮点数。</p>
<p>浮点数的好处是它可以用来表示任何数值。例如，整数 1 可以表示为 1.0 × 10^0。光的速度可以表示为2.99792458 × 108 m/s。1/2 可以被表示为二进制形式 0.1 × 2^0。</p>
<p><strong>处理浮点数</strong>：</p>
<ol>
<li><p>在算数运算之前或之后完成取舍</p>
</li>
<li><p>仅是用于显示时，使用<code>toPrecision()</code> 和 <code>str.toFixed()</code>处理，之后记得要转回 number 类型</p>
</li>
<li><p>使用 sinfuljs 或 mathjs 库</p>
</li>
</ol>
<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><h3 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h3><h2 id="隐式-显式-名义和鸭子类型"><a href="#隐式-显式-名义和鸭子类型" class="headerlink" title="隐式, 显式, 名义和鸭子类型"></a>隐式, 显式, 名义和鸭子类型</h2><h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><h2 id="与-typeof-与-instanceof"><a href="#与-typeof-与-instanceof" class="headerlink" title="== 与 ===, typeof 与 instanceof"></a>== 与 ===, typeof 与 instanceof</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>查看<a href="/js/data-handle">数据处理</a></p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 开发入门</title>
    <url>//code/python/</url>
    <content><![CDATA[<p>to be continue …</p>
]]></content>
      <categories>
        <category>游戏开发笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>待填坑</tag>
      </tags>
  </entry>
  <entry>
    <title>LayUI -- Layer &amp; LayDate 应用总结</title>
    <url>//frontend/lib/layer/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Layer.js 是基于 JQuery 的一款 UI 插件，是专用于 Web 的弹出层组件。</p>
<p>官网地址：<a href="https://layer.layui.com/" target="_blank" rel="noopener">https://layer.layui.com/</a></p>
<p>LayDate.js 是基于 JQuery 的一款 UI 插件，是专用于 Web 的日期与时间组件。</p>
<p>官网地址：<a href="https://www.layui.com/laydate/" target="_blank" rel="noopener">https://www.layui.com/laydate/</a></p>
<h2 id="Layer-使用方法"><a href="#Layer-使用方法" class="headerlink" title="Layer 使用方法"></a>Layer 使用方法</h2><h3 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h3><!-- 弹出基础 Alert -->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-test"</span> <span class="attr">onclick</span>=<span class="string">"testBaseAlert()"</span>&gt;</span>弹出基础 Alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testBaseAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  layer.alert(<span class="string">"弹出基础Alert"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><button class="btn btn-test" onclick="testBaseAlert()">弹出基础 Alert</button></p>
<!-- 弹出带回调的 Alert -->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-test"</span> <span class="attr">onclick</span>=<span class="string">"testBackAlert()"</span>&gt;</span></span><br><span class="line">  弹出带回调的 Alert</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testBackAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  layer.alert(<span class="string">"弹出回调Alert"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"弹出回调Alert"</span>, index);</span><br><span class="line">    layer.close(index);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><button class="btn btn-test" onclick="testBackAlert()">弹出带回调的 Alert</button></p>
<!-- 弹出自定义 Alert -->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-test"</span> <span class="attr">onclick</span>=<span class="string">"testDiyAlert()"</span>&gt;</span>弹出自定义 Alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDiyAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  layer.alert(<span class="string">"弹出自定义Alert"</span>, &#123;</span><br><span class="line">    <span class="comment">// 右上角关闭按钮的另外一种样式</span></span><br><span class="line">    closeBtn: <span class="number">2</span>,</span><br><span class="line">    cancel: <span class="function"><span class="keyword">function</span> (<span class="params">index, layero</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 点右上角关闭按钮时触发</span></span><br><span class="line">      <span class="keyword">if</span> (confirm(<span class="string">"确定要关闭么"</span>)) &#123;</span><br><span class="line">        <span class="comment">// 只有当点击confirm框的确定时，该层才会关闭</span></span><br><span class="line">        layer.close(index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><button class="btn btn-test" onclick="testDiyAlert()">弹出自定义 Alert</button></p>
<h3 id="Confirm"><a href="#Confirm" class="headerlink" title="Confirm"></a>Confirm</h3><!-- 弹出基础 Confirm -->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-test"</span> <span class="attr">onclick</span>=<span class="string">"testBaseConfirm()"</span>&gt;</span></span><br><span class="line">  弹出基础 Confirm</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testBaseConfirm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  layer.confirm(</span><br><span class="line">    <span class="string">"是否确认删除？"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      btn: [<span class="string">"确认"</span>, <span class="string">"取消"</span>], <span class="comment">//按钮</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      layer.msg(<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      layer.msg(<span class="string">"取消删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><button class="btn btn-test" onclick="testBaseConfirm()">弹出基础 Confirm</button></p>
<h3 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loading = layer.load();</span><br><span class="line"><span class="comment">// 关闭loading</span></span><br><span class="line">layer.close(loading);</span><br><span class="line"><span class="comment">// 强制关闭所有弹框</span></span><br><span class="line">layer.closeAll();</span><br></pre></td></tr></table></figure>

<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">layer.msg(<span class="string">"删除成功"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testBaseIframe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  layer.open(&#123;</span><br><span class="line">    type: <span class="number">2</span>,</span><br><span class="line">    title: <span class="string">"layer mobile页"</span>,</span><br><span class="line">    shadeClose: <span class="literal">true</span>,</span><br><span class="line">    shade: <span class="number">0.8</span>,</span><br><span class="line">    area: [<span class="string">"380px"</span>, <span class="string">"90%"</span>],</span><br><span class="line">    <span class="comment">// iframe的url, 这里可以写本地地址，也可以写网络地址</span></span><br><span class="line">    <span class="comment">// content: "//huanggaofang.com/",</span></span><br><span class="line">    content: <span class="string">"../common/selectUser.html"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><button class="btn btn-test" onclick="testBaseIframe()">弹出指定网页 Iframe</button></p>
<h2 id="LayDate-使用方法"><a href="#LayDate-使用方法" class="headerlink" title="LayDate 使用方法"></a>LayDate 使用方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">laydate.render(&#123;</span><br><span class="line">  <span class="comment">// 指定元素</span></span><br><span class="line">  elem: <span class="string">"#testBaseDate"</span>,</span><br><span class="line">  <span class="comment">// 日期格式</span></span><br><span class="line">  format: <span class="string">"yyyy年MM月dd日"</span>,</span><br><span class="line">  <span class="comment">// 默认值</span></span><br><span class="line">  value: <span class="string">"2018-08-18"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<input class="input-control" id="testBaseDate" placeholder="请选择日期" />

<!-- extra__start -->

<script src="https://cdn.bootcdn.net/ajax/libs/layui/2.6.4/layui.min.js"></script>
<script>
  const layer = layui.layer;
  function testBaseAlert() {
    layer.alert('弹出基础Alert')
  }
  function testBackAlert() {
    layer.alert("弹出回调Alert", function(index) {
      console.log('弹出回调Alert', index)
      layer.close(index);
    });
  }
  function testDiyAlert() {
    layer.alert("弹出自定义Alert", {
      // 右上角关闭按钮的另外一种样式
      closeBtn: 2,
      cancel: function(index, layero){ 
        // 点右上角关闭按钮时触发
        if(confirm('确定要关闭么')){
          // 只有当点击confirm框的确定时，该层才会关闭
          layer.close(index)
        }
        return false; 
      } 
    });
  }
  function testBaseConfirm() {
    layer.confirm(
      "是否确认删除？",
      {
        btn: ["确认", "取消"], //按钮
      },
      function () {
        layer.msg("删除成功");
      },
      function () {
        layer.msg("取消删除");
      }
    );
  }
  function testBaseIframe() {
    layer.open({
      type: 2,
      title: "指定iframe",
      shadeClose: true,
      shade: 0.8,
      area: ["375px", "90%"],
      // iframe的url, 这里可以写本地地址，也可以写网络地址
      content: "//huanggaofang.com/",
    });
  }
  const laydate = layui.laydate;
  laydate.render({
    // 指定元素
    elem: '#testBaseDate',
    // 日期格式
    format: 'yyyy年MM月dd月',
    // 默认值
     value: '2021年08月18月'
  });
</script>

<!-- extra__end -->
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript Lib</tag>
        <tag>Layer</tag>
        <tag>jQuery Lib</tag>
      </tags>
  </entry>
  <entry>
    <title>Moment.js 应用总结</title>
    <url>//frontend/lib/moment.js/</url>
    <content><![CDATA[<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install moment</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line">moment().format()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"moment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  moment().format()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install moment</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h3 id="格式化参数"><a href="#格式化参数" class="headerlink" title="格式化参数"></a>格式化参数</h3><p><strong>注意</strong>: 如星期等数据需要先设置本地化格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置为中文格式</span></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: 格式化参数区分大小写。</p>
<p>例：2020-06-04 16:05:32:120 星期四 第二季度</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">示例</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">YYYY</td>
<td align="center">2020</td>
<td align="center">4 或 2 位数字的年份</td>
</tr>
<tr>
<td align="center">YY</td>
<td align="center">20</td>
<td align="center">2 位数字的年份</td>
</tr>
<tr>
<td align="center">Y</td>
<td align="center">2020</td>
<td align="center">带有任意数字和符号的年份</td>
</tr>
<tr>
<td align="center">Q</td>
<td align="center">2</td>
<td align="center">年份的季度。将月份设置为季度的第一个月</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">6</td>
<td align="center">月份数字，不包含0</td>
</tr>
<tr>
<td align="center">MM</td>
<td align="center">06</td>
<td align="center">月份数字，包含0</td>
</tr>
<tr>
<td align="center">MMM</td>
<td align="center">Jun</td>
<td align="center">语言环境中的月份名称，由 <code>moment.locale()</code> 设置</td>
</tr>
<tr>
<td align="center">MMMM</td>
<td align="center">June</td>
<td align="center">语言环境中的月份名称，由 <code>moment.locale()</code> 设置</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">4</td>
<td align="center">月的某天，不包含0</td>
</tr>
<tr>
<td align="center">DD</td>
<td align="center">04</td>
<td align="center">月的某天，包含0</td>
</tr>
<tr>
<td align="center">Do</td>
<td align="center">4th</td>
<td align="center">月的某天，带序号</td>
</tr>
<tr>
<td align="center">DDD</td>
<td align="center">156</td>
<td align="center">年的某天，不包含0</td>
</tr>
<tr>
<td align="center">DDDD</td>
<td align="center">156</td>
<td align="center">年的某天，包含0</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">1591257932</td>
<td align="center">Unix 时间戳</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">1591257932000</td>
<td align="center">Unix 毫秒时间戳</td>
</tr>
<tr>
<td align="center">GGGG</td>
<td align="center">2020</td>
<td align="center">ISO 的 4 位数字的周年</td>
</tr>
<tr>
<td align="center">GG</td>
<td align="center">2020</td>
<td align="center">ISO 的 2 位数字的周年</td>
</tr>
<tr>
<td align="center">gggg</td>
<td align="center">2020</td>
<td align="center">语言环境的 4 位数字的周年</td>
</tr>
<tr>
<td align="center">gg</td>
<td align="center">20</td>
<td align="center">语言环境的 2 位数字的周年</td>
</tr>
<tr>
<td align="center">WW</td>
<td align="center">23</td>
<td align="center">ISO 的年的第几周</td>
</tr>
<tr>
<td align="center">W</td>
<td align="center">23</td>
<td align="center">ISO 的年的第几周</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">23</td>
<td align="center">语言环境的年的第几周，不包含0</td>
</tr>
<tr>
<td align="center">ww</td>
<td align="center">23</td>
<td align="center">语言环境的年的第几周，包含0</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">4</td>
<td align="center">ISO 的星期几</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">3</td>
<td align="center">语言环境的星期几</td>
</tr>
<tr>
<td align="center">ddd</td>
<td align="center">周四</td>
<td align="center">语言环境的星期几的名称，由 <code>moment.locale()</code> 设置</td>
</tr>
<tr>
<td align="center">dddd</td>
<td align="center">星期四</td>
<td align="center">语言环境的星期几的名称，由 <code>moment.locale()</code> 设置</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">2020/6/4</td>
<td align="center">语言环境的日期（以本地格式）</td>
</tr>
<tr>
<td align="center">ll</td>
<td align="center">2020年6月4日</td>
<td align="center">语言环境的月份名称、月份日期、年份</td>
</tr>
<tr>
<td align="center">lll</td>
<td align="center">2020年6月4日 16:05</td>
<td align="center">语言环境的月份名称、月份日期、年份、时间</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">2020/06/04</td>
<td align="center">语言环境的日期（以本地格式）</td>
</tr>
<tr>
<td align="center">LL</td>
<td align="center">2020年6月4日</td>
<td align="center">语言环境的月份名称、月份日期、年份</td>
</tr>
<tr>
<td align="center">LLL</td>
<td align="center">2020年6月4日下午4点05分</td>
<td align="center">语言环境的月份名称、月份日期、年份、时间</td>
</tr>
<tr>
<td align="center">LLLL</td>
<td align="center">2020年6月4日星期四下午4点05分</td>
<td align="center">语言环境的星期几、月份名称、月份日期、年份、时间</td>
</tr>
<tr>
<td align="center">LT</td>
<td align="center">16:05</td>
<td align="center">语言环境的时间（不含秒钟）</td>
</tr>
<tr>
<td align="center">LTS</td>
<td align="center">16:05:32</td>
<td align="center">语言环境的时间（含秒钟）</td>
</tr>
<tr>
<td align="center">H</td>
<td align="center">16</td>
<td align="center">小时（24 小时制），不包含0</td>
</tr>
<tr>
<td align="center">HH</td>
<td align="center">16</td>
<td align="center">小时（24 小时制），包含0</td>
</tr>
<tr>
<td align="center">h</td>
<td align="center">4</td>
<td align="center">小时（12 小时制, 0 ~ 23），不包含0</td>
</tr>
<tr>
<td align="center">hh</td>
<td align="center">04</td>
<td align="center">小时（12 小时制, 0 ~ 23），包含0</td>
</tr>
<tr>
<td align="center">k</td>
<td align="center">16</td>
<td align="center">小时（24 小时制, 1 ~ 24），不包含0</td>
</tr>
<tr>
<td align="center">kk</td>
<td align="center">16</td>
<td align="center">小时（24 小时制, 1 ~ 24），包含0</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">下午</td>
<td align="center">上午或下午</td>
</tr>
<tr>
<td align="center">A</td>
<td align="center">下午</td>
<td align="center">上午或下午</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center">5</td>
<td align="center">分钟，不包含0</td>
</tr>
<tr>
<td align="center">mm</td>
<td align="center">05</td>
<td align="center">分钟，包含0</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">32</td>
<td align="center">秒钟，不包含0</td>
</tr>
<tr>
<td align="center">ss</td>
<td align="center">32</td>
<td align="center">秒钟，包含0</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">1</td>
<td align="center">带分数的秒钟(0~999), 即 100 毫秒 = 0.1 秒</td>
</tr>
<tr>
<td align="center">SS</td>
<td align="center">12</td>
<td align="center">带分数的秒钟(0~999), 即 120 毫秒 = 0.12 秒</td>
</tr>
<tr>
<td align="center">SSS</td>
<td align="center">120</td>
<td align="center">带分数的秒钟(0~999), 即 120 毫秒 = 0.12 秒</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="center">+08:00</td>
<td align="center">从 UTC 偏移为 +-HH:mm、+-HHmm 或 Z</td>
</tr>
<tr>
<td align="center">ZZ</td>
<td align="center">+0800</td>
<td align="center">从 UTC 偏移为 +-HH:mm、+-HHmm 或 Z</td>
</tr>
</tbody></table>
<h3 id="格式化案例"><a href="#格式化案例" class="headerlink" title="格式化案例"></a>格式化案例</h3><ol>
<li><p>当前时间格式化为年月日，YYYY-MM-DD， 如 2020-06-04</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moment().format(<span class="string">'YYYY-MM-DD'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>年月日时分秒，YYYY-MM-DD HH:mm:ss</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>年月日星期，YYYY-MM-DD dddd</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moment.locale(<span class="string">'zh-cn'</span>)</span><br><span class="line">moment().format(<span class="string">'YYYY-MM-DD dddd'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回一个包含年月日时分秒毫秒的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeObj = moment().toObject()</span><br><span class="line"><span class="built_in">console</span>.log(timeObj)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><p>这里默认调取的是本地时间，不传参数即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moment() = moment(new Date())</span></span><br><span class="line">moment()</span><br></pre></td></tr></table></figure>

<h3 id="获取指定的某天"><a href="#获取指定的某天" class="headerlink" title="获取指定的某天"></a>获取指定的某天</h3><ol>
<li><p>本周的第一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> weekFirstDay = moment().startOf(<span class="string">'week'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'本周的第一天'</span>, weekFirstDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>本周的最后一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> weekLastDay = moment().endOf(<span class="string">'week'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'本周的最后一天'</span>, weekLastDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>本月的第一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> monthFirstDay = moment().startOf(<span class="string">'week'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'本周的第一天'</span>, weekFirstDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>本月的最后一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> monthLastDay = moment().endOf(<span class="string">'month'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'本月的最后一天'</span>, monthLastDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>上个月的第一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> prevMonthFirstDay = moment().subtract(<span class="number">1</span>, <span class="string">'months'</span>).startOf(<span class="string">'month'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'上个月的第一天'</span>, prevMonthFirstDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>下个月的最后一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nextMonthLastDay = moment().add(<span class="number">1</span>, <span class="string">'months'</span>).endOf(<span class="string">'month'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'下个月的最后一天'</span>, nextMonthLastDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>某年某月的第一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someDayFirstDay = moment(<span class="string">'2016-09-12'</span>).startOf(<span class="string">'month'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'某年某月月的第一天'</span>, someDayFirstDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>某年某月的最后一天</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someDayLastDay = moment(<span class="string">'2016-09-12'</span>).endOf(<span class="string">'month'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'某年某月月的最后一天'</span>, someDayLastDay.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>7天前的日期</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> DaysBefore7 = moment().subtract(<span class="number">7</span>, <span class="string">'days'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'7天前'</span>, DaysBefore7.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>30天后的日期</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> DaysAfter30 = moment().add(<span class="number">30</span>, <span class="string">'days'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'30天后'</span>, DaysAfter30.format(<span class="string">'YYYY-MM-DD'</span>))</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="获取时间间距"><a href="#获取时间间距" class="headerlink" title="获取时间间距"></a>获取时间间距</h3><ol>
<li><p>某天距离当前相隔时间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">'2020-06-04 16:05:32'</span></span><br><span class="line"><span class="comment">// 当前时间为 2020-06-05 09:42</span></span><br><span class="line"><span class="built_in">console</span>.log(moment(date).fromNow()) <span class="comment">// 18 小时前</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">'2019-06-06 06:05:32'</span></span><br><span class="line"><span class="comment">// 当前时间为 2020-06-05 09:42</span></span><br><span class="line"><span class="built_in">console</span>.log(moment(date).fromNow()) <span class="comment">// 1 年前</span></span><br><span class="line"><span class="built_in">console</span>.log(moment(date).fromNow(<span class="literal">true</span>)) <span class="comment">// 1 年</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日期A与日期B相隔天数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateA = <span class="string">'2020-06-04 16:05:32'</span></span><br><span class="line"><span class="keyword">var</span> dateB = <span class="string">'2019-06-06 06:05:32'</span></span><br><span class="line"><span class="keyword">var</span> a = moment(dateA)</span><br><span class="line"><span class="keyword">var</span> b = moment(dateB)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'时间A距离时间B的间隔'</span>, a.from(b)) <span class="comment">// 1 年后</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'时间A距离时间B的间隔'</span>, a.from(b, <span class="literal">true</span>)) <span class="comment">// 1 年</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ol>
<li><p>时间A是否在时间B之前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="string">'2019-06-05'</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="string">'2020/02/09'</span></span><br><span class="line"><span class="built_in">console</span>.log(moment(a1).isBefore(b1))</span><br></pre></td></tr></table></figure>
</li>
<li><p>时间A是和时间B是同一年</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a2 = <span class="string">'2020-06-05'</span></span><br><span class="line"><span class="keyword">var</span> b2 = <span class="string">'2020/02/09'</span></span><br><span class="line"><span class="built_in">console</span>.log(moment(a1).isSame(b1, <span class="string">'year'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询变量是否为moment对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a3 = moment(<span class="string">'2015-05-15'</span>)</span><br><span class="line"><span class="keyword">var</span> b3 = <span class="string">'2015-05-15'</span></span><br><span class="line"><span class="built_in">console</span>.log(moment.isMoment(a3), moment.isMoment(b3))</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询变量是否为原生 js Date 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2015-05-15'</span>)</span><br><span class="line"><span class="keyword">var</span> b4 = <span class="string">'2015-05-15'</span></span><br><span class="line"><span class="built_in">console</span>.log(moment.isDate(a4), moment.isDate(b4))</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>参考资料：</p>
</blockquote>
<ol>
<li><p>Github: <a href="https://github.com/moment/moment" target="_blank" rel="noopener">Moment</a></p>
</li>
<li><p><a href="http://momentjs.cn/" target="_blank" rel="noopener">Moment中文网</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Javascript Lib</tag>
        <tag>时间处理</tag>
        <tag>Moment.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 基础</title>
    <url>//frontend/js/javascript/</url>
    <content><![CDATA[<h2 id="运算处理"><a href="#运算处理" class="headerlink" title="运算处理"></a>运算处理</h2><h3 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h3><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h3 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h3><h2 id="操作Dom"><a href="#操作Dom" class="headerlink" title="操作Dom"></a>操作Dom</h2><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><a id="more"></a>

<h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><h3 id="使用-void-0-代替-undefined"><a href="#使用-void-0-代替-undefined" class="headerlink" title="使用 void 0 代替 undefined"></a>使用 <code>void 0</code> 代替 <code>undefined</code></h3><p>这样做的优点：</p>
<ol>
<li><p>避免某些情况下 <code>undefined</code> 被重写：局部作用域 或 低版本IE等情况。</p>
</li>
<li><p><code>void 0</code> 能减少字节</p>
</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-逻辑运算符-amp-amp-、-和-位运算符-amp-、"><a href="#1-逻辑运算符-amp-amp-、-和-位运算符-amp-、" class="headerlink" title="1. 逻辑运算符 &amp;&amp;、|| 和 位运算符 &amp;、|"></a>1. 逻辑运算符 &amp;&amp;、|| 和 位运算符 &amp;、|</h3><p>逻辑运算符：</p>
<p><code>||</code>（或者）:</p>
<p>只要<code>||</code>前面为 false，不管<code>||</code>后面是 true 还是 false，都返回<code>||</code>后面的值。<br>只要<code>||</code>前面为 true，不管<code>||</code>后面是 true 还是 false，都返回<code>||</code>前面的值。</p>
<p>即：真前假后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(a || b) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(c || d) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p><code>&amp;&amp;</code>（并且）:</p>
<p>只要<code>&amp;&amp;</code>前面是 false，无论<code>&amp;&amp;</code>后面是 true 还是 false，结果都将返<code>&amp;&amp;</code>前面的值。<br>只要<code>&amp;&amp;</code>前面是 true，无论<code>&amp;&amp;</code>后面是 true 还是 false，结果都将返<code>&amp;&amp;</code>后面的值。</p>
<p>即：假前真后</p>
<p>位运算符:</p>
<blockquote>
<p>位运算就是直接对整数在内存中的二进制位进行操作。二进制的最末位为 0 表示该数为偶数，最末位为 1 表示该数为奇数。</p>
</blockquote>
<p><code>|</code>（或者）:</p>
<p>两个位只要有一个为 1，那么结果都为 1。否则就为 0。</p>
<p>即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">31</span> | <span class="number">2</span>) <span class="comment">// 31</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'31的二进制为'</span>, (<span class="number">31</span>).toString(<span class="number">2</span>)) <span class="comment">// 11111</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2的二进制为'</span>, (<span class="number">2</span>).toString(<span class="number">2</span>)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p><code>&amp;</code>（并且）:</p>
<p>两个数值的个位分别相与，同时为 1 才得 1，只要一个为 0 就为 0。</p>
<p>即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">31</span> &amp; <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'31的二进制为'</span>, (<span class="number">31</span>).toString(<span class="number">2</span>)) <span class="comment">// 11111</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2的二进制为'</span>, (<span class="number">2</span>).toString(<span class="number">2</span>)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动 Web 开发问题和优化小结</title>
    <url>//frontend/flow/h5-wap/</url>
    <content><![CDATA[<h2 id="Meta-标签"><a href="#Meta-标签" class="headerlink" title="Meta 标签"></a>Meta 标签</h2><a id="more"></a>

<h3 id="禁止缩放页面"><a href="#禁止缩放页面" class="headerlink" title="禁止缩放页面"></a>禁止缩放页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="禁止-ios-上自动识别电话"><a href="#禁止-ios-上自动识别电话" class="headerlink" title="禁止 ios 上自动识别电话"></a>禁止 ios 上自动识别电话</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="禁止-android-上自动识别邮箱"><a href="#禁止-android-上自动识别邮箱" class="headerlink" title="禁止 android 上自动识别邮箱"></a>禁止 android 上自动识别邮箱</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="原生交互"><a href="#原生交互" class="headerlink" title="原生交互"></a>原生交互</h2><h3 id="打电话发短信"><a href="#打电话发短信" class="headerlink" title="打电话发短信"></a>打电话发短信</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:10086"</span>&gt;</span>打电话给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086"</span>&gt;</span>发短信给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="css-动画开启硬件加速"><a href="#css-动画开启硬件加速" class="headerlink" title="css 动画开启硬件加速"></a>css 动画开启硬件加速</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.translate3d</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>CSS3 动画或者过渡尽量使用 transform 和 opacity 来实现动画，不要使用 left 和 top。</p>
</li>
<li><p>动画和过渡能用 css3 解决的，就不要使用 js。</p>
</li>
</ol>
<h3 id="click-事件延迟响应"><a href="#click-事件延迟响应" class="headerlink" title="click 事件延迟响应"></a>click 事件延迟响应</h3><p>封装 <code>tap</code> 事件来代替 <code>click</code>。</p>
<p><code>tap</code> 事件由 <code>touchstart</code> 事件 + <code>touchmove</code>（判断是否是滑动事件）+ <code>touchend</code> 事件封装组成。</p>
<h3 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h3><ol>
<li>base64 编码图片替换 url 图片</li>
</ol>
<p>例如一些小图标（8k 以内）转换成 base64，以减少 http 请求。</p>
<ol start="2">
<li><p>图片压缩</p>
</li>
<li><p>图片懒加载</p>
</li>
</ol>
<p>非首屏的图片，在页面滚到到相应位置时，才加载。</p>
<ol start="4">
<li><p>img 还是 background</p>
<p>_img_：html 中的标签 img 是网页结构的一部分会在加载结构的过程中和其他标签一起加载。</p>
<p>_background_：以 css 背景图存在的图片 background 会等到结构加载完成（网页的内容全部显示以后）才开始加载</p>
<p>根据具体情况选用。</p>
</li>
</ol>
<h3 id="IOS-兼容问题"><a href="#IOS-兼容问题" class="headerlink" title="IOS 兼容问题"></a>IOS 兼容问题</h3><h4 id="局部滚动"><a href="#局部滚动" class="headerlink" title="局部滚动"></a>局部滚动</h4><p>IOS 在局部滚动时会产生卡顿，加上以下代码即可解决。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scroll</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>ios 下 fixed 元素容易定位出错，软键盘弹出时，影响 fixed 元素定位，会发生元素错位（滚动一下又恢复），有时候会出现闪屏的效果。</p>
<p>使用 <code>absolute</code> 代替 <code>fixed</code>。</p>
<h4 id="input-去掉触摸高亮"><a href="#input-去掉触摸高亮" class="headerlink" title="input 去掉触摸高亮"></a>input 去掉触摸高亮</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="input-去掉默认样式"><a href="#input-去掉默认样式" class="headerlink" title="input 去掉默认样式"></a>input 去掉默认样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="android-兼容"><a href="#android-兼容" class="headerlink" title="android 兼容"></a>android 兼容</h3><h4 id="圆角失效"><a href="#圆角失效" class="headerlink" title="圆角失效"></a>圆角失效</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部上下滑动时，页面不滑动"><a href="#局部上下滑动时，页面不滑动" class="headerlink" title="局部上下滑动时，页面不滑动"></a>局部上下滑动时，页面不滑动</h3><ol>
<li><p>body 加上 css <code>touch-action: none;</code></p>
</li>
<li><p>touchstart 的时候 <code>event.preventDefault();</code> 阻止默认事件</p>
</li>
</ol>
<h3 id="刘海屏-异型屏"><a href="#刘海屏-异型屏" class="headerlink" title="刘海屏/异型屏"></a>刘海屏/异型屏</h3><p>to do …</p>
<h3 id="背景图模糊"><a href="#背景图模糊" class="headerlink" title="背景图模糊"></a>背景图模糊</h3><p>手机分辨率过高的原因。</p>
<p>根据不同的分辨率显示不同清晰度的图片。</p>
<h3 id="旋转屏幕时，字体大小调整的问题"><a href="#旋转屏幕时，字体大小调整的问题" class="headerlink" title="旋转屏幕时，字体大小调整的问题"></a>旋转屏幕时，字体大小调整的问题</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 基础</title>
    <url>//frontend/frame/angular/</url>
    <content><![CDATA[<p>Angular，简称 ng 。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ol>
<li><p>基础循环</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显示当前是第几个数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list; let i = index"</span>&gt;</span>第&#123;&#123; i &#125;&#125;名：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>类似于 Vue 中的过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;year | date:'yyyy'&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h4 id="angular-内置过滤器"><a href="#angular-内置过滤器" class="headerlink" title="angular 内置过滤器"></a>angular 内置过滤器</h4><p>具体参数查阅 angular 官方文档 <a href="https://angular.cn/api?type=pipe" target="_blank" rel="noopener">pipe</a></p>
<h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// exponential-strength.pipe.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line">@Pipe(&#123;<span class="attr">name</span>: <span class="string">'exponentialStrength'</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ExponentialStrengthPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  transform(value: number, exponent?: number): number &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(value, <span class="built_in">isNaN</span>(exponent) ? <span class="number">1</span> : exponent);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>在 <em>Angular</em> 中，<code>()</code>是单向数据流，从视图目标到数据源，<code>[()]</code>是双向绑定，原理是 监听子组件内部发射的事件，然后赋值。</p>
<p><strong>特别注意</strong>：双向绑定时，子组件向父组件发射事件，事件名一定要以 <code>xxxChange</code> 这个格式命名，其中 <code>xxx</code> 为父组件中 <code>[()]</code> 里需要双向绑定的参数， 如 <code>listChange</code>。</p>
<p>简单的例子：</p>
<p><em>子组件</em>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"count"</span> <span class="attr">type</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, EventEmitter, Input, OnInit, Output &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-counter'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./counter.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./counter.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CounterComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() count = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@Output</span>() countChange = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  subtract() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="keyword">this</span>.count - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'subtract'</span>, <span class="keyword">this</span>.count);</span><br><span class="line">    <span class="keyword">this</span>.countChange.emit(<span class="keyword">this</span>.count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="keyword">this</span>.count + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'add'</span>, <span class="keyword">this</span>.count);</span><br><span class="line">    <span class="keyword">this</span>.countChange.emit(<span class="keyword">this</span>.count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>父组件</em>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span></span><br><span class="line">      Tab 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-counter</span> [(<span class="attr">count</span>)]=<span class="string">"countValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter-label"</span>&gt;</span>当前统计值：&#123;&#123; countValue &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-tab1'</span>,</span><br><span class="line">  templateUrl: <span class="string">'tab1.page.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'tab1.page.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Tab1Page &#123;</span><br><span class="line"></span><br><span class="line">  countValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ng-cli"><a href="#ng-cli" class="headerlink" title="ng cli"></a>ng cli</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>创建一个新组件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个新组件</span></span><br><span class="line">ng generate component 组件名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或，g 为 generate 的简写</span></span><br><span class="line">ng g component 组件名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或，c 为 component 的简写</span></span><br><span class="line">ng g c 组件名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ng g service 服务名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个简易的模型类(class)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ng g class 类名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成一个新路由(route)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ng generate route 路由名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成一个新指令(directive)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ng generate directive 指令名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成一个新管道(pipe)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ng generate pipe 管道名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建路由配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ng generate module app-routing --flat --module=app</span><br></pre></td></tr></table></figure>

<p>生成的 <code>app-routing.module.ts</code> 和 <code>app-routing.module.spec.ts</code> 是与 <code>app.module.ts</code> 在同一目录下的，也就是都在 <code>src/app</code> 目录下。</p>
</li>
</ol>
<h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><h3 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h3><p>移动端开发 and Ios / Android App 打包</p>
<p>官网：<a href="https://ionicframework.com/docs" target="_blank" rel="noopener">https://ionicframework.com/docs</a></p>
<h3 id="NG-ZORRO"><a href="#NG-ZORRO" class="headerlink" title="NG-ZORRO"></a>NG-ZORRO</h3><p>适合后台管理系统使用</p>
<p>官网：<a href="https://ng.ant.design/docs/introduce/zh" target="_blank" rel="noopener">https://ng.ant.design/docs/introduce/zh</a></p>
<h3 id="在-Angular-中使用-ECharts"><a href="#在-Angular-中使用-ECharts" class="headerlink" title="在 Angular 中使用 ECharts"></a>在 Angular 中使用 ECharts</h3><p>图表工具</p>
<p>官网：<a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">https://echarts.apache.org/zh/index.html</a></p>
<p>使用方法:</p>
<ol>
<li><p>在 index.html 引入 Echarts.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- ECharts --&gt;</span><br><span class="line">&lt;script src=<span class="string">"assets/js/echarts.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 typings.d.ts 定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="keyword">const</span> echarts: any;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的页面初始化数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exCharts = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'Chart'</span>));</span><br><span class="line"><span class="keyword">const</span> option = &#123; </span><br><span class="line">  <span class="comment">//... </span></span><br><span class="line">&#125;</span><br><span class="line">exCharts.setOption(option);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h3><p>适合PC端使用</p>
<p>官网：<a href="https://material.angular.io/" target="_blank" rel="noopener">https://material.angular.io/</a> </p>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>angular 中使用 <code>for...in...</code> 编辑器报错<code>[tslint] for (... in ...) statements must be filtered with an if statement (for in)</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> itemArr) &#123;</span><br><span class="line">  <span class="comment">// 报错[tslint] for (... in ...) statements must be filtered with an if statement (forin)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>改为 <code>for...of...</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(itemArr)) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 富文本编辑器</title>
    <url>//frontend/function/editor/</url>
    <content><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><a href="https://gaofanghuang.github.io/demo/nodus/editor" target="_blank" rel="noopener">查看Demo 富文本编辑器</a></p>
<h3 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h3><p><code>contenteditable</code> 属性规定是否可编辑元素的内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editor-box"</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="document-execCommand"><a href="#document-execCommand" class="headerlink" title="document.execCommand"></a>document.execCommand</h3><p><code>bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)</code></p>
<p>具体参数查询MDN，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand" target="_blank" rel="noopener">document.execCommand</a></p>
<h3 id="Window-getSelection"><a href="#Window-getSelection" class="headerlink" title="Window.getSelection()"></a>Window.getSelection()</h3><p>返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>点击自定义 button, <code>document.execCommand</code> 不起作用</li>
</ol>
<p>给自定义 button 加上样式 <code>user-select: none</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.editor-tool-btn</span> &#123;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><h3 id="Quill"><a href="#Quill" class="headerlink" title="Quill"></a>Quill</h3><p><a href="https://quilljs.com/" target="_blank" rel="noopener">https://quilljs.com/</a></p>
<h3 id="wangEditor"><a href="#wangEditor" class="headerlink" title="wangEditor"></a>wangEditor</h3><p><a href="http://www.wangeditor.com/" target="_blank" rel="noopener">http://www.wangeditor.com/</a></p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
        <tag>富文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript AR</title>
    <url>//frontend/function/ar/</url>
    <content><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>three.js</p>
<p>AR.js</p>
<p>WebRTC</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
        <tag>AR</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 算法</title>
    <url>//frontend/js/algorithm/</url>
    <content><![CDATA[<h2 id="全排列算法"><a href="#全排列算法" class="headerlink" title="全排列算法"></a>全排列算法</h2><h3 id="1-循环"><a href="#1-循环" class="headerlink" title="1. 循环"></a>1. 循环</h3><h3 id="2-交换算法（递归）"><a href="#2-交换算法（递归）" class="headerlink" title="2. 交换算法（递归）"></a>2. 交换算法（递归）</h3><h3 id="3-链接算法（递归）"><a href="#3-链接算法（递归）" class="headerlink" title="3. 链接算法（递归）"></a>3. 链接算法（递归）</h3><h3 id="4-回溯算法（递归）"><a href="#4-回溯算法（递归）" class="headerlink" title="4. 回溯算法（递归）"></a>4. 回溯算法（递归）</h3><h3 id="5-回溯算法（非递归）"><a href="#5-回溯算法（非递归）" class="headerlink" title="5. 回溯算法（非递归）"></a>5. 回溯算法（非递归）</h3><h3 id="6-排序算法（非递归）"><a href="#6-排序算法（非递归）" class="headerlink" title="6. 排序算法（非递归）"></a>6. 排序算法（非递归）</h3><h3 id="7-求模算法（非递归）"><a href="#7-求模算法（非递归）" class="headerlink" title="7. 求模算法（非递归）"></a>7. 求模算法（非递归）</h3><a id="more"></a>

<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><h3 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1. 对称加密"></a>1. 对称加密</h3><p>文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥，这种方法在密码学中叫做对称加密算法。</p>
<p>对称加密算法使用起来简单快捷，密钥较短，且破译困难，除了数据加密标准（DES），另一个对称密钥加密系统是国际数据加密算法（IDEA），它比 DES 的加密性好，而且对计算机功能要求也没有那么高。IDEA 加密标准由 PGP（Pretty Good Privacy）系统使用。</p>
<p><em>优点</em>：对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。</p>
<p><em>缺点</em>：在数据传送前，发送方和接收方必须商定好秘钥，然后双方保存好秘钥。如果一方的秘钥被泄露，那么加密信息也就不安全了。</p>
<p><em>使用场景</em>：本地数据加密、https 通信、网络传输等</p>
<p><em>常见算法</em>：AES、DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6</p>
<h3 id="2-非对称加密"><a href="#2-非对称加密" class="headerlink" title="2. 非对称加密"></a>2. 非对称加密</h3><p>加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。这种新的加密模式被称为“非对称加密算法”。</p>
<p><em>优点</em>：非对称加密与对称加密相比其安全性更好。</p>
<p><em>缺点</em>：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>
<p><em>使用场景</em>：https 会话前期、CA 数字证书、信息加密、登录认证等。</p>
<p><em>常见算法</em>：RSA、ECC（移动设备用）、Diffie-Hellman、ElGamal、DSA（数字签名用）。</p>
<h3 id="3-Hash-算法"><a href="#3-Hash-算法" class="headerlink" title="3. Hash 算法"></a>3. Hash 算法</h3><p>Hash 算法特别的地方在于它是一种单向算法，用户可以通过 Hash 算法对目标信息生成一段特定长度的唯一的 Hash 值，却不能通过这个 Hash 值重新获得目标信息。因此 Hash 算法常用在不可还原的密码存储、信息完整性校验等。</p>
<p><em>优点</em>：不可逆、易计算、特征化。</p>
<p><em>缺点</em>：可能存在散列冲突。</p>
<p><em>使用场景</em>：文件或字符串一致性校验、数字签名、鉴权协议。</p>
<p><em>常见算法</em>：MD2、MD4、MD5、HAVAL、SHA、SHA-1、HMAC、HMAC-MD5、HMAC-SHA1。</p>
<p><strong>总结</strong>：</p>
<ol>
<li><p>对称加密算法不能实现签名，因此签名只能非对称算法。</p>
</li>
<li><p>验证文件或字符一致性用 hash 算法</p>
</li>
<li><p>数据量大用对称加密算法、小则可以用非对称加密，还可以非对称与对称集成，参考 https 请求原理</p>
</li>
<li><p>RSA 建议采用 1024 位的数字，ECC 建议采用 160 位，AES 采用 128 为即可</p>
</li>
</ol>
<h2 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h2><h2 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h2><h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><h3 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h3><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 数据处理</title>
    <url>//frontend/js/data-handle/</url>
    <content><![CDATA[<h2 id="1-对象处理"><a href="#1-对象处理" class="headerlink" title="1. 对象处理"></a>1. 对象处理</h2><h3 id="1-1-深浅拷贝"><a href="#1-1-深浅拷贝" class="headerlink" title="1.1 深浅拷贝"></a>1.1 深浅拷贝</h3><table>
<thead>
<tr>
<th align="center">–</th>
<th align="center">和原数据是否指向同一对象</th>
<th align="center">第一层数据为基本数据类型</th>
<th align="center">原数据中包含子对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">赋值</td>
<td align="center">是</td>
<td align="center">改变会使原数据一同改变</td>
<td align="center">改变会使原数据一同改变</td>
</tr>
<tr>
<td align="center">浅拷贝</td>
<td align="center">否</td>
<td align="center">改变不会使原数据一同改变</td>
<td align="center">改变会使原数据一同改变</td>
</tr>
<tr>
<td align="center">深拷贝</td>
<td align="center">否</td>
<td align="center">改变不会使原数据一同改变</td>
<td align="center">改变不会使原数据一同改变</td>
</tr>
</tbody></table>
<ol>
<li><p>简单实现深拷贝, 此方法只适用于纯 JSON 数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123; <span class="attr">c</span>: <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br><span class="line">a === b; <span class="comment">// false;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6 方法简单实现深拷贝</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> b = [...a];</span><br><span class="line">a === b; <span class="comment">// false;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <em>Lodash.js</em> 库实现深拷贝</p>
<p><code>_.cloneDeep(value)</code></p>
<p>查看<a href="/lib/lodash.js.md">Lodash.js应用总结</a></p>
</li>
<li><p>纯js实现</p>
<p>TO DO…</p>
</li>
</ol>
<h3 id="1-2-是否存在某个属性"><a href="#1-2-是否存在某个属性" class="headerlink" title="1.2 是否存在某个属性"></a>1.2 是否存在某个属性</h3><ol>
<li>使用 <code>in</code> 关键字</li>
</ol>
<p>该方法可以判断对象的自有属性和继承来的属性是否存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o; <span class="comment">// true，自有属性存在</span></span><br><span class="line"><span class="string">"y"</span> <span class="keyword">in</span> o; <span class="comment">// false</span></span><br><span class="line"><span class="string">"toString"</span> <span class="keyword">in</span> o; <span class="comment">// true，是一个继承属性</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用对象的 <code>hasOwnProperty()</code> 方法</li>
</ol>
<p>该方法只能判断自有属性是否存在，对于继承属性会返回 false 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line">o.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// true，自有属性中有x</span></span><br><span class="line">o.hasOwnProperty(<span class="string">"y"</span>); <span class="comment">// false，自有属性中不存在y</span></span><br><span class="line">o.hasOwnProperty(<span class="string">"toString"</span>); <span class="comment">// false，这是一个继承属性，但不是自有属性</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>用 <code>undefined</code> 判断</li>
</ol>
<p>自有属性和继承属性均可判断。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>; <span class="comment">// false</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>该方法存在一个问题，如果属性的值就是 undefined 的话，该方法不能返回想要的结果，如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>; <span class="comment">// false，属性存在，但值是 undefined</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>; <span class="comment">// false</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在条件语句中直接判断</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (o.x) o.x += <span class="number">1</span>; <span class="comment">// 如果 x 是 undefine, null, false, " ", 0 或 NaN,它将保持不变</span></span><br></pre></td></tr></table></figure>

<h2 id="2-数组处理"><a href="#2-数组处理" class="headerlink" title="2. 数组处理"></a>2. 数组处理</h2><h3 id="2-1-去重"><a href="#2-1-去重" class="headerlink" title="2.1 去重"></a>2.1 去重</h3><h3 id="2-2-扁平化"><a href="#2-2-扁平化" class="headerlink" title="2.2 扁平化"></a>2.2 扁平化</h3><h3 id="2-3-替换数组中的某些元素"><a href="#2-3-替换数组中的某些元素" class="headerlink" title="2.3 替换数组中的某些元素"></a>2.3 替换数组中的某些元素</h3><h3 id="2-4-用数据填充数组"><a href="#2-4-用数据填充数组" class="headerlink" title="2.4 用数据填充数组"></a>2.4 用数据填充数组</h3><h3 id="2-5-查找两个数组的交集"><a href="#2-5-查找两个数组的交集" class="headerlink" title="2.5 查找两个数组的交集"></a>2.5 查找两个数组的交集</h3><h2 id="3-字符串处理"><a href="#3-字符串处理" class="headerlink" title="3. 字符串处理"></a>3. 字符串处理</h2><h3 id="3-1-去除空格"><a href="#3-1-去除空格" class="headerlink" title="3.1 去除空格"></a>3.1 去除空格</h3><ol>
<li><p>去除头尾空格</p>
</li>
<li><p>去除内容中的空格</p>
</li>
</ol>
<h3 id="3-2-截取内容"><a href="#3-2-截取内容" class="headerlink" title="3.2 截取内容"></a>3.2 截取内容</h3><ol>
<li><p>取出指定位置的字符串</p>
</li>
<li><p>取出两个字符串中间的字符串</p>
</li>
</ol>
<h3 id="3-3-替换内容"><a href="#3-3-替换内容" class="headerlink" title="3.3 替换内容"></a>3.3 替换内容</h3><ol>
<li>替换指定字符串为另外一个字符串</li>
</ol>
<h2 id="4-数字运算"><a href="#4-数字运算" class="headerlink" title="4. 数字运算"></a>4. 数字运算</h2><h3 id="4-1-加减乘除"><a href="#4-1-加减乘除" class="headerlink" title="4.1 加减乘除"></a>4.1 加减乘除</h3>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 数据</title>
    <url>//frontend/js/data/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数组、字符串的存储原理"><a href="#数组、字符串的存储原理" class="headerlink" title="数组、字符串的存储原理"></a>数组、字符串的存储原理</h3><h2 id="二叉树、栈、队列、哈希表"><a href="#二叉树、栈、队列、哈希表" class="headerlink" title="二叉树、栈、队列、哈希表"></a>二叉树、栈、队列、哈希表</h2><h2 id="图、堆"><a href="#图、堆" class="headerlink" title="图、堆"></a>图、堆</h2><a id="more"></a>

<h2 id="对象处理"><a href="#对象处理" class="headerlink" title="对象处理"></a>对象处理</h2><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><table>
<thead>
<tr>
<th align="center">–</th>
<th align="center">和原数据是否指向同一对象</th>
<th align="center">第一层数据为基本数据类型</th>
<th align="center">原数据中包含子对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">赋值</td>
<td align="center">是</td>
<td align="center">改变会使原数据一同改变</td>
<td align="center">改变会使原数据一同改变</td>
</tr>
<tr>
<td align="center">浅拷贝</td>
<td align="center">否</td>
<td align="center">改变不会使原数据一同改变</td>
<td align="center">改变会使原数据一同改变</td>
</tr>
<tr>
<td align="center">深拷贝</td>
<td align="center">否</td>
<td align="center">改变不会使原数据一同改变</td>
<td align="center">改变不会使原数据一同改变</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123; <span class="attr">c</span>: <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br></pre></td></tr></table></figure>

<h3 id="是否存在某个属性"><a href="#是否存在某个属性" class="headerlink" title="是否存在某个属性"></a>是否存在某个属性</h3><ol>
<li><p>使用 <code>in</code> 关键字</p>
<p>该方法可以判断对象的自有属性和继承来的属性是否存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="string">'x'</span> <span class="keyword">in</span> o <span class="comment">// true，自有属性存在</span></span><br><span class="line"><span class="string">'y'</span> <span class="keyword">in</span> o <span class="comment">// false</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> o <span class="comment">// true，是一个继承属性</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用对象的 <code>hasOwnProperty()</code> 方法</p>
<p>该方法只能判断自有属性是否存在，对于继承属性会返回 false 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line">o.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true，自有属性中有x</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// false，自有属性中不存在y</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false，这是一个继承属性，但不是自有属性</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用 <code>undefined</code> 判断</p>
<p>自有属性和继承属性均可判断。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line">o.x !== <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line">o.y !== <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>该方法存在一个问题，如果属性的值就是 undefined 的话，该方法不能返回想要的结果，如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">o.x !== <span class="literal">undefined</span> <span class="comment">// false，属性存在，但值是 undefined</span></span><br><span class="line">o.y !== <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在条件语句中直接判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (o.x) o.x += <span class="number">1</span> <span class="comment">// 如果 x 是 undefine, null, false, " ", 0 或 NaN,它将保持不变</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="数组处理"><a href="#数组处理" class="headerlink" title="数组处理"></a>数组处理</h2><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p>利用 ES6 中的 <code>set()</code> , 以及 <code>.from()</code> 或 <code>[...arr]</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  <span class="string">'banana'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'watermelon'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'grape'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> fruitsTemp = <span class="keyword">new</span> <span class="built_in">Set</span>(fruits)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'方法一'</span>, <span class="built_in">Array</span>.from(fruitsTemp))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'方法二'</span>, [...fruitsTemp])</span><br></pre></td></tr></table></figure>

<h3 id="扁平化"><a href="#扁平化" class="headerlink" title="扁平化"></a>扁平化</h3><h3 id="替换数组中的某些元素"><a href="#替换数组中的某些元素" class="headerlink" title="替换数组中的某些元素"></a>替换数组中的某些元素</h3><p>利用 <code>.splice(start, 删除的元素个数, 添加的元素)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  <span class="string">'banana'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'watermelon'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'grape'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">]</span><br><span class="line">fruits.splice(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fruits)</span><br></pre></td></tr></table></figure>

<h3 id="用数据填充数组"><a href="#用数据填充数组" class="headerlink" title="用数据填充数组"></a>用数据填充数组</h3><p><code>.fill()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newArray) <span class="comment">// returns ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]</span></span><br></pre></td></tr></table></figure>

<h3 id="查找两个数组的交集"><a href="#查找两个数组的交集" class="headerlink" title="查找两个数组的交集"></a>查找两个数组的交集</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numOne = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">var</span> numTwo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> duplicatedValues = [...new <span class="built_in">Set</span>(numOne)].filter(<span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">  numTwo.includes(item)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(duplicatedValues) <span class="comment">// returns [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h2 id="数字处理"><a href="#数字处理" class="headerlink" title="数字处理"></a>数字处理</h2>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron 基础</title>
    <url>//frontend/app/electron/</url>
    <content><![CDATA[<p>to be continue…</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Mac</tag>
        <tag>Windows</tag>
        <tag>Electron</tag>
        <tag>桌面端</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS 基础</title>
    <url>//frontend/app/ios/</url>
    <content><![CDATA[<p>to be continue…</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>移动端</tag>
        <tag>IOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>//frontend/flow/regular/</url>
    <content><![CDATA[<p>正则表达式的基本组成元素可以分为：<strong>字符</strong>和<strong>元字符</strong>。</p>
<a id="more"></a>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/a/</span></span><br><span class="line"><span class="built_in">console</span>.log(rule.test(<span class="string">'apple'</span>))</span><br></pre></td></tr></table></figure>

<p>正则表达式格式：<code>/rule/type</code></p>
<p><strong>rule</strong>: 正则表达式规则，写在两个<code>/</code>之间。</p>
<p><strong>type</strong>: 修饰符，接受值为：<code>m</code>、<code>i</code>、<code>g</code>，type 可忽略</p>
<ul>
<li><p>m: 多行模式</p>
</li>
<li><p>i: 忽略大小写</p>
</li>
<li><p>g: 全局模式</p>
</li>
</ul>
<h3 id="在-js-中使用正则表达式"><a href="#在-js-中使用正则表达式" class="headerlink" title="在 js 中使用正则表达式"></a>在 js 中使用正则表达式</h3><p><strong>exec()</strong>: 返回值为一个数组，第一项是符合正则的内容，后续每项都对应正则表达式内捕获括号里匹配成功的文本。</p>
<p>如果匹配失败，<code>exec()</code> 方法返回 null，并将 lastIndex 重置为 0 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/quick\s(brown).+?(jumps)/gi</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'The Quick Brown Fox Jumps Over The Lazy Dog'</span></span><br><span class="line"><span class="built_in">console</span>.log(rule.exec(str))</span><br></pre></td></tr></table></figure>

<p><strong>test()</strong>: 检查是否符合正则表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/a/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'apple'</span></span><br><span class="line"><span class="built_in">console</span>.log(rule.test(str))</span><br></pre></td></tr></table></figure>

<p><strong>match()</strong>: 返回匹配正则的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/The/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'The Quick Brown Fox Jumps Over The Lazy Dog'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule))</span><br></pre></td></tr></table></figure>

<p><strong>matchAll()</strong>: 返回匹配正则的所有内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/The/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'The Quick Brown Fox Jumps Over The Lazy Dog'</span></span><br><span class="line"><span class="keyword">const</span> result = [...str.matchAll(rule)]</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">0</span>], result[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p><strong>replace()</strong>: 替换指定内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/a/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'apple'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">'e'</span>))</span><br></pre></td></tr></table></figure>

<p><strong>search()</strong>: 找到匹配正则的内容并返回下标</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'hey JudE'</span></span><br><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/[A-Z]/g</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(rule))</span><br></pre></td></tr></table></figure>

<p><strong>split</strong>: 根据正则分割字符串，并返回数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand '</span></span><br><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/\s*(?:;|$)\s*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(rule))</span><br></pre></td></tr></table></figure>

<h3 id="语义字符"><a href="#语义字符" class="headerlink" title="语义字符"></a>语义字符</h3><p><code>\</code>: 转义符</p>
<p><code>|</code>: 管道符</p>
<h3 id="单个字符"><a href="#单个字符" class="headerlink" title="单个字符"></a>单个字符</h3><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">正则表达式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">换行符</td>
<td align="center">\n</td>
</tr>
<tr>
<td align="center">换页符</td>
<td align="center">\f</td>
</tr>
<tr>
<td align="center">回车符</td>
<td align="center">\r</td>
</tr>
<tr>
<td align="center">空白符</td>
<td align="center">\s</td>
</tr>
<tr>
<td align="center">制表符</td>
<td align="center">\t</td>
</tr>
<tr>
<td align="center">垂直制表符</td>
<td align="center">\v</td>
</tr>
<tr>
<td align="center">回退符</td>
<td align="center">[\b]</td>
</tr>
</tbody></table>
<h3 id="多个字符"><a href="#多个字符" class="headerlink" title="多个字符"></a>多个字符</h3><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">正则表达式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">除了换行符之外的任何字符</td>
<td align="center">.</td>
</tr>
<tr>
<td align="center">单个数字，[0-9]</td>
<td align="center">\d</td>
</tr>
<tr>
<td align="center">除了[0-9]</td>
<td align="center">\D</td>
</tr>
<tr>
<td align="center">包括下划线在内的单个字符，[A-Za-z0-9_]</td>
<td align="center">\w</td>
</tr>
<tr>
<td align="center">非单字字符</td>
<td align="center">\W</td>
</tr>
<tr>
<td align="center">匹配空白字符，包括空格、制表符、换页符和换行符</td>
<td align="center">\s</td>
</tr>
<tr>
<td align="center">匹配非空白字符</td>
<td align="center">\S</td>
</tr>
<tr>
<td align="center">单词边界</td>
<td align="center">\b</td>
</tr>
<tr>
<td align="center">非单词边界</td>
<td align="center">\B</td>
</tr>
</tbody></table>
<h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h3><p><code>[abc]</code> 表示匹配 a、b、c 其中的一个</p>
<h4 id="范围表示法"><a href="#范围表示法" class="headerlink" title="范围表示法"></a>范围表示法</h4><p>用连字符<code>-</code>来省略和简写</p>
<p>例：</p>
<p><code>[1-9]</code>: 表示 1 到 9 的数字，即 <code>[123456789]</code></p>
<p><code>[b-g]</code>: 表示 b 到 g 的字母，即 <code>[bcdefg]</code></p>
<p><code>[a-d3-7]</code>: 表示 a 到 d 的字母，以及 3 到 7 的数字，即 <code>[abcd34567]</code></p>
<p>注意，当我们要匹配 a、-、z 这三者中任意一个字符时，不能写成 <code>[a-z]</code>，可写成以下方式：</p>
<p><code>[-az]</code> 或 <code>[az-]</code> 或 <code>[a\-z]</code></p>
<h4 id="排除字符组"><a href="#排除字符组" class="headerlink" title="排除字符组"></a>排除字符组</h4><p><code>[^abc]</code>: 表示除 a、b、c 之外的任意一个字符。</p>
<h4 id="任意字符"><a href="#任意字符" class="headerlink" title="任意字符"></a>任意字符</h4><p><code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code> 和 <code>[^]</code></p>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p><code>?</code>：匹配 1 个字符或 0 个字符，即 <code>1 || 0</code></p>
<p><code>*</code>：匹配 0 个字符或 无数 个字符，即 <code>&gt;= 0</code></p>
<p><code>+</code>：匹配 1 个以上的字符，即 <code>&gt;= 1</code></p>
<p><code>{x}</code>：x 次</p>
<p><code>{min, max}</code>：介于 min 次到 max 次之间</p>
<p><code>{min, }</code>：至少 min 次</p>
<p><code>{0, max}</code>：至多 max 次</p>
<h3 id="位置边界"><a href="#位置边界" class="headerlink" title="位置边界"></a>位置边界</h3><p>在ES5中，共有6个锚字符：<code>^ $ \b \B (?=p) (?!p)</code></p>
<ol>
<li><p><code>^</code>: 匹配开头，在多行匹配中匹配行开头。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/^|$/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">'#'</span>)); <span class="comment">// #hello#</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>$</code>: 匹配结尾，在多行匹配中匹配行结尾。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/^|$/gm</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"I\nlove\njavascript"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">'#'</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  #I#</span></span><br><span class="line"><span class="comment">  #love#</span></span><br><span class="line"><span class="comment">  #javascript#</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>\b</code>: 单词边界</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/\bcat\b/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`sdcatd cat catsfad`</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(rule)) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>\B</code>: 非单词边界</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/\Bcat\B/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`sdcatd cat catsfad`</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(rule)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>(?=p)</code>: 其中 p 是一个子模式，表示 p 前面的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/(?=f)/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`sdcatd cat catsfad`</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">'#'</span>)); <span class="comment">// sdcatd cat cats#fad</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>(?!p)</code>: 其中 p 是一个子模式，表示 p 反面的位置。即除了 p 前面的所有位置。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/(?!f)/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`sdcatd cat catsfad`</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">'#'</span>)); <span class="comment">// #s#d#c#a#t#d# #c#a#t# #c#a#t#sf#a#d#</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><h3 id="横向模糊匹配"><a href="#横向模糊匹配" class="headerlink" title="横向模糊匹配"></a>横向模糊匹配</h3><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p>
<p>其实现的方式是使用量词。譬如<code>{m,n}</code>，表示连续出现最少 m 次，最多 n 次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/ab&#123;2,5&#125;c/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'abc abbc abbbc abbbbc abbbbbc abbbbbbc'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule)) <span class="comment">// ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span></span><br></pre></td></tr></table></figure>

<h3 id="纵向模糊匹配"><a href="#纵向模糊匹配" class="headerlink" title="纵向模糊匹配"></a>纵向模糊匹配</h3><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/a[123]b/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'a0b a1b a2b a3b a4b'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule)) <span class="comment">// ["a1b", "a2b", "a3b"]</span></span><br></pre></td></tr></table></figure>

<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>即匹配所有的符合项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/\d&#123;2,5&#125;/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"123 1234 12345 123456 1234567 12345678"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule)); <span class="comment">// ["123", "1234", "12345", "12345", "12345", "67", "12345", "678"]</span></span><br></pre></td></tr></table></figure>

<h3 id="惰性匹配"><a href="#惰性匹配" class="headerlink" title="惰性匹配"></a>惰性匹配</h3><p>当匹配项达到最小次数时，不再往下匹配。</p>
<p>在量词后面加个<code>?</code>就能实现惰性匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;m,n&#125;?</span><br><span class="line">&#123;m,&#125;?</span><br><span class="line">??</span><br><span class="line">+?</span><br><span class="line">*?</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"123 1234 12345 123456 1234567 12345678"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule)); <span class="comment">// ["12", "12", "34", "12", "34", "12", "34", "56", "12", "34", "56", "12", "34", "56", "78"]</span></span><br></pre></td></tr></table></figure>

<h3 id="多选分支"><a href="#多选分支" class="headerlink" title="多选分支"></a>多选分支</h3><p>用 <code>|</code>（管道符）分隔，表示其中任何之一。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/good|nice/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"good idea, nice try."</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule)); <span class="comment">// ["good", "nice"]</span></span><br></pre></td></tr></table></figure>

<p>用 <code>|</code> 和 <code>[]</code> 的区别，<code>|</code> 可以表示多个单词的其中之一，<code>[]</code> 只能表示多个字符的其中之一。</p>
<p>注意，多选分子也是有惰性的，当满足 <code>|</code> 的匹配时，就不再往下匹配了。</p>
<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>深度优先搜索算法：其中退到之前的某一步这一过程，我们称为“回溯”。</p>
<p>尝试匹配失败时，接下来的一步通常就是回溯。</p>
<h3 id="没有回溯的匹配"><a href="#没有回溯的匹配" class="headerlink" title="没有回溯的匹配"></a>没有回溯的匹配</h3><h3 id="有回溯的匹配"><a href="#有回溯的匹配" class="headerlink" title="有回溯的匹配"></a>有回溯的匹配</h3><h3 id="常见的回溯形式"><a href="#常见的回溯形式" class="headerlink" title="常见的回溯形式"></a>常见的回溯形式</h3><h2 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h2><h3 id="1-匹配16进制颜色值"><a href="#1-匹配16进制颜色值" class="headerlink" title="1. 匹配16进制颜色值"></a>1. 匹配16进制颜色值</h3><p>表示一个16进制字符，可以用字符组 <code>[0-9a-fA-F]</code>。</p>
<p>其中字符可以出现3或6次，需要是用量词和分支结构。</p>
<p>使用分支结构时，需要注意顺序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"#ffbbad #Fc01DF #FFF #ffE #99"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(rule)); <span class="comment">// ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-匹配24小时制时间"><a href="#2-匹配24小时制时间" class="headerlink" title="2. 匹配24小时制时间"></a>2. 匹配24小时制时间</h3><p>如：“23:05, 09:30”</p>
<p>共4位数字，第一位数字可以为<code>[0-2]</code>。</p>
<p>当第1位为2时，第2位可以为<code>[0-3]</code>，其他情况时，第2位为<code>[0-9]</code>。</p>
<p>第3位数字为<code>[0-5]</code>，第4位为<code>[0-9]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/^(0?[01][0-9]|[2][0-3]):(0?[0-9]|[0-5][0-9])$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rule.test(<span class="string">"22:50"</span>), rule.test(<span class="string">"25:70"</span>), rule.test(<span class="string">"5:7"</span>)); <span class="comment">// true, false, true</span></span><br></pre></td></tr></table></figure>

<h3 id="3-年月日"><a href="#3-年月日" class="headerlink" title="3. 年月日"></a>3. 年月日</h3><h4 id="3-1-检测日期格式"><a href="#3-1-检测日期格式" class="headerlink" title="3.1 检测日期格式"></a>3.1 检测日期格式</h4><p>如：“2020-05-14”</p>
<p>年，四位数字即可，可用[0-9]{4}。</p>
<p>月，共12个月，分两种情况01、02、……、09和10、11、12，可用(0[1-9]|1[0-2])。</p>
<p>日，最大31天，可用(0[1-9]|[12][0-9]|3[01])。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rule.test(<span class="string">"2020-05-14"</span>), rule.test(<span class="string">"2020-13-44"</span>)); <span class="comment">// true, false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-提取日期数值"><a href="#3-2-提取日期数值" class="headerlink" title="3.2 提取日期数值"></a>3.2 提取日期数值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"2020-05-14"</span></span><br><span class="line"><span class="keyword">const</span> result = &#123;</span><br><span class="line">  yyyy: str.match(rule)[<span class="number">1</span>],</span><br><span class="line">  mm: str.match(rule)[<span class="number">2</span>],</span><br><span class="line">  dd: str.match(rule)[<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &#123;yyyy: "2020", mm: "05", dd: "14"&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-转换格式"><a href="#3-3-转换格式" class="headerlink" title="3.3 转换格式"></a>3.3 转换格式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"2020-05-14"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">"$1年$2月$3日"</span>)); <span class="comment">// 2020年05月14日</span></span><br></pre></td></tr></table></figure>


<h3 id="4-数字的千分位分隔符表示法"><a href="#4-数字的千分位分隔符表示法" class="headerlink" title="4. 数字的千分位分隔符表示法"></a>4. 数字的千分位分隔符表示法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/(?!\b)(?=(\d&#123;3&#125;)+\b)/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"489798266114"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(rule, <span class="string">','</span>)); <span class="comment">// 489,798,266,114</span></span><br></pre></td></tr></table></figure>

<h3 id="5-验证密码"><a href="#5-验证密码" class="headerlink" title="5. 验证密码"></a>5. 验证密码</h3><p>要求：密码长度6-12位，由数字、小写字母和大写字母组成，必须至少包括2种字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在实际应用中，需要避免正则过于复杂，可以拆分成几个小的正则，以便阅读</span></span><br><span class="line"><span class="comment">// const regex1 = /^[0-9A-Za-z]&#123;6,12&#125;$/;</span></span><br><span class="line"><span class="comment">// const regex2 = /^[0-9]&#123;6,12&#125;$/;</span></span><br><span class="line"><span class="comment">// const regex3 = /^[A-Z]&#123;6,12&#125;$/;</span></span><br><span class="line"><span class="comment">// const regex4 = /^[a-z]&#123;6,12&#125;$/;</span></span><br><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"66114aaw"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rule.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="6-网址"><a href="#6-网址" class="headerlink" title="6. 网址"></a>6. 网址</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = <span class="regexp">/^([hH][tT]&#123;2&#125;[pP]:\/\/|[hH][tT]&#123;2&#125;[pP][sS]:\/\/)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\/])+$/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"http://huanggaofang.com"</span></span><br><span class="line"><span class="built_in">console</span>.log(rule.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 基础</title>
    <url>//frontend/app/android/</url>
    <content><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h2 id="Android-Intent-Action"><a href="#Android-Intent-Action" class="headerlink" title="Android Intent Action"></a>Android Intent Action</h2>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>移动端</tag>
        <tag>Android</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 爬虫</title>
    <url>//frontend/node/reptile/</url>
    <content><![CDATA[<p>to be continue……</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Node</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 基础</title>
    <url>//frontend/node/base/</url>
    <content><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li>查看npm当前镜像源</li>
</ol>
<p><code>npm config get registry</code></p>
<ol start="2">
<li>设置指定镜像源</li>
</ol>
<p><code>npm config set registry https://registry.npmjs.org</code></p>
<h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><p>yarn 大部分命令和 npm 一样。</p>
<p>两者<em>区别</em>：</p>
<ol>
<li>安装所有依赖</li>
</ol>
<p><code>npm install</code></p>
<p><code>yarn</code></p>
<h3 id="常用镜像源"><a href="#常用镜像源" class="headerlink" title="常用镜像源"></a>常用镜像源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm --- https://registry.npmjs.org/</span><br><span class="line">taobao --- https://registry.npm.taobao.org/</span><br><span class="line">cnpm --- https://r.cnpmjs.org/</span><br><span class="line">yarn --- https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h2 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-版本升级"><a href="#1-版本升级" class="headerlink" title="1. 版本升级"></a>1. 版本升级</h3><ol>
<li><p>安装 <code>n</code> 模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure>
</li>
<li><p>升级到稳定版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure>

<p>或升级到指定版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n v14.2.0</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-开机启动服务"><a href="#2-开机启动服务" class="headerlink" title="2. 开机启动服务"></a>2. 开机启动服务</h3><p><strong>windows 环境</strong>:</p>
<ol>
<li><p>安装模块 node-windows</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install node-windows --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录创建 nw.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Service = <span class="built_in">require</span>(<span class="string">'node-windows'</span>).Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> svc = <span class="keyword">new</span> Service(&#123;</span><br><span class="line">  name: <span class="string">'node_test'</span>,    <span class="comment">//服务名称</span></span><br><span class="line">  description: <span class="string">'测试项目服务器'</span>, <span class="comment">//描述</span></span><br><span class="line">  script: <span class="string">'D:/testproject2017/test/bin/www'</span> <span class="comment">//nodejs项目要启动的文件路径</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svc.on(<span class="string">'install'</span>, () =&gt; &#123;</span><br><span class="line">  svc.start();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svc.install();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录运行 nw.js 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node nw.js</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Node</tag>
        <tag>Express</tag>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title>关于后台管理系统小结</title>
    <url>//frontend/summary/admin/</url>
    <content><![CDATA[<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="前端渲染-Ajax"><a href="#前端渲染-Ajax" class="headerlink" title="前端渲染+Ajax"></a>前端渲染+Ajax</h3><p>前后端分离的方式构建的后台管理系统。</p>
<h3 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h3><p>前后端不分离，后端直出html的后台管理系统。</p>
<h2 id="常用库和插件"><a href="#常用库和插件" class="headerlink" title="常用库和插件"></a>常用库和插件</h2><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><h3 id="时间日期选择器"><a href="#时间日期选择器" class="headerlink" title="时间日期选择器"></a>时间日期选择器</h3><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><h3 id="弹框"><a href="#弹框" class="headerlink" title="弹框"></a>弹框</h3><h3 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h3><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><h3 id="权限控制处理"><a href="#权限控制处理" class="headerlink" title="权限控制处理"></a>权限控制处理</h3><h3 id="xss过滤"><a href="#xss过滤" class="headerlink" title="xss过滤"></a>xss过滤</h3><h3 id="登录加密"><a href="#登录加密" class="headerlink" title="登录加密"></a>登录加密</h3><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><h4 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h4><h4 id="HMAC算法"><a href="#HMAC算法" class="headerlink" title="HMAC算法"></a>HMAC算法</h4><h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ol>
<li><p>错误提示</p>
</li>
<li><p><code>try...catch...</code></p>
</li>
</ol>
<h3 id="交互提示"><a href="#交互提示" class="headerlink" title="交互提示"></a>交互提示</h3><p>loading、提交成功、提交失败的提示</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
      </tags>
  </entry>
  <entry>
    <title>关于微信生态开发的总结</title>
    <url>//frontend/wechat/ecology/</url>
    <content><![CDATA[<h2 id="帐号注册"><a href="#帐号注册" class="headerlink" title="帐号注册"></a>帐号注册</h2><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 布局</title>
    <url>//frontend/base/css/</url>
    <content><![CDATA[<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="1-单列布局"><a href="#1-单列布局" class="headerlink" title="1. 单列布局"></a>1. 单列布局</h3><h3 id="2-两列自适应布局"><a href="#2-两列自适应布局" class="headerlink" title="2. 两列自适应布局"></a>2. 两列自适应布局</h3><h3 id="3-三栏布局"><a href="#3-三栏布局" class="headerlink" title="3. 三栏布局"></a>3. 三栏布局</h3><h3 id="4-粘连布局"><a href="#4-粘连布局" class="headerlink" title="4. 粘连布局"></a>4. 粘连布局</h3><h3 id="5-等高布局"><a href="#5-等高布局" class="headerlink" title="5. 等高布局"></a>5. 等高布局</h3><a id="more"></a>

<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><!-- 垂直居中 -->
<!-- 水平居中 -->

<h3 id="浮动-Float"><a href="#浮动-Float" class="headerlink" title="浮动 Float"></a>浮动 Float</h3><h3 id="表格-Table"><a href="#表格-Table" class="headerlink" title="表格 Table"></a>表格 Table</h3><h3 id="display-table"><a href="#display-table" class="headerlink" title="display: table"></a>display: table</h3><h3 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex"></a>display: flex</h3><p>查看<a href="/css/flex.md">Flex 和 grid 布局详解</a></p>
<h3 id="display-gird"><a href="#display-gird" class="headerlink" title="display: gird"></a>display: gird</h3><p>查看<a href="/css/flex.md">Flex 和 grid 布局详解</a></p>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 进阶 - 纯 CSS 绘图</title>
    <url>//frontend/base/css-draw/</url>
    <content><![CDATA[<p><a href="https://gaofanghuang.github.io/demo/api/css/demo1" target="_blank" rel="noopener">查看DEMO 纯css绘制图形</a></p>
<p>当我们需要三角形、圆形、半圆等简单图形时，用 css 直接绘制会比加载图片更好，通常可以使用 border 属性方法来绘制，目前主流的浏览器还可以使用 clip-path 属性来绘制图形。</p>
<p>如果不需要过多考虑浏览器兼容问题的话，使用 clip-path 更好。</p>
<a id="more"></a>

<h2 id="border-方法"><a href="#border-方法" class="headerlink" title="border 方法"></a>border 方法</h2><p>border 方法主要使用 border + transform 两个方法结合完成绘图。</p>
<h3 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h3><p><strong>原理:</strong></p>
<p>当 width、height 等于 0 时，border 四边会被挤压成四个三角形。因此当设置其中三个边的 border-color 的颜色为透明时，剩下一个边的颜色设置为我们需要的值，即可显示出一个三角形，且三角形指向为这个边的反向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* bottom 颜色不为透明时，bottom 的反向为 top，即这个三角形指向 top */</span></span><br><span class="line"><span class="comment">/* border-width = 10 表示 绘制出的这个三角形为 等边三角形，边长为20，高为10 */</span></span><br><span class="line"><span class="comment">/* 通过控制不同边的 border-width, 我们可以绘制出任意角度的三角形 */</span></span><br><span class="line"><span class="selector-class">.arrow-up</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: tomato;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绘制常见图形"><a href="#绘制常见图形" class="headerlink" title="绘制常见图形"></a>绘制常见图形</h3><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rectangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid tomato;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绘制扇形"><a href="#绘制扇形" class="headerlink" title="绘制扇形"></a>绘制扇形</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sector</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绘制椭圆"><a href="#绘制椭圆" class="headerlink" title="绘制椭圆"></a>绘制椭圆</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipse</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span> / <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="clip-path-方法"><a href="#clip-path-方法" class="headerlink" title="clip-path 方法"></a>clip-path 方法</h2><p>clip-path 可以创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的隐藏。剪切区域是被引用内嵌的 URL 定义的路径或者外部 svg 的路径，或者作为一个形状例如 circle()。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">none</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;clip-source&gt; values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">url</span>(<span class="selector-tag">resources</span><span class="selector-class">.svg</span><span class="selector-id">#c1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;geometry-box&gt; values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">margin-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">padding-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">fill-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">stroke-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">view-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;basic-shape&gt; values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">inset</span>(100<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">circle</span>(50<span class="selector-tag">px</span> <span class="selector-tag">at</span> 0 100<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 100% 50%, 50% 100%, 0% 50%);</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">path</span>(</span><br><span class="line">  'M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z'</span><br><span class="line">);</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">ellipse</span>(30% 20% <span class="selector-tag">at</span> 50% 50%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Box and shape values combined */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">padding-box</span> <span class="selector-tag">circle</span>(50<span class="selector-tag">px</span> <span class="selector-tag">at</span> 0 100<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>

<h3 id="绘制三角形-1"><a href="#绘制三角形-1" class="headerlink" title="绘制三角形"></a>绘制三角形</h3><p><strong>原理:</strong></p>
<p>利用 clip-path 属性的<code>polygon</code>函数，传入一组点的坐标，每个点用逗号隔开，点用 x y 分别表示 x轴 和 y轴 的位置。把这三个点用传入的顺序连接，连接区域内的图形显示，链接区域外的图形隐藏，即显示出了三角形。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* width = 20 height = 10 即宽为 20 高为 10 的矩形 */</span></span><br><span class="line"><span class="comment">/* polygon 里传入了三个点的坐标分别是矩形的 左下点（0 100%,）、中上点（50% 0）、 右下点（100% 100%）*/</span></span><br><span class="line"><span class="comment">/* 即 (x1 y1, x2 y2, x3 y3) */</span></span><br><span class="line"><span class="selector-class">.arrow-up</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">100%</span>, <span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绘制常见图形-1"><a href="#绘制常见图形-1" class="headerlink" title="绘制常见图形"></a>绘制常见图形</h3><h4 id="绘制矩形-1"><a href="#绘制矩形-1" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rectangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绘制圆形-1"><a href="#绘制圆形-1" class="headerlink" title="绘制圆形"></a>绘制圆形</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绘制扇形-1"><a href="#绘制扇形-1" class="headerlink" title="绘制扇形"></a>绘制扇形</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方法一 */</span></span><br><span class="line"><span class="selector-class">.sector</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> round <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 方法二 */</span></span><br><span class="line"><span class="selector-class">.sector2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="comment">/* at 后面可以指定圆心的xy坐标, 可忽略，默认为 50% 50% */</span></span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">20px</span> at <span class="number">100%</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绘制椭圆-1"><a href="#绘制椭圆-1" class="headerlink" title="绘制椭圆"></a>绘制椭圆</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipse</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(<span class="number">20px</span> <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="clip-path-应用"><a href="#clip-path-应用" class="headerlink" title="clip-path 应用"></a>clip-path 应用</h2><p>除了绘制简单图形，还可以使用clip-path制作变形动画，得到更自然的过渡效果。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/css/demo2" target="_blank" rel="noopener">查看DEMO clip-path 动画</a></p>
<h3 id="变形动画"><a href="#变形动画" class="headerlink" title="变形动画"></a>变形动画</h3><p>使用 polygon 制作变形动画需要注意，变形开始和结束的点，数量需要一致，点之间的坐标是可以重复的。</p>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> animation3 &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0%</span>, <span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">100%</span> <span class="number">80%</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>, <span class="number">0</span> <span class="number">38%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0%</span>, <span class="number">63%</span> <span class="number">38%</span>, <span class="number">100%</span> <span class="number">38%</span>, <span class="number">69%</span> <span class="number">59%</span>, <span class="number">82%</span> <span class="number">100%</span>, <span class="number">50%</span> <span class="number">75%</span>, <span class="number">18%</span> <span class="number">100%</span>, <span class="number">31%</span> <span class="number">59%</span>, <span class="number">0</span> <span class="number">38%</span>, <span class="number">37%</span> <span class="number">38%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>绘图</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础 - 函数</title>
    <url>//frontend/base/css-function/</url>
    <content><![CDATA[<p>简单来说，在 CSS 中只要是带有 () 的属性值，我们就可以把它称为 CSS 函数。</p>
<a id="more"></a>

<h2 id="1-属性函数"><a href="#1-属性函数" class="headerlink" title="1. 属性函数"></a>1. 属性函数</h2><ul>
<li><p><strong>attr()</strong></p>
<p>attr 可以读取 html 标签中的属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips"</span> <span class="attr">data-tips</span>=<span class="string">"something is error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tips</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-tips);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-背景图片函数"><a href="#2-背景图片函数" class="headerlink" title="2. 背景图片函数"></a>2. 背景图片函数</h2><ul>
<li><p><strong>linear-gradient()</strong></p>
<p><code>linear-gradient([ [ [ &lt;angle&gt; | to [top | bottom] || [left | right] ],]? &lt;color-stop&gt;[, &lt;color-stop&gt;]+)</code></p>
<p>创建线性渐变。</p>
<style>
.linear-gradient {
  width: 200px;
  height: 40px;
  margin-bottom: 10px;
}
.linear-gradient-1 {
  background: linear-gradient(90deg, #28C5C2, #79E2B7);
}
.linear-gradient-2 {
  background: linear-gradient(180deg, #28C5C2, #79E2B7);
}
.linear-gradient-3 {
  background: linear-gradient(45deg, #28C5C2 25%, hsl(45, 100%, 55%) 0, hsl(45, 100%, 55%) 50%, #28C5C2 0, #28C5C2 75%, hsl(45, 100%, 55%) 0);
  background-size: 10px 10px;
}
</style>

<div class="linear-gradient linear-gradient-1"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从左到右的渐变 */</span></span><br><span class="line"><span class="selector-class">.linear-gradient-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, #<span class="number">28</span>c5c2, #<span class="number">79</span>e2b7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="linear-gradient linear-gradient-2"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从上到下的渐变 */</span></span><br><span class="line"><span class="selector-class">.linear-gradient-2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, #<span class="number">28</span>c5c2, #<span class="number">79</span>e2b7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="linear-gradient linear-gradient-3"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 斜条纹 */</span></span><br><span class="line"><span class="selector-class">.linear-gradient-3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    #<span class="number">28</span>c5c2 <span class="number">25%</span>,</span><br><span class="line">    hsl(<span class="number">45</span>, <span class="number">100%</span>, <span class="number">55%</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">hsl</span>(<span class="number">45</span>, <span class="number">100%</span>, <span class="number">55%</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="number">#28c5c2</span> <span class="number">0</span>,</span><br><span class="line">    <span class="number">#28c5c2</span> <span class="number">75%</span>,</span><br><span class="line">    <span class="built_in">hsl</span>(<span class="number">45</span>, <span class="number">100%</span>, <span class="number">55%</span>) <span class="number">0</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>radial-gradient()</strong></p>
<p>创建径向渐变</p>
<style>
.radial-gradient {
  width: 100px;
  height: 100px;
  margin-bottom: 20px;
}
.radial-gradient-1 {
  background: radial-gradient(#e4309e, #8347ff);
}
.radial-gradient-2 {
  background: radial-gradient(#e4309e 0%, #70b6f3 40%, #8347ff 60%);
}
.radial-gradient-3 {
  background: radial-gradient(at 110% 100%, #e4309e, #8347ff);
}
.radial-gradient-4 {
  background: radial-gradient(20% 20%, #e4309e, #8347ff);
}
</style>

<div class="radial-gradient radial-gradient-1"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 径向渐变 */</span></span><br><span class="line"><span class="selector-class">.radial-gradient-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(#e4309e, #<span class="number">8347</span>ff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="radial-gradient radial-gradient-2"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多色渐变 */</span></span><br><span class="line"><span class="selector-class">.radial-gradient-2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(#e4309e <span class="number">0%</span>, #<span class="number">70</span>b6f3 <span class="number">40%</span>, #<span class="number">8347</span>ff <span class="number">60%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="radial-gradient radial-gradient-3"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 指定圆心位置 */</span></span><br><span class="line"><span class="selector-class">.radial-gradient-3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">110%</span> <span class="number">100%</span>, #e4309e, #<span class="number">8347</span>ff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="radial-gradient radial-gradient-4"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 指定圆的大小 */</span></span><br><span class="line"><span class="selector-class">.radial-gradient-4</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">20%</span> <span class="number">20%</span>, #e4309e, #<span class="number">8347</span>ff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>conic-gradient()</strong></p>
<p>创建锥形渐变</p>
<style>
  .conic-gradient {
    width: 100px;
    height: 100px;
    margin-bottom: 20px;
  }
  .conic-gradient-1 {
    border-radius: 50%;
    background: conic-gradient(red, orange, yellow, green, teal, blue, purple, red);
  }
  .conic-gradient-2 {
    border-radius: 50%;
    background: conic-gradient(lightblue 0, lightblue 30%, skyblue 30%, skyblue 70%, deepskyblue 70%, deepskyblue 100%);
  }
</style>

<div class="conic-gradient conic-gradient-1"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 色环 */</span></span><br><span class="line"><span class="selector-class">.conic-gradient-1</span> &#123;</span><br><span class="line">  <span class="comment">/* 这里开始和结束用同一个颜色，否则头尾的颜色衔接会不自然 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">conic-gradient</span>(</span><br><span class="line">    red,</span><br><span class="line">    orange,</span><br><span class="line">    yellow,</span><br><span class="line">    green,</span><br><span class="line">    teal,</span><br><span class="line">    blue,</span><br><span class="line">    purple,</span><br><span class="line">    red</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="conic-gradient conic-gradient-2"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 饼图 */</span></span><br><span class="line"><span class="selector-class">.conic-gradient-2</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="comment">/* 这里可以指定每个颜色所占比例 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">conic-gradient</span>(</span><br><span class="line">    lightblue <span class="number">0</span>,</span><br><span class="line">    lightblue <span class="number">30%</span>,</span><br><span class="line">    skyblue <span class="number">30%</span>,</span><br><span class="line">    skyblue <span class="number">70%</span>,</span><br><span class="line">    deepskyblue <span class="number">70%</span>,</span><br><span class="line">    deepskyblue <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<style>
.repeating-linear-gradient {
  width: 200px;
  height: 40px;
  margin-bottom: 20px;
}
.repeating-linear-gradient-1 {
  background: repeating-linear-gradient(45deg, lightblue 5%, deepskyblue 10%);
}
.repeating-radial-gradient-1 {
  background: repeating-radial-gradient(circle at center, lightblue 0, skyblue, deepskyblue 30px);
}
.repeating-conic-gradient-1 {
  background: repeating-conic-gradient(red, orange, yellow, green, blue 50%);
}
</style>
</li>
</ul>
<ul>
<li><p><strong>repeating-linear-gradient()</strong></p>
<p>自动重复的线性渐变。</p>
<div class="repeating-linear-gradient repeating-linear-gradient-1"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.repeating-linear-gradient-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(<span class="number">45deg</span>, lightblue <span class="number">5%</span>, deepskyblue <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>repeating-radial-gradient()</strong></p>
<p>自动重复的径向渐变。</p>
<div class="repeating-linear-gradient repeating-radial-gradient-1"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.repeating-radial-gradient-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(</span><br><span class="line">    circle at center,</span><br><span class="line">    lightblue <span class="number">0</span>,</span><br><span class="line">    skyblue,</span><br><span class="line">    deepskyblue <span class="number">30px</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>repeating-conic-gradient()</strong></p>
<p>自动重复的锥形渐变。</p>
<div class="repeating-linear-gradient repeating-conic-gradient-1"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.repeating-conic-gradient-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-conic-gradient</span>(red, orange, yellow, green, blue <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>image-set()</strong></p>
<p>根据不同屏幕的像素密度选择不同的图片。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">image-set</span>(</span><br><span class="line">    <span class="string">'cat.png'</span> <span class="number">1</span>x,</span><br><span class="line">    <span class="string">'cat-2x.png'</span> <span class="number">2</span>x,</span><br><span class="line">    <span class="string">'cat-print.png'</span> <span class="number">600dpi</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>url()</strong></p>
<p>加载一个资源（如 jpg, svg 等）作为背景图片。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'http://xxx.com/banner.jpg'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>image()</strong></p>
<p>类似于 <code>url()</code> 函数，增加了指定图像方向性、指定显示区域的图片，指定固定颜色作为图片失效的时的背景色等功能。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">image</span>(<span class="string">'logo.png#xywh=0,20,40,60'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-颜色函数"><a href="#3-颜色函数" class="headerlink" title="3. 颜色函数"></a>3. 颜色函数</h2><ul>
<li><p><strong>rgb()</strong></p>
<p><code>rgba(r, g, b)</code></p>
<p>使用红(R)、绿(G)、蓝(B)三个颜色的叠加来生成各式各样的颜色。</p>
<p>红色（R）0 到 255 间的整数，代表颜色中的红色成分。。<br>绿色（G）0 到 255 间的整数，代表颜色中的绿色成分。<br>蓝色（B）0 到 255 间的整数，代表颜色中的蓝色成分。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.black</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rgba()</strong></p>
<p><code>rgba(r, g, b, a)</code></p>
<p>RGB 同上。<br>透明度（A）取值 <code>0~1</code> 之间， 代表透明度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>hsl()</strong></p>
<p><code>hsl(h, s, l)</code></p>
<p>使用色相(h)、饱和度(s)、亮度(l)来定义颜色。</p>
<div class="conic-gradient conic-gradient-1"></div>

<p>色相取值 <code>0 ~ 359</code> 之间， 即 360° = 0°，意为色环中某个角度的值。<br>饱和度取值 <code>0 ~ 1</code> 之间。<br>亮度取值 <code>0 ~ 1</code> 之间。</p>
</li>
<li><p><strong>hsla()</strong></p>
<p><code>hsl(h, s, l, a)</code></p>
<p>使用色相(h)、饱和度(s)、亮度(l)、透明度(a)来定义颜色。</p>
</li>
<li><p><strong>hwb()</strong></p>
<p><code>hwb(h, w, b)</code></p>
<p>使用色相(h)、明度-白(w)、明度-黑(b)来定义颜色。</p>
<p>色相取值 <code>0 ~ 359</code> 之间， 即 360° = 0°，意为色环中某个角度的值。<br>明度取值 <code>0 ~ 1</code> 之间。</p>
</li>
</ul>
<h2 id="4-图形函数"><a href="#4-图形函数" class="headerlink" title="4. 图形函数"></a>4. 图形函数</h2><ul>
<li><p><strong>circle()</strong></p>
<p>用于定义一个圆形。</p>
<style>
.box-shape {
  width: 100px;
  height: 100px;
  background: deepskyblue;
  margin-bottom: 20px;
}
.box-circle {
  clip-path: circle(50px at 50% 50%);
}
.box-ellipse {
  clip-path: ellipse(50px 30px at 50% 50%)
}
.box-inset {
  clip-path: inset(10% 20% round 5px)
}
.box-polygon {
  clip-path: polygon(0 0, 100% 100%, 0 100%);
}
.box-path {
  clip-path: path('M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z');
}
</style>

<div class="box-shape box-circle"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-circle</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">50px</span> at <span class="number">50%</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ellipse()</strong></p>
<p>用于定义一个椭圆形。</p>
<div class="box-shape box-ellipse"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-ellipse</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(<span class="number">50px</span> <span class="number">30px</span> at <span class="number">50%</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>inset()</strong></p>
<p>定义一个 inset 类型的矩形。</p>
<div class="box-shape box-inset"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-inset</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">10%</span> <span class="number">20%</span> round <span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>polygon()</strong></p>
<p>定义一个多边形。</p>
<div class="box-shape box-polygon"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-polygon</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>path()</strong></p>
<p>把转入的 svg 路径显示为矢量图形</p>
<div class="box-shape box-path"></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-path</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">path</span>(</span><br><span class="line">    <span class="string">'M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z'</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5-滤镜函数"><a href="#5-滤镜函数" class="headerlink" title="5. 滤镜函数"></a>5. 滤镜函数</h2><ul>
<li><p><strong>blur()</strong></p>
<p>应用高斯模糊效果。</p>
<style>
.filter-box {
  width: 100px;
  height: 40px;
  margin-bottom: 20px;
}
.filter-box2 {
  width: 100px;
  height: 100px;
  margin-bottom: 20px;
}
.filter-box2 img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  margin: 0;
}
.filter-blur {
  filter: blur(1px);
}
td .filter-box2 {
  margin-bottom: 0;
  padding: 10px;
}
</style>

<div class="filter-box filter-blur">高斯模糊</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 允许的长度单位：px、vw、rem */</span></span><br><span class="line"><span class="comment">/* 无效的单位：% */</span></span><br><span class="line"><span class="selector-class">.filter-blur</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>brightness()</strong></p>
<p>调整图像的亮度，取值 0 ~ ∞，默认为 1，当为 0 时图像全黑，大于 1 时图象比默认更亮。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">1</th>
<th align="center">1.5</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: brightness(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: brightness(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: brightness(1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: brightness(1.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: brightness(2)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: <code>brightness</code> 没有取值上限，当亮度高到一定程度后，图形全白。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-blur</span> &#123;</span><br><span class="line">  <span class="comment">/* 这里的1.5，也可以用百分比表示如：150% */</span></span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>contrast()</strong></p>
<p>调整图像的对比度，取值 0 ~ ∞，默认为 1，当为 0 时图像全灰，大于 1 时图象对比度更高。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">1</th>
<th align="center">1.5</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: contrast(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: contrast(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: contrast(1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: contrast(1.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: contrast(2)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 对比度高意味着，深色的部分更深，浅色的部分更浅。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-contrast</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">1.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>drop-shadow()</strong></p>
<p>给图像设置一个阴影效果</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">box-shadow</th>
<th align="center">drop-shadow</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="box-shadow: 3px 3px 9px rgba(0,0,0,0.6)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: drop-shadow(3px 3px 9px rgba(0,0,0,0.6))"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 通过上图我们看出，当 div 有边距时，使用<code>box-shadow</code>会出现空白的部分，而<code>drop-shadow</code>是直接作用于内容的，不受内外边距影响。当不考虑浏览器兼容时（不兼容IE），可以使用<code>drop-shadow</code>代替<code>box-shadow</code>，通过滤镜可以使用浏览器提供的硬件加速，获得更好的性能。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-drop-shadow</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">3px</span> <span class="number">3px</span> <span class="number">9px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.6</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>grayscale()</strong></p>
<p>将图像转换为灰度图像，取值 0 ~ 1, 默认0。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: grayscale(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: grayscale(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: grayscale(1)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当值为 1 时，图像变为黑白，可理解为 PhotoShop 中的去色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-grayscale</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>hue-rotate()</strong></p>
<p>调整图像的色相，取值色相角度 0 ~ 359，默认为0，即 360 = 0。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">30deg</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: hue-rotate(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: hue-rotate(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: hue-rotate(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: hue-rotate(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: hue-rotate(180deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当值大于359°时，如 420 °，实际取值为 angle = 420 - 360 = 60</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-hue-rotate</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>invert()</strong></p>
<p>反转输入图像的色相，取值 0 ~ 1, 默认0。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">0.8</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: invert(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: invert(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: invert(0.8)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: invert(1)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当值为 0.5 / 1 时，可理解为 PhotoShop 中的反相。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-invert</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>opacity()</strong></p>
<p>调整图像的透明度，取值 0 ~ 1, 默认1。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">opacity</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="opacity: 0"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: opacity(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: opacity(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: opacity(1)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当值为 0 时，图像不可见，和 opacity 属性的区别是，使用 filter 可以获得浏览器的硬件加速支持。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-opacity</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">opacity</span>(<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>saturate()</strong></p>
<p>调整图像饱和度，取值 0 ~ ∞，默认为 1，当为 0 时图像全灰，大于 1 时图象饱和度更高。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">1</th>
<th align="center">1.5</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: saturate(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: saturate(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: saturate(1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: saturate(1.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: saturate(2)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 饱和度高意味着，有颜色的部分（黑白灰除外）颜色更深。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-saturate</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">1.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>sepia()</strong></p>
<p>调整图像的颜色为深褐色，取值 0 ~ 1, 默认0。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">0.5</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/logo.png" /></div></td>
<td align="center"><div class="filter-box2" style="filter: sepia(0)"><img src="/images/logo.png" /></div></td>
<td align="center"><div class="filter-box2" style="filter: sepia(0.5)"><img src="/images/logo.png" /></div></td>
<td align="center"><div class="filter-box2" style="filter: sepia(1)"><img src="/images/logo.png" /></div></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter-sepia</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>复合函数</strong></p>
<p>filter 函数可以复合使用，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 加强对比度和亮度 */</span></span><br><span class="line"><span class="selector-class">.filter-img</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">175%</span>) <span class="built_in">brightness</span>(<span class="number">3%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-转换函数"><a href="#6-转换函数" class="headerlink" title="6. 转换函数"></a>6. 转换函数</h2><ul>
<li><p><strong>rotate()</strong></p>
<p>旋转图像，移动量由指定角度定义；如果为正值，则运动将为顺时针，如果为负值，则为逆时针。 180°的旋转称为点反射 (point reflection)。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
<th align="center">-90deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: transform: rotate(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate(180deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate(-90deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotate</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rotate3d()</strong></p>
<p>在三维空间旋转图像，该旋转使元素能够绕固定轴移动而不变形。其中移动量由指定角度定义；如果为正值，则运动将为顺时针，如果为负值，则为逆时针。</p>
<p><code>rotate3d(x, y, z, a)</code></p>
<p><em>x</em>: 该参数为 <code>number</code> 类型值， 描述旋转轴向量的 x 坐标，取值 0 或 1，当为0时该轴不应用旋转。</p>
<p><em>y</em>: 该参数为 <code>number</code> 类型值，描述旋转轴向量的 y 坐标，取值 0 或 1，当为0时该轴不应用旋转。</p>
<p><em>z</em>: 该参数为 <code>number</code> 类型值，描述旋转轴向量的 z 坐标，取值 0 或 1，当为0时该轴不应用旋转。</p>
<p><em>a</em>: 该参数为 <code>angle</code> 代表旋转的角度。正角度表示顺时针旋转，负角度表示逆时针旋转。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">x-1-45deg</th>
<th align="center">y-1-45deg</th>
<th align="center">z-1-45deg</th>
<th align="center">1-1-1-90deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: transform: rotate3d(1, 0, 0, 45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate3d(0, 1, 0, 45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate3d(0, 0, 1, 45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotate3d(1, 1, 1, 45deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 这里 x, y, z 传入的顺序不可打乱且不可省略。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotate3d</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rotateX()</strong></p>
<p>在 x 轴旋转图像，即 <code>rotateX(45deg)</code> = <code>rotate3d(1, 0, 0, 45deg)</code></p>
<p><em>注意</em>：<code>rotate3d(1, 0, 0, 45deg)</code> 在 chrome 和 firefox 中实测没有变化（2020/05/09）。尽量使用 <code>rotateX(45deg)</code> 代替。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
<th align="center">-90deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: transform: rotateX(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateX(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateX(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateX(180deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateX(-90deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当角度为 90deg 时，图像不可见。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotateX</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rotateY()</strong></p>
<p>在 y 轴旋转图像，即 <code>rotateY(45deg)</code> = <code>rotate3d(0, 1, 0, 45deg)</code></p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
<th align="center">-90deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: transform: rotateY(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateY(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateY(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateY(180deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateY(-90deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当角度为 90deg 时，图像不可见。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotateY</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rotateZ()</strong></p>
<p>在 z 轴旋转图像，即 <code>rotateZ(45deg)</code> = <code>rotate3d(0, 0, 1, 45deg)</code></p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
<th align="center">-90deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="filter: transform: rotateZ(0)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateZ(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateZ(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateZ(180deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: rotateZ(-90deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: <code>rotateZ</code> 的旋转效果 = <code>rotate</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotateZ</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>scale()</strong></p>
<p>改变图像的大小</p>
<p><code>scale(sx[, sy])</code></p>
<p><em>sx</em>: 缩放 x 轴。</p>
<p><em>sy</em>: 缩放 y 轴，可选。如不存在，则取值为 sx，图像将保持等比缩放。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">x-0.5</th>
<th align="center">y-0.5</th>
<th align="center">x-1.5-y-0.5</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale(0.5, 1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale(1, 0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale(1.5, 0.5)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当 sx 或 sy 值为 0 时，图像不可见。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>, <span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>scale3d()</strong></p>
<p>在三维空间缩放图像</p>
<p>当超出 [-1，1] 的范围之外时，缩放比例将在坐标方向上放大元素；当在 [-1，1] 范围内时，它在当前方向收缩元素。当等于 1 时，它什么也不做，当它为负时，它执行点反射和大小修改。</p>
<p><code>scale3d(sx, sy, sz)</code></p>
<p><em>sx</em>: 缩放 x 轴。</p>
<p><em>sy</em>: 缩放 y 轴。</p>
<p><em>sz</em>: 缩放 z 轴。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">sx-0.5</th>
<th align="center">sy-(-1.5)</th>
<th align="center">sz-0.5</th>
<th align="center">sx-1.5-sy-0.5-sz-2</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale3d(0.5, 1, 1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale3d(1, -0.5, 1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale3d(1, 1, 0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scale3d(1.5, 0.5, 2)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当值为负时，图像反转，且当值 小于 -1 时图像变大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale3d</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>scaleX()</strong></p>
<p>在 x 轴上缩放图像， 即 <code>scaleX(0.5)</code> = <code>scale3d(0.5, 1, 1)</code></p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0.5</th>
<th align="center">1</th>
<th align="center">1.5</th>
<th align="center">-0.5</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleX(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleX(1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleX(1.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleX(-0.5)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scaleX</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>scaleY()</strong></p>
<p>在 y 轴上缩放图像， 即 <code>scaleY(0.5)</code> = <code>scale3d(1, 0.5, 1)</code></p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0.5</th>
<th align="center">1</th>
<th align="center">1.5</th>
<th align="center">-0.5</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleY(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleY(1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleY(1.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleY(-0.5)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scaleY</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>scaleZ()</strong></p>
<p>在 z 轴上缩放图像， 即 <code>scaleZ(0.5)</code> = <code>scale3d(1, 1, 0.5)</code></p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">0.5</th>
<th align="center">1</th>
<th align="center">1.5</th>
<th align="center">-0.5</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleZ(0.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleZ(1)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleZ(1.5)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: scaleZ(-0.5)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scaleZ</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: scaleZ (<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>skew()</strong></p>
<p>拉伸图像，默认角度为0。当值为正时，图像顺时针拉伸，值为负数时，图像逆时针拉伸。</p>
<p><code>skew(ax[, ay])</code></p>
<p><em>ax</em>: x 轴的拉伸角度</p>
<p><em>ay</em>: y 轴的拉伸角度，可选。</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">x-15deg</th>
<th align="center">y-15deg</th>
<th align="center">x-45deg-y-15deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skew(15deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skew(0, 15deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skew(45deg, 15deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
</li>
<li><p><strong>skewX()</strong></p>
<p>在 x 轴拉伸图像</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skewX(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skewX(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skewX(180deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当拉伸角度为 90deg 时， 图像不可见。</p>
<p><em>注意</em>：实测在 QQ浏览器 等国产双核浏览器中，使用 skewX 非常容易造成浏览器崩溃（2020/05/09）。实测 搜狗浏览器 整个l’l</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.skewX</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>skewY()</strong></p>
<p>在 y 轴拉伸图像</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">45deg</th>
<th align="center">90deg</th>
<th align="center">180deg</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="filter-box2"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skewY(45deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skewY(90deg)"><img src="/images/carrot.jpg" /></div></td>
<td align="center"><div class="filter-box2" style="transform: skewY(180deg)"><img src="/images/carrot.jpg" /></div></td>
</tr>
</tbody></table>
<p><em>Tips</em>: 当拉伸角度为 90deg 时， 图像不可见。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.skewY</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewY</span>(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>translate()</strong></p>
<p>平移图像</p>
<p><code>translate(tx[, ty])</code></p>
<p><em>tx</em>: 在 x 轴上移动图像</p>
<p><em>ty</em>: 在 y 轴上移动图像，可选，默认为 0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.translate</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">100%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>translate3d()</strong></p>
<p>在三维空间平移图像</p>
<p><code>translate3d(tx, ty, tz)</code></p>
<p><em>tx</em>: 在 x 轴上移动图像</p>
<p><em>ty</em>: 在 y 轴上移动图像</p>
<p><em>tz</em>: 在 z 轴上移动图像，注意该值不能用百分比</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.translate3d</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100%</span>, <span class="number">100%</span>, <span class="number">5px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>translateX()</strong></p>
<p>在 x 轴上移动图像</p>
<p><code>translateX(5px)</code> = <code>translate(5px, 0)</code> = <code>translate3d(5px, 0, 0)</code></p>
</li>
<li><p><strong>translateY()</strong></p>
<p>在 y 轴上移动图像</p>
<p><code>translateY(5px)</code> = <code>translate(0, 5px)</code> = <code>translate3d(0, 5px, 0)</code></p>
</li>
<li><p><strong>translateZ()</strong></p>
<p>在 z 轴上移动图像</p>
<p><code>translateZ(5px)</code> = <code>translate3d(0, 0, 5px)</code></p>
</li>
<li><p><strong>perspective()</strong></p>
<p>定义了 z = 0 平面与用户之间的距离，以便给三维定位元素一定透视度。当每个 3D 元素的 z &gt; 0 时会显得比较大，而在 z &lt; 0 时会显得比较小。其影响的程度由这个属性的值来决定。</p>
<p><code>perspective: 20px;</code></p>
</li>
<li><p><strong>matrix()</strong></p>
<p>指定了一个由指定的 6 个值组成的 2D 变换矩阵。</p>
<p><code>matrix(a, b, c, d, tx, ty)</code></p>
<p><em>a b c d</em>: 以 <code>number</code> 的格式来描述线性变换</p>
<p><em>tx ty</em>: 以 <code>number</code> 的格式来描述变换的量</p>
</li>
<li><p><strong>matrix3d()</strong></p>
<p>用一个 4 × 4 （16个值）的齐次矩阵来描述一个三维（3D）变换。</p>
<p><code>matrix3d(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4)</code></p>
<p><em>a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3 d4</em>: 以 <code>number</code> 的格式来描述线性变换</p>
<p><em>a4 b4 c4</em>: 以 <code>number</code> 的格式来描述变换的量</p>
</li>
</ul>
<h2 id="7-数学函数"><a href="#7-数学函数" class="headerlink" title="7. 数学函数"></a>7. 数学函数</h2><ul>
<li><p><strong>calc()</strong></p>
<p>传入运算表达式进行一些简单计算</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>注意</em>：</p>
<ol>
<li><p><code>+</code> 和 <code>-</code> 运算符的两边必须要有空白字符。<code>*</code> 和 <code>/</code> 运算符的两边可不加空白字符，但考虑到统一性加上比较好。</p>
</li>
<li><p>用 0 作除数会使 HTML 解析器抛出异常。</p>
</li>
<li><p>涉及自动布局和固定布局的表格中的表列、表列组、表行、表行组和表单元格的宽度和高度百分比的数学表达式，auto 可视为已指定。</p>
</li>
<li><p><code>clac()</code> 里可以再嵌套 <code>clac()</code>, 如：<code>width: calc(100% - calc(50% - 30px));</code>。</p>
</li>
<li><p>运算表达式可以用小括号来建立运算顺序。</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p><strong>min()</strong></p>
<p>在传入的值中取最小的那一个</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">40%</span>, <span class="number">400px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>max()</strong></p>
<p>在传入的值中取最大的那一个</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">40%</span>, <span class="number">400px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>repeat()</strong></p>
<p>表示轨道列表的重复片段，允许以更紧凑的形式写入大量显示重复模式的列或行。</p>
<style>
.repeat-box {
  display: grid;
  grid-template-columns: repeat(2, 50px 1fr) 100px;
  grid-gap: 5px;
  box-sizing: border-box;
  height: 100px;
  width: 100%;
  background-color: #f2f2f2;
  padding: 10px;
  margin-bottom: 20px;
}

.repeat-box-item {
  background-color: lightblue;
  padding: 5px;
}
</style>

<div class="repeat-box">
  <div class="repeat-box-item">1111</div>
  <div class="repeat-box-item">2222</div>
  <div class="repeat-box-item">3333</div>
  <div class="repeat-box-item">4444</div>
  <div class="repeat-box-item">5555</div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.repeat-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 创建 1 个 宽度为 100px 的格子， 2 个 宽度为 50px 的格子， 剩下的 2 个格子宽度为剩余空间的平分值 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">50px</span> <span class="number">1</span>fr) <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.repeat-box-item</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="8-缓动函数"><a href="#8-缓动函数" class="headerlink" title="8. 缓动函数"></a>8. 缓动函数</h2><ul>
<li><p><strong>cubic-bezier()</strong></p>
<p>三次贝塞尔，主要是为 animation 生成速度曲线的函数。</p>
<p><code>cubic-bezier(x1,y1,x2,y2)</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ease */</span></span><br><span class="line"><span class="selector-class">.ease</span> &#123;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">25</span>, .<span class="number">1</span>, .<span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* liner */</span></span><br><span class="line"><span class="selector-class">.liner</span> &#123;</span><br><span class="line">  <span class="comment">/* cubic-bezier(1, 1, 0, 0) */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ease-in */</span></span><br><span class="line"><span class="selector-class">.ease-in</span> &#123;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">42</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ease-out */</span></span><br><span class="line"><span class="selector-class">.ease-out</span> &#123;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0</span>, .<span class="number">58</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ease-in-out */</span></span><br><span class="line"><span class="selector-class">.ease-in-out</span> &#123;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">42</span>, <span class="number">0</span>, .<span class="number">58</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* bounce */</span></span><br><span class="line"><span class="selector-class">.bounce</span> &#123;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.27</span>, <span class="number">1.55</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>steps()</strong></p>
<p>如果说 <code>cubic-bezier</code> 是连续动画, 那么 <code>steps</code> 就是断续动画。通常应用在 loading 动画，逐帧动画之中。</p>
<p><code>steps(number, position)</code></p>
<p><em>number</em>: 表示把动画分成了多少段。</p>
<p><em>position</em>: 接受两个值 start、end。start：表示直接开始。end：表示戛然而止。默认值。</p>
<style>
.steps,
.cubic-bezier {
  width: 300px;
  height: 40px;
  background: #f2f2f2;
  position: relative;
}
.steps::before,
.cubic-bezier::before {
  position: absolute;
  top: 0;
  left: 0;
  content: '';
  width: 100%;
  height: 100%;
}
.cubic-bezier.show::before {
  animation: process 10s forwards cubic-bezier(0, 0, 1, 1);
}
.steps.show::before {
  animation: process 10s forwards steps(3, start);
}
@keyframes process {
  0% {
    background: lightblue;
    width: 0;
  }
  30% {
    background: darkslateblue;
    width: 30%;
  }
  70% {
    background: pink;
    width: 70%;
  }
  100% {
    background: lightblue;
    width: 100%;
  }
}
</style>

<p><button onclick="showCBAni()" class="btn btn-primary">点击播放动画↓</button></p>
<table>
<thead>
<tr>
<th align="center">cubic-bezier</th>
<th align="center">steps</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><div class="cubic-bezier"></div></td>
<td align="center"><div class="steps"></div></td>
</tr>
</tbody></table>
<script>
  function showCBAni() {
    $('.cubic-bezier, .steps').removeClass('show')
    setTimeout(function(){ 
      $('.cubic-bezier, .steps').addClass('show')
    }, 300)
  }
</script>

<p>从以上 Demo 可以看出，<code>steps</code> 的动画是跳动着执行的，每个关键帧之间没有过渡。而 <code>cubic-bezier</code> 会自动给每个关键帧之间创建补间动画。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cubic-bezier</span><span class="selector-class">.show</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: process <span class="number">10s</span> forwards <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.steps</span><span class="selector-class">.show</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: process <span class="number">10s</span> forwards <span class="built_in">steps</span>(<span class="number">3</span>, start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="9-其他函数"><a href="#9-其他函数" class="headerlink" title="9. 其他函数"></a>9. 其他函数</h2><ul>
<li><p><strong>counter()</strong></p>
<p>将计数器的值添加到元素</p>
<p>counter 和 counters 要配合以下几个属性使用：</p>
<ol>
<li><p><code>counter-reset</code>：计数器声明及初始值设置</p>
</li>
<li><p><code>counter-increment</code>：递增规则</p>
<style>
.counter {
 margin-bottom: 20px;
 counter-reset: item;
}
.counter-item::before {
 counter-increment: item;
 content: counter(item)".";
 color: lightblue;
}
</style>

</li>
</ol>
<div class="counter">
  <div class="counter-item"> apple</div>
  <div class="counter-item"> bear</div>
  <div class="counter-item">
    cat
    <div class="counter">
    <div class="counter-item"> animal</div>
    <div class="counter-item"> cute</div>
    </div>
  </div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.counter</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">counter-reset</span>: item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.counter-item</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: item;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(item)<span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>counters()</strong></p>
<p>将计数器的值添加到元素</p>
<p><code>counters</code> 和 <code>counter</code> 的区别在于，counters 可以嵌套计数，counter 只能计算到第一层。</p>
<p><em>Tips</em>: counters 和 counter 的值只能添加到 <code>content</code>。</p>
  <style>
  .counter2 {
    margin-bottom: 20px;
    counter-reset: section;
  }
  .counter-item2::before {
    counter-increment: section;
    content: counters(section, ".") " ";
    color: lightblue;
  }
</style>

<div class="counter2">
  <div class="counter-item2"> apple</div>
  <div class="counter-item2"> bear</div>
  <div class="counter-item2">
    cat
    <div class="counter2">
    <div class="counter-item2"> animal</div>
    <div class="counter-item2"> cute</div>
    </div>
  </div>
</div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.counter2</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: section;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.counter-item2</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: section;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counters</span>(section, <span class="string">"."</span>) <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>var()</strong></p>
<p>引用<code>:root</code>中定义的变量，css中原生的引用变量方法，类似于 scss 中的 <code>$primary</code>。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span>: <span class="number">#28C5C2</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--primary</span>: <span class="number">#28C5C2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--primary);</span><br><span class="line">  <span class="comment">/* 这里 bgColor 这个变量没有被定义，因此会使用备用的 #f2f2f2 作为背景色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bgColor, #f2f2f2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS函数</tag>
      </tags>
  </entry>
  <entry>
    <title>H5与原生APP的交互事件</title>
    <url>//frontend/flow/h5-callapp/</url>
    <content><![CDATA[<h2 id="H5-与原生-APP-的传值"><a href="#H5-与原生-APP-的传值" class="headerlink" title="H5 与原生 APP 的传值"></a>H5 与原生 APP 的传值</h2><p>传值需要和原生开发者先沟通好，比如以下的 activity 事件需要原生先做这个监听事件的处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isApp) &#123;</span><br><span class="line">  <span class="keyword">let</span> u = navigator.userAgent</span><br><span class="line">  <span class="keyword">let</span> isAndroid = u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span> <span class="comment">//android终端</span></span><br><span class="line">  <span class="keyword">let</span> isIos = !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>) <span class="comment">//ios终端</span></span><br><span class="line">  <span class="keyword">if</span> (isIos) &#123;</span><br><span class="line">    webkit.messageHandlers.activity.postMessage(<span class="string">`这里传字符串`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    activity.startNewActivity(<span class="string">`这里传字符串`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="唤端"><a href="#唤端" class="headerlink" title="唤端"></a>唤端</h2><p>唤端是指当用户在微信或浏览器中打开 H5，可以通过某个事件打开原生 APP。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>浏览器是通过 <code>URL scheme</code> 打开 APP，一个 APP 可以设置一个或多个打开自己的 URL scheme。比如，Twitter 就注册自己能被<code>「twitter://」</code>打开。</p>
<p>如果是做 APP 间相互跳转是比较简单的。iOS 就可以使用 UIApplication 的 canOpenUrl 方法来检测 URL scheme 是否能打开对应的 APP。</p>
<p>比如，如果「twitter://」检测能被打开，也就说明本地安装了 Twitter 。再用 UIApplication 的 openURL 方法，就能打开 Twitter 了。Android 中的做法类似。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="IOS-实现方式"><a href="#IOS-实现方式" class="headerlink" title="IOS 实现方式"></a>IOS 实现方式</h4><p>iOS 中默认通过 Safari 打开 URL scheme，方法一般如下两种：</p>
<ol>
<li><strong>直跳方式</strong>：点击链接、修改 window.location 等。</li>
</ol>
<ul>
<li><p>点击链接跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"schemeUrl"</span>&gt;</span>在APP内打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 js 打开</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = schemeUrl</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li><strong>iframe 方式</strong>：在 body 上添加 iframe，设置 src 属性为跳转的 URL scheme。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"APP下载地址"</span>&gt;</span>下载或打开APP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 这里的 click 事件会比 href 先一步执行，如果 iframe 的 src 加载失败，页面就会跳转到 a 标签 href 中的地址</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">'a'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span></span><br><span class="line"><span class="actionscript">    ifr.src = <span class="string">'自定义 URL scheme'</span></span></span><br><span class="line"><span class="actionscript">    ifr.style.display = <span class="string">'none'</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(ifr)</span></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.removeChild(ifr)</span></span><br><span class="line">    &#125;, 3000)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般来说<em>推荐使用第二种方式</em>。第二种方法不会引起页面可见的变化（例如页面内容变成一个新页面），不会导致浏览器历史记录的变化。</p>
<p>在第一种情况，如果 APP 唤醒失败，或者 APP 未安装的话，很多时候都会跳到错误页，这很影响用户体验，而我们的要求可能是跳转到其他页面或者下载 APP。</p>
<h4 id="安卓实现方式"><a href="#安卓实现方式" class="headerlink" title="安卓实现方式"></a>安卓实现方式</h4><p>安卓主要依靠 setTimeout 来区分是否唤醒成功。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openApp</span>(<span class="params">openUrl, appUrl, action, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 检查app是否打开</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkOpen</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _clickTime = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">elsTime</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (elsTime &gt; <span class="number">3000</span> || <span class="built_in">document</span>.hidden || <span class="built_in">document</span>.webkitHidden) &#123;</span><br><span class="line">        cb(<span class="number">1</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb(<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 启动间隔20ms运行的定时器，并检测累计消耗时间是否超过3000ms，超过则结束</span></span><br><span class="line">    <span class="keyword">var</span> _count = <span class="number">0</span>,</span><br><span class="line">      intHandle</span><br><span class="line">    intHandle = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _count++</span><br><span class="line">      <span class="keyword">var</span> elsTime = +<span class="keyword">new</span> <span class="built_in">Date</span>() - _clickTime</span><br><span class="line">      <span class="keyword">if</span> (_count &gt;= <span class="number">100</span> || elsTime &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">        clearInterval(intHandle)</span><br><span class="line">        check(elsTime)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在iframe 中打开APP</span></span><br><span class="line">  <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line">  ifr.src = openUrl</span><br><span class="line">  ifr.style.display = <span class="string">'none'</span></span><br><span class="line">  <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">    checkOpen(<span class="function"><span class="keyword">function</span> (<span class="params">opened</span>) </span>&#123;</span><br><span class="line">      callback &amp;&amp; callback(opened)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(ifr)</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(ifr)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用-URL-Scheme"><a href="#常用-URL-Scheme" class="headerlink" title="常用 URL Scheme"></a>常用 URL Scheme</h3><p>几个常用的URL Scheme平台：</p>
<ul>
<li><p>QQ： mqq://</p>
</li>
<li><p>微信： weixin://</p>
</li>
<li><p>淘宝： taobao://</p>
</li>
<li><p>支付宝： alipay://</p>
</li>
<li><p>微博： sinaweibo://</p>
</li>
<li><p>知乎： zhihu://</p>
</li>
<li><p>短信： sms://</p>
</li>
</ul>
<h3 id="第三方唤端库"><a href="#第三方唤端库" class="headerlink" title="第三方唤端库"></a>第三方唤端库</h3><p><a href="https://www.npmjs.com/package/callapp-lib" target="_blank" rel="noopener">callapp-lib</a></p>
<h2 id="引导下载-APP"><a href="#引导下载-APP" class="headerlink" title="引导下载 APP"></a>引导下载 APP</h2><p>微信将 唤起本地 APP 的接口 和 下载 APP 的接口 给禁了，所以微信中是不能直接唤起 APP 的，一般做法是提示用户在浏览器中打开。下载 APP 的操作也是这样。</p>
<p>一般的做法是添加一张引导图片，引导用户点击右上角的更多按钮，然后点击【在浏览器中打开】这个按钮，跳转到系统浏览器之后，在执行响应的 唤端 或 下载 事件。</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>HTML5</tag>
        <tag>唤端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3.x 基础</title>
    <url>//frontend/frame/vue/</url>
    <content><![CDATA[<h2 id="Vue-语法"><a href="#Vue-语法" class="headerlink" title="Vue 语法"></a>Vue 语法</h2><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">查看官网文档</a></p>
<a id="more"></a>

<h3 id="在-Vue-使用-SVG"><a href="#在-Vue-使用-SVG" class="headerlink" title="在 Vue 使用 SVG"></a>在 Vue 使用 SVG</h3><ol>
<li><p>使用 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;svg class&#x3D;&quot;icon&quot; aria-hidden&#x3D;&quot;true&quot;&gt;</span><br><span class="line">  &lt;use :xlink:href&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;use&gt;</span><br><span class="line">&lt;&#x2F;svg&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      icon: &quot;#icon-menu&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>封装 Icon 组件</p>
</li>
</ol>
<h2 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>to do …… </p>
<h3 id="集成SASS-SCSS"><a href="#集成SASS-SCSS" class="headerlink" title="集成SASS/SCSS"></a>集成SASS/SCSS</h3><p>vue-cli 3+ 版本已默认集成 SCSS，在创建项目的时候选择相应配置即可。</p>
<p>如果创建项目的时候没有配置则可以用以下方案添加支持：</p>
<ol>
<li><p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -D sass-loader node-sass</span><br></pre></td></tr></table></figure>
</li>
<li><p>vue文件中style指定lang为scss即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">  $color &#x3D; red;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>scss全局变量/函数<br>在 vue.config.js 文件中指定 scss 配置文件，之后在每个 scss 文件中就使用该文件中定义的变量和函数了。否则需要在每个 vue 文件中 import 一遍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      sass: &#123;</span><br><span class="line">        data: fs.readFileSync(<span class="string">'src/variables.scss'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="GithubPage中的配置"><a href="#GithubPage中的配置" class="headerlink" title="GithubPage中的配置"></a>GithubPage中的配置</h3><p>可以利用 vue 生成的静态文件，作为 GithubPage 中的网页。</p>
<p>在 GithubPage 中除了生成 index.html 外，还需要生成一个 404.html。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: <span class="string">'src/main.js'</span>,</span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      title: <span class="string">'index'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    notfound: &#123;</span><br><span class="line">      entry: <span class="string">'src/main.js'</span>,</span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'404.html'</span>,</span><br><span class="line">      title: <span class="string">'404'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><h2 id="UI-框架"><a href="#UI-框架" class="headerlink" title="UI 框架"></a>UI 框架</h2>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>Vue</tag>
        <tag>VueX</tag>
        <tag>VueRouter</tag>
        <tag>Vue3.x</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 的配置与封装</title>
    <url>//frontend/function/axios/</url>
    <content><![CDATA[<p>Axios 是一个基于 promise 的 HTTP 库,可以用在浏览器和 Node.js 中。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>node.js</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>

<p>直接引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/axios/0.19.2/axios.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><h3 id="1-全局配置"><a href="#1-全局配置" class="headerlink" title="1. 全局配置"></a>1. 全局配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'http://api.huanggaofang.com'</span></span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN</span><br><span class="line">axios.defaults.headers.post[<span class="string">'content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></span><br></pre></td></tr></table></figure>

<h3 id="2-自定义实例"><a href="#2-自定义实例" class="headerlink" title="2. 自定义实例"></a>2. 自定义实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当创建实例的时候配置默认配置</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://api.huanggaofang.com'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当实例创建时候修改配置</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN</span><br></pre></td></tr></table></figure>

<h3 id="3-优先级"><a href="#3-优先级" class="headerlink" title="3. 优先级"></a>3. 优先级</h3><blockquote>
<p>lib/defaults.js &lt; 实例中的默认配置 &lt; 请求中的 config 参数的配置</p>
</blockquote>
<p><code>请求中的config参数的配置</code>优先级最高。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个实例的时候会使用lib目录中的默认配置</span></span><br><span class="line"><span class="comment">// 在这里timeout配置的值为0，来自于lib的默认值</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create()</span><br><span class="line"><span class="comment">// 回覆盖掉lib的默认值</span></span><br><span class="line"><span class="comment">// 现在所有的请求都要等2.5S之后才会发出</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span></span><br><span class="line"><span class="comment">// 这里的timeout回覆盖之前的2.5S变成5s</span></span><br><span class="line">instance.get(<span class="string">'/test'</span>, &#123;</span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>可以在请求、响应在到达 then / catch 之前拦截他们</p>
<h3 id="1-请求拦截器"><a href="#1-请求拦截器" class="headerlink" title="1. 请求拦截器"></a>1. 请求拦截器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在请求发出之前进行一些操作</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 添加一个响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里对返回的数据进行处理</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-取消拦截器"><a href="#2-取消拦截器" class="headerlink" title="2. 取消拦截器"></a>2. 取消拦截器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterceptor = axios.interceptor.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*....*/</span></span><br><span class="line">&#125;)</span><br><span class="line">axios.interceptors.request.eject(myInterceptor)</span><br></pre></td></tr></table></figure>

<h3 id="3-给自定义的-axios-实例添加拦截器"><a href="#3-给自定义的-axios-实例添加拦截器" class="headerlink" title="3. 给自定义的 axios 实例添加拦截器"></a>3. 给自定义的 axios 实例添加拦截器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create()</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'/getList'</span>).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">    <span class="comment">// 请求已经发出，但是服务器响应返回的状态吗不在2xx的范围内</span></span><br><span class="line">    <span class="built_in">console</span>.log(error.response.data)</span><br><span class="line">    <span class="built_in">console</span>.log(error.response.status)</span><br><span class="line">    <span class="built_in">console</span>.log(error.response.header)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 一些错误是在设置请求的时候触发</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(error.config)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><p>以通过一个 cancel token 来取消一个请求</p>
<h3 id="1-CancelToken-source"><a href="#1-CancelToken-source" class="headerlink" title="1. CancelToken.source"></a>1. CancelToken.source</h3><p>可以通过 CancelToken.source 工厂函数来创建一个 cancel token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/getList'</span>,&#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(axios.isCancel(thrown))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>,thrown.message);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（信息的参数可以设置的）</span></span><br><span class="line">source.cancel(<span class="string">"操作被用户取消"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-cancelToken构造函数"><a href="#2-cancelToken构造函数" class="headerlink" title="2. cancelToken构造函数"></a>2. cancelToken构造函数</h3><p>可以给 cancelToken 构造函数传递一个 executor function 来创建一个 cancel token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> cancel;</span><br><span class="line">axios.get(<span class="string">'/getList'</span>,&#123;</span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这个executor函数接受一个cancel function作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure>

<h2 id="常用封装"><a href="#常用封装" class="headerlink" title="常用封装"></a>常用封装</h2><p>我在 vue 中的常用 axios 封装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/services/router'</span>;</span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">'@/plugins/message'</span>;</span><br><span class="line"><span class="keyword">import</span> $db <span class="keyword">from</span> <span class="string">'@/services/Storage'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"><span class="keyword">let</span> pending = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> baseURL =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">    ? process.env.VUE_APP_API_HOST_PROD</span><br><span class="line">    : process.env.VUE_APP_API_HOST_DEV;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">//发起请求时，取消掉当前正在进行的相同请求</span></span><br><span class="line">    <span class="keyword">if</span> (pending[config.url]) &#123;</span><br><span class="line">      pending[config.url](<span class="string">'操作取消'</span>);</span><br><span class="line">      pending[config.url] = cancel;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pending[config.url] = cancel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> TOKEN = $db.getData(<span class="string">'token'</span>);</span><br><span class="line">    <span class="keyword">if</span> (TOKEN) &#123;</span><br><span class="line">      config.headers.Authorization = TOKEN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器即异常处理</span></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!axios.isCancel(err)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (err.response.status) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            err.tips = <span class="string">'错误请求'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            err.tips = $db.hasData(<span class="string">'token'</span>) ? <span class="string">'登录超时，请重新登录'</span> : <span class="string">'请登录后再操作'</span>;</span><br><span class="line">            <span class="built_in">window</span>.localStorage.clear();</span><br><span class="line">            router.push(&#123;</span><br><span class="line">              path: <span class="string">'/login'</span>,</span><br><span class="line">              query: &#123; <span class="attr">redirect</span>: router.currentRoute.fullPath &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            err.tips = <span class="string">'拒绝访问'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            err.tips = <span class="string">'请求错误,未找到该资源'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">405</span>:</span><br><span class="line">            err.tips = <span class="string">'请求方法未允许'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">            err.tips = <span class="string">'请求超时'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">422</span>: &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; message = <span class="string">'错误请求'</span> &#125; = &#123;&#125; &#125; = err.response;</span><br><span class="line">            err.tips = message;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            err.tips = <span class="string">'服务器端出错'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">            err.tips = <span class="string">'网络未实现'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">            err.tips = <span class="string">'网络错误'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">            err.tips = <span class="string">'服务不可用'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">            err.tips = <span class="string">'网络超时'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">            err.tips = <span class="string">'http版本不支持该请求'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            err.tips = <span class="string">`连接错误<span class="subst">$&#123;err.response.status&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        err.tips = <span class="string">'网络不可用，请检查！'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'err'</span>, err.tips);</span><br><span class="line">    &#125;</span><br><span class="line">    Message.error(err.tips || err);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="keyword">get</span> = (url, param) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(&#123;</span><br><span class="line">      method: <span class="string">'get'</span>,</span><br><span class="line">      url,</span><br><span class="line">      params: param,</span><br><span class="line">      cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">        cancel = c;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;).then(</span><br><span class="line">      res =&gt; &#123;</span><br><span class="line">        resolve(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> post = <span class="function">(<span class="params">url, param</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(&#123;</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: param,</span><br><span class="line">      cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">        cancel = c;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;).then(</span><br><span class="line">      res =&gt; &#123;</span><br><span class="line">        resolve(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updated = <span class="function">(<span class="params">url, param</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(&#123;</span><br><span class="line">      method: <span class="string">'patch'</span>,</span><br><span class="line">      url,</span><br><span class="line">      data: param,</span><br><span class="line">      cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">        cancel = c;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;).then(</span><br><span class="line">      res =&gt; &#123;</span><br><span class="line">        resolve(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> remove = <span class="function">(<span class="params">url, param</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(&#123;</span><br><span class="line">      method: <span class="string">'delete'</span>,</span><br><span class="line">      url,</span><br><span class="line">      params: param,</span><br><span class="line">      cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">        cancel = c;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;).then(</span><br><span class="line">      res =&gt; &#123;</span><br><span class="line">        resolve(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>Axios</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 和 Vim 常用命令</title>
    <url>//frontend/flow/shell/</url>
    <content><![CDATA[<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>Shell 既是一种命令语言，又是一种程序设计语言。</p>
<p>熟练的使用 Shell 命令可以提高我们的工作效率。以下命令以 Mac / Linux 为主，部分命令 Windows 下无法使用。</p>
<p><strong>注意</strong>：在访问系统级目录或进行敏感操作时，Mac / Linux 下需要先输入 <code>sudo</code> 以及用户密码，才能进行下一步操作。</p>
<h3 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到主目录</span></span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到目录/tmp </span></span><br><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到当前目录下的dir目录</span></span><br><span class="line">cd dir</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到根目录</span></span><br><span class="line">cd /</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到到上一级目录</span></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上二级目录</span></span><br><span class="line">cd ../..</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="操作目录"><a href="#操作目录" class="headerlink" title="操作目录"></a>操作目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看目录下的内容</span></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录下创建子目录 abc</span></span><br><span class="line">mkdir abc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印当前目录路径</span></span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除空目录</span></span><br><span class="line">rmdir</span><br></pre></td></tr></table></figure>

<h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件 aaa.text</span></span><br><span class="line">touch aaa.text</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件内容</span></span><br><span class="line">cat aaa.text</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名文件 aaa.text 为 bbb.text</span></span><br><span class="line">mv aaa.text bbb.text</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动文件到指定目录</span></span><br><span class="line">mv aaa.text /abc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除文件 aaa.text</span></span><br><span class="line">rm aaa.text</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除当前目录下的所有未隐藏文件</span></span><br><span class="line">rm *</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定目录以及它包含的所有内容</span></span><br><span class="line">rm -rf abc</span><br></pre></td></tr></table></figure>

<h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 建立软链接 ln -s 源文件/目录 目标文件/目录</span></span><br><span class="line">ln -s aaa.text test</span><br></pre></td></tr></table></figure>

<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim编辑文件（只读模式）</span></span><br><span class="line">vi aaa.text</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入编辑模式</span></span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按 ESC 后执行其他命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入文件</span></span><br><span class="line">:w</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存并退出</span></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制保存并退出</span></span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不保存并退出</span></span><br><span class="line">:q</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不保存并强制退出</span></span><br><span class="line">q!</span><br></pre></td></tr></table></figure>

<h2 id="快捷键打开"><a href="#快捷键打开" class="headerlink" title="快捷键打开"></a>快捷键打开</h2><p>使用快捷键打开命令行工具。</p>
<h3 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h3><ol>
<li>cmd</li>
</ol>
<p>同时按<code>win</code> + <code>R</code>键，在运行中输入<code>cmd</code>，回车。</p>
<ol start="2">
<li>powershell</li>
</ol>
<p>同时按<code>win</code> + <code>R</code>键，在运行中输入<code>powershell</code>，回车。</p>
<p>或</p>
<p>在指定文件夹打开: 在此文件夹上按 shift 同时点击鼠标右键，选择在此处打开<code>Powershell</code>窗口。</p>
<p>在 Windows 系统中推荐使用 Powershell 代替 cmd，功能更强大，cmd 有很多命令不支持。</p>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac:"></a>Mac:</h3><p>同时按<code>control</code> + <code>空格</code>，在搜索框<code>spotlight</code>中输入<code>terminal</code>，回车。</p>
<p>或</p>
<p><code>command</code> + <code>空格</code>，输入terminal.app。</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h3><p>同时按<code>Alt</code> + <code>F2</code>，在运行中输入<code>gnome-terminal</code>，回车。</p>
<p>或 在设置中自定义快捷键。</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端图片/文件上传</title>
    <url>//frontend/function/mobile-file-upload/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>html 中使用 <code>input</code> 标签获得访问本地文件的能力，选择本地图片后，把 input 中的 <code>File</code> 对象转换成后端需要的数据格式。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/file-upload/demo1" target="_blank" rel="noopener">查看DEMO</a></p>
<h2 id="input-type-”file”"><a href="#input-type-”file”" class="headerlink" title="input type=”file”"></a>input type=”file”</h2><p>选择本地图片需要使用 <code>&lt;input type=&quot;file&quot;&gt;</code>。附加属性 <code>accept</code>, <code>capture</code>, <code>files</code>, <code>multiple</code>。</p>
<p><strong>Tips</strong>:</p>
<ol>
<li><p>当选择了多个文件时，value 的值是选择的第一个文件，其他文件使用 <code>HTMLInputElement.files</code> 访问。</p>
</li>
<li><p>如果没有选择文件，该值为空字符串 “”。</p>
</li>
<li><p>为了阻止恶意软件猜测文件路径，字符串以 <code>C:\fakepath\</code> 为前缀。</p>
</li>
</ol>
<a id="more"></a>

<h3 id="1-accept-属性"><a href="#1-accept-属性" class="headerlink" title="1. accept 属性"></a>1. accept 属性</h3><p>accept 表明了服务器端可接受的文件类型，可以限制你手机选择相关的文件，如果限制多个，可以用逗号分割。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">"image/*,.pdf"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个以英文句号（”.”）开头的合法的不区分大小写的文件名扩展名。例如： .jpg，.pdf 或 .doc。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">".jpg,.dpc"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个不带扩展名的 MIME 类型字符串。</p>
<ul>
<li><p>字符串 <code>audio/*</code>， 表示“任何音频文件”。</p>
</li>
<li><p>字符串 <code>video/*</code>，表示 “任何视频文件”。</p>
</li>
<li><p>字符串 <code>image/*</code>，表示 “任何图片文件”。</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">"image/*,audio/*"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-capture-属性"><a href="#2-capture-属性" class="headerlink" title="2. capture 属性"></a>2. capture 属性</h3><p>capture 接受一个字符串（旧版是布尔值）</p>
<p><strong>新版</strong>：</p>
<ul>
<li><p><code>user</code> 使用前置摄像头</p>
</li>
<li><p><code>environment</code> 使用后置摄像头</p>
</li>
</ul>
<p><strong>旧版</strong>：</p>
<ul>
<li><p><code>true</code> 打开摄像头</p>
</li>
<li><p><code>false</code> 打开相册</p>
</li>
</ul>
<h3 id="3-files-属性"><a href="#3-files-属性" class="headerlink" title="3. files 属性"></a>3. files 属性</h3><p><code>FileList</code> 对象每个已选择的文件。如果 <code>multiple</code> 属性没有指定，则这个列表只有一个成员。</p>
<p>用户所选择的文件都存储在了一个 FileList 对象上，其中每个文件都对应了一个 <code>File</code> 对象。</p>
<p>File 对象负责处理那些以文件形式存在的二进制数据，也就是操作本地文件。</p>
<p><strong>注意</strong>，File对象也是一个Blob对象。</p>
<ul>
<li><p>File 对象的<em>获取方式</em>有两种：</p>
<ol>
<li><p>通过 HTML 中的 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素</p>
</li>
<li><p>通过拖拽来选择本地文件</p>
</li>
<li><p><del>mozGetAsFile()，只能火狐浏览器使用</del></p>
</li>
</ol>
</li>
<li><p>File 对象提供了三个<em>属性</em>，包含了文件的有用信息：</p>
<ol>
<li><p><code>name</code> 文件名称，只读字符串。只包含文件名，不包含任何路径信息。</p>
</li>
<li><p><code>size</code> 以字节数为单位的文件大小，只读的 64 位整数。</p>
</li>
<li><p><code>type</code> 文件的 MIME 类型，只读字符串，当类型不能确定时为 “”。</p>
</li>
</ol>
</li>
</ul>
<h3 id="4-multiple-属性"><a href="#4-multiple-属性" class="headerlink" title="4. multiple 属性"></a>4. multiple 属性</h3><p>当指定布尔类型属性 multiple 为 <code>true</code>, 则文件 input 允许用户选择多个文件。为 <code>false</code>, 则为只能选择单个文件。</p>
<h3 id="5-change-事件"><a href="#5-change-事件" class="headerlink" title="5. change 事件"></a>5. change 事件</h3><p>大多数情况下选择文件，会使用 <code>change</code> 事件来监听。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> upload = <span class="built_in">document</span>.getElementById(<span class="string">'upload'</span>)</span><br><span class="line">upload.addEventListener(</span><br><span class="line">  <span class="string">'change'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> file = upload.files[<span class="number">0</span>]</span><br><span class="line">    alert(file.size)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"chooseFile()"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="FileReader-对象"><a href="#FileReader-对象" class="headerlink" title="FileReader 对象"></a>FileReader 对象</h2><p>FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</p>
<p><strong>注意</strong>： FileReader 仅用于以安全的方式从用户<em>远程</em>系统读取文件内容 它不能用于从文件系统中按路径名简单地读取文件。 要在 JavaScript 中按路径名读取文件，应使用标准 Ajax 解决方案进行服务器端文件读取，如果读取跨域，则使用 CORS 权限。</p>
<h3 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h3><ul>
<li><p><code>readyState</code>：类型为unsigned short，FileReader实例的当前状态，（EMPTY——0，还没有加载任何数据；LOADING——1，数据正在加载；DONE——2，已完成全部的读取请求），只读。</p>
</li>
<li><p><code>result</code>：读取到的文件内容，只读。</p>
</li>
<li><p><code>error</code>：类型为DOMError，表示在读取文件时发生的错误，只读。</p>
</li>
</ul>
<h3 id="2-事件处理"><a href="#2-事件处理" class="headerlink" title="2. 事件处理"></a>2. 事件处理</h3><ul>
<li><p><code>FileReader.onabort</code> 处理 abort 事件。该事件在读取操作被中断时触发。</p>
</li>
<li><p><code>FileReader.onerror</code> 处理 error 事件。该事件在读取操作发生错误时触发。</p>
</li>
<li><p><code>FileReader.onload</code> 处理 load 事件。该事件在读取操作完成时触发。</p>
</li>
<li><p><code>FileReader.onloadstart</code> 处理 loadstart 事件。该事件在读取操作开始时触发。</p>
</li>
<li><p><code>FileReader.onloadend</code> 处理 loadend 事件。该事件在读取操作结束时（要么成功，要么失败）触发。</p>
</li>
<li><p><code>FileReader.onprogress</code> 处理 progress 事件。该事件在读取 Blob 时触发。</p>
</li>
</ul>
<h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3. 方法"></a>3. 方法</h3><ul>
<li><p><code>FileReader.abort()</code> 中止读取操作。在返回时，readyState 属性为 DONE。</p>
</li>
<li><p><code>FileReader.readAsArrayBuffer()</code> 开始读取指定的 Blob 中的内容，一旦完成，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象.</p>
</li>
<li><p><code>FileReader.readAsDataURL()</code> 开始读取指定的 Blob 中的内容。一旦完成，result 属性中将包含一个 data: URL 格式的 Base64 字符串以表示所读取文件的内容。</p>
</li>
<li><p><code>FileReader.readAsText()</code> 开始读取指定的 Blob 中的内容。一旦完成，result 属性中将包含一个字符串以表示所读取的文件内容。</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">reader.readAsDataURL(file)</span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e, <span class="keyword">this</span>.result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><h3 id="1-URL-对象"><a href="#1-URL-对象" class="headerlink" title="1. URL 对象"></a>1. URL 对象</h3><p>URL 接口是一个包含若干静态方法的对象，用来创建 URLs。</p>
<p>当我们通过input提交了一个图片时，可以使用<code>URL.createObjectURL</code>获取图片地址。</p>
<h4 id="1-1-静态方法"><a href="#1-1-静态方法" class="headerlink" title="1.1 静态方法"></a>1.1 静态方法</h4><ul>
<li><p><code>URL.createObjectURL(obj)</code> 返回一个 DOMString ，包含一个唯一的 blob 链接（该链接协议为以 blob:，后跟唯一标识浏览器中的对象的掩码）。</p>
<p>obj: File、Blob、MediaSource</p>
</li>
<li><p><code>URL.revokeObjectURL()</code> 销毁之前使用 URL.createObjectURL() 方法创建的 URL 实例。</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = URL.createObjectURL(file)</span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = url</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 销毁</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(<span class="keyword">this</span>.src)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(url)</span><br></pre></td></tr></table></figure>

<h4 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2 注意事项"></a>1.2 注意事项</h4><ol>
<li><p>移动端兼容性</p>
<p>在移动端需要做个兼容性判断。<code>window.URL = window.URL || window.webkitURL</code></p>
</li>
<li><p>内存管理</p>
<p>当不再需要这些 URL 对象时，每个对象必须通过调用 <code>URL.revokeObjectURL()</code> 方法来释放。</p>
<p>浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p>
</li>
</ol>
<h3 id="2-Blob-对象"><a href="#2-Blob-对象" class="headerlink" title="2. Blob 对象"></a>2. Blob 对象</h3><blockquote>
<p>Blob 对象表示一个不可变、原始数据的类文件对象。</p>
</blockquote>
<p>File 接口基于 Blob，继承了 Blob 的功能，并且扩展支持了用户计算机上的本地文件。</p>
<p><strong>语法</strong>：</p>
<p>返回一个新创建的 Blob 对象，其内容由参数中给定的数组串联组成。</p>
<p><code>Blob(blobParts[, options])</code></p>
<p><strong>方法</strong>：</p>
<ul>
<li><p><code>Blob.slice([start[, end[, contentType]]])</code> 返回一个新的 Blob 对象，包含了源 Blob 对象中指定范围内的数据。</p>
</li>
<li><p><code>Blob.stream()</code> 返回一个能读取 blob 内容的 ReadableStream。</p>
</li>
<li><p><code>Blob.text()</code> 返回一个 promise 且包含 blob 所有内容的 UTF-8 格式的 USVString。</p>
</li>
<li><p><code>Blob.arrayBuffer()</code> 返回一个 promise 且包含 blob 所有内容的二进制格式的 ArrayBuffer </p>
</li>
</ul>
<p><strong>读取 Blob 的方法</strong>：</p>
<h4 id="2-1-创建-Blob-对象的-4-种方法"><a href="#2-1-创建-Blob-对象的-4-种方法" class="headerlink" title="2.1 创建 Blob 对象的 4 种方法"></a>2.1 创建 Blob 对象的 4 种方法</h4><ol>
<li><p>调用 Blob 构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = &#123;<span class="attr">hello</span>: <span class="string">"world"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">JSON</span>.stringify(debug, <span class="literal">null</span>, <span class="number">2</span>)], &#123;<span class="attr">type</span> : <span class="string">'application/json'</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用一个已有 Blob 对象上的 <code>slice()</code> 方法切出另一个 Blob 对象</p>
</li>
<li><p>调用 canvas 对象上的 toBlob 方法</p>
</li>
<li><p><del>过气的方法，通过 BlobBuilder 接口创建，但兼容性不好，并且现有的 BlobBuilder 实现都是带前缀的</del></p>
</li>
</ol>
<h4 id="2-2-读取-Blob-对象"><a href="#2-2-读取-Blob-对象" class="headerlink" title="2.2 读取 Blob 对象"></a>2.2 读取 Blob 对象</h4><p>使用 FileReader 可以读取 Blob 对象中的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">reader.readAsArrayBuffer(blob);</span><br><span class="line">reader.addEventListener(<span class="string">"loadend"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//reader.result 就是内容</span></span><br><span class="line">   <span class="built_in">console</span>.log(reader.result)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Object-URLs"><a href="#2-3-Object-URLs" class="headerlink" title="2.3 Object URLs"></a>2.3 Object URLs</h4><p>Object URLs 指的是以 <code>blob:</code> 开头的地址，可以用来展示图片、文本信息。</p>
<p>这里就有点类似 base64 图片的展示，所以我们同样可以用来预览图片。</p>
<p>把选中的图片转为 Object URLs 形式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFiles</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!files.length) &#123;</span><br><span class="line">    fileList.innerHTML = <span class="string">"&lt;p&gt;No file!&lt;/p&gt;"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fileList.innerHTML = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="built_in">document</span>.createElement(<span class="string">"ul"</span>);</span><br><span class="line">    fileList.appendChild(list);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">      list.appendChild(li);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">      <span class="comment">// 从文件中创建object url</span></span><br><span class="line">      img.src = <span class="built_in">window</span>.URL.createObjectURL(files[i]);</span><br><span class="line">      img.height = <span class="number">60</span>;</span><br><span class="line">      img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 加载完成后记得释放object url</span></span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(<span class="keyword">this</span>.src);</span><br><span class="line">      &#125;</span><br><span class="line">      li.appendChild(img);</span><br><span class="line">      <span class="keyword">var</span> info = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">      info.innerHTML = files[i].name + <span class="string">": "</span> + files[i].size + <span class="string">" bytes"</span>;</span><br><span class="line">      li.appendChild(info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Typed-Arrays-类型化数组"><a href="#3-Typed-Arrays-类型化数组" class="headerlink" title="3. Typed Arrays 类型化数组"></a>3. Typed Arrays 类型化数组</h3><p>类型化数组是一种类似数组的对象，提供了<em>访问原始二进制数据</em>的功能。但是类型化数组和正常数组并不是一类的，<code>Array.isArray()</code> 调用会返回 <code>false</code>。</p>
<p>Typed Arrays 有两块内容：</p>
<ol>
<li><p>缓冲(ArrayBuffer)</p>
</li>
<li><p>视图(TypedArray 和 DataView)</p>
</li>
</ol>
<h4 id="3-1-ArrayBuffer"><a href="#3-1-ArrayBuffer" class="headerlink" title="3.1 ArrayBuffer"></a>3.1 ArrayBuffer</h4><p>ArrayBuffer 对象用来表示<em>通用的、固定长度的</em>原始二进制数据缓冲区。</p>
<p>ArrayBuffer 不能直接操作，而是要通过 TypedArray 或 DataView 对象来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。</p>
<p>ArrayBuffer 主要用来高效快速的访问二进制数据，比如 <code>WebGL</code>, <code>Canvas 2D</code> 或者 <code>Web Audio</code> 所使用的数据。</p>
<p><strong>语法</strong>：</p>
<p>一个指定大小的 ArrayBuffer 对象，其内容被初始化为 0。</p>
<p><code>new ArrayBuffer(length)</code></p>
<ul>
<li><p><em>length</em> </p>
<p>要创建的 ArrayBuffer 的大小，单位为字节。</p>
</li>
</ul>
<p><strong>方法</strong>:</p>
<p><code>ArrayBuffer.isView(arg)</code></p>
<p>用来判断传入的参数值是否是一种 ArrayBuffer 视图（view），比如类型化数组对象（typed array objects）或者数据视图（ DataView）。</p>
<h4 id="3-2-TypedArray"><a href="#3-2-TypedArray" class="headerlink" title="3.2 TypedArray"></a>3.2 TypedArray</h4><p>TypedArray 可以在 ArrayBuffer 对象之上，根据不同的数据类型建立视图。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个8字节的ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾</span></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾</span></span><br><span class="line"><span class="keyword">const</span> v2 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(b, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个指向b的Int16视图，开始于字节2，长度为2</span></span><br><span class="line"><span class="keyword">const</span> v3 = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(b, <span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>Int32Array, Uint8Array 之类指的就是 TypedArray，TypedArray 对象描述的是底层二进制数据缓存区的一个类似数组 (array-like) 的视图。</p>
<h4 id="3-3-DataView"><a href="#3-3-DataView" class="headerlink" title="3.3 DataView"></a>3.3 DataView</h4><p>如果一段数据包含多种类型，我们还可以使用<code>DataView 视图</code>进行操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">14</span>)</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer)</span><br><span class="line"></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">66</span>)     <span class="comment">// 写入1字节: 'B'</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">67</span>)     <span class="comment">// 写入1字节: 'M'</span></span><br><span class="line">view.setUint32(<span class="number">2</span>, <span class="number">1234</span>)  <span class="comment">// 写入4字节的大小: 1234</span></span><br><span class="line">view.setUint16(<span class="number">6</span>, <span class="number">0</span>)     <span class="comment">// 写入2字节保留位</span></span><br><span class="line">view.setUint16(<span class="number">8</span>, <span class="number">0</span>)     <span class="comment">// 写入2字节保留位</span></span><br><span class="line">view.setUint32(<span class="number">10</span>, <span class="number">0</span>)    <span class="comment">// 写入4字节偏移量</span></span><br></pre></td></tr></table></figure>

<h2 id="数据格式总结"><a href="#数据格式总结" class="headerlink" title="数据格式总结"></a>数据格式总结</h2><h3 id="1-File-和-Blob-的关系"><a href="#1-File-和-Blob-的关系" class="headerlink" title="1. File 和 Blob 的关系"></a>1. File 和 Blob 的关系</h3><p>从 <code>input onchange</code> 中返回的图片对象其实就是一个<code>File</code>对象。</p>
<p>而<code>Blob</code>对象是一个用来包装二进制文件的容器，<code>File</code>继承于<code>Blob</code>。</p>
<p><code>FileReader</code>是用来读取内存中的文件的<code>API</code>，支持<code>File</code>和<code>Blob</code>两种格式。</p>
<h3 id="2-Blob-Url-和-Data-URLs-的区别"><a href="#2-Blob-Url-和-Data-URLs-的区别" class="headerlink" title="2. Blob Url 和 Data URLs 的区别"></a>2. Blob Url 和 Data URLs 的区别</h3><p>即 <code>URL.createObjectURL</code> 对比 <code>FileReader.readAsDataURL</code></p>
<p><em>相同</em>：</p>
<ul>
<li><p>都能获取图片地址</p>
<ol>
<li><p>通过 <code>URL.createObjectURL(blob)</code> 可以获取当前文件的一个内存URL</p>
</li>
<li><p>通过 <code>FileReader.readAsDataURL(file)</code> 可以获取一段data:base64的字符串</p>
</li>
</ol>
</li>
<li><p>兼容性</p>
<p>都支持从 IE10 往上的所有现代浏览器</p>
</li>
</ul>
<p><em>不同</em>：</p>
<ul>
<li><p>执行时机:</p>
<ol>
<li><p>createObjectURL 是同步执行（立即的）</p>
</li>
<li><p>FileReader.readAsDataURL 是异步执行（过一段时间）</p>
</li>
</ol>
</li>
<li><p>内存使用</p>
<ol>
<li><p>createObjectURL 返回一段带 hash 的 url，并且一直存储在内存中，直到 document 触发了 unload 事件（例如：document close）或者执行 revokeObjectURL 来释放。</p>
</li>
<li><p>FileReader.readAsDataURL 则返回包含很多字符的 base64，并会比 blob url 消耗更多内存，但是在不用的时候会自动从内存中清除（通过垃圾回收机制）</p>
</li>
</ol>
</li>
</ul>
<p><strong>根据情况使用</strong>：</p>
<ol>
<li><p>使用<code>createObjectURL</code>可以节省性能并更快速，只不过需要在不使用的情况下手动释放内存</p>
</li>
<li><p>如果不太在意设备性能问题，并想获取图片的base64，则推荐使用<code>FileReader.readAsDataURL</code></p>
</li>
</ol>
<h3 id="3-数据转换"><a href="#3-数据转换" class="headerlink" title="3. 数据转换"></a>3. 数据转换</h3><ol>
<li><p>Canvas 转换为 DataURL</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转为png图片</span></span><br><span class="line"><span class="keyword">let</span> dataurl = canvas.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转为jpg图片，并压缩20%的图片质量</span></span><br><span class="line"><span class="keyword">let</span> dataurl2 = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>File 对象转换为 DataURL、Blob 对象转换为 DataURL</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readBlobAsDataURL</span>(<span class="params">blob, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">new</span> FileReader();</span><br><span class="line">  a.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;callback(e.target.result);&#125;;</span><br><span class="line">  a.readAsDataURL(blob);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// file 对象属于 blob 对象</span></span><br><span class="line">readBlobAsDataURL(blob, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(dataurl);</span><br><span class="line">&#125;);</span><br><span class="line">readBlobAsDataURL(file, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(dataurl);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>DataURL 转换为 Blob 对象、DataURL 转换为 File 对象</p>
<p>File继承于Blob，扩展了一些属性（文件名、修改时间、路径等）。绝大多数场景下，使用Blob对象就可以了。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoBlob</span>(<span class="params">dataurl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> bstr = atob(arr[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> n = bstr.length</span><br><span class="line">  <span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n)</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> bstr = atob(arr[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> n = bstr.length</span><br><span class="line">  <span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n)</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], filename, &#123;<span class="attr">type</span>:mime&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> blob = dataURLtoBlob(<span class="string">'data:text/plain;base64,YWFhYWFhYQ=='</span>)</span><br><span class="line"><span class="keyword">var</span> file = dataURLtoFile(<span class="string">'data:text/plain;base64,YWFhYWFhYQ=='</span>, <span class="string">'test.txt'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>DataURL 图片数据绘制到 Canvas</p>
<p>先构造 Image 对象，src 为 DataURL，图片 onload 之后绘制到 Canvas</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = dataurl</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  canvas.drawImage(img)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>File, Blob 的图片文件数据绘制到 Canvas</p>
<p>先转换成一个 url，然后构造 Image 对象，src 为 DataURL，图片 onload 之后绘制到 Canvas, 利用上面的 readBlobAsDataURL 函数，由 File,Blob 对象得到 DataURL 格式的 url, 构造 Image 对象，src 为 DataURL，图片 onload 之后绘制到 Canvas</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">readBlobAsDataURL(file, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      canvas.drawImage(img)</span><br><span class="line">  &#125;</span><br><span class="line">  img.src = dataurl</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Canvas转换为Blob对象并使用Ajax发送</p>
<p>先从 Canvas 获取 DataURL, 再将 DataURL 转换为Blob对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dataurl = canvas.toDataURL(<span class="string">'image/png'</span>)</span><br><span class="line"><span class="keyword">let</span> blob = dataURLtoBlob(dataurl)</span><br><span class="line"><span class="comment">// 使用ajax发送</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> FormData()</span><br><span class="line">fd.append(<span class="string">"image"</span>, blob, <span class="string">"image.png"</span>)</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/server'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.send(fd)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="传输数据流"><a href="#传输数据流" class="headerlink" title="传输数据流"></a>传输数据流</h2><p>文件上传一般有 2 种方式:</p>
<ol>
<li><p>将图片转化为 <code>base64</code>，使用 <em>Json</em> 上传</p>
</li>
<li><p>将图片数据转为 <code>Blob 对象</code>，使用 <em>FormData</em> 上传文件</p>
</li>
</ol>
<h3 id="1-FormData"><a href="#1-FormData" class="headerlink" title="1. FormData"></a>1. FormData</h3><p>FormData 对象的字段类型可以是 Blob，File，或者 string，如果它的字段类型不是 Blob 也不是 File，则会被转换成字符串。</p>
<p>利用 FormData 对象，可以使用键值对来模拟一个完整的表单，然后使用 XMLHttpRequest 发送这个”表单”。</p>
<p><strong>FormData</strong> 的优势:</p>
<ol>
<li><p>可以通过 <code>XMLHttpRequest.send()</code> 来异步提交二进制文件。</p>
</li>
<li><p>可以通过Blob的slice来扩展分片上传功能。</p>
</li>
</ol>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="comment">// 普通键值对</span></span><br><span class="line">formData.append(<span class="string">'name'</span>, <span class="string">'value'</span>)</span><br><span class="line"><span class="comment">// 传递一个blob对象</span></span><br><span class="line">formData.append(<span class="string">'blob'</span>, blob)</span><br><span class="line"><span class="comment">// 传递一个file对象</span></span><br><span class="line">formData.append(<span class="string">'file'</span>, file)</span><br><span class="line"><span class="comment">// 如果有多个文件，可以追加到同一个字段中</span></span><br><span class="line">fileInputElement.files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  formData.append(<span class="string">'images'</span>, file);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">oReq.open(<span class="string">'POST'</span>, <span class="string">'http://xx.com'</span>)</span><br><span class="line">oReq.send(formData)</span><br></pre></td></tr></table></figure>

<h3 id="2-Base64"><a href="#2-Base64" class="headerlink" title="2. Base64"></a>2. Base64</h3><p>Base64 是一组相似的二进制到文本（binary-to-text）的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 这个词出自一种 MIME 数据传输编码。 </p>
<p>在 JavaScript 中，有两个函数被分别用来处理解码和编码 base64 字符串：</p>
<ul>
<li><p><code>atob()</code> 解码通过base-64编码的字符串数据</p>
</li>
<li><p><code>btoa()</code> 从二进制数据“字符串”创建一个base-64编码的ASCII字符串</p>
</li>
</ul>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="1-上传进度条"><a href="#1-上传进度条" class="headerlink" title="1. 上传进度条"></a>1. 上传进度条</h3><p>进度条事件使用<strong>progressEvent对象</strong>来实现。</p>
<ul>
<li><p><code>ProgressEvent.lengthComputable</code> 只读<br>是一个 Boolean 标志，表示底层流程将需要完成的总工作量和已经完成的工作量是否可以计算。换句话说，它告诉我们进度是否可以被测量。</p>
</li>
<li><p><code>ProgressEvent.loaded</code> 只读<br>是一个 unsigned long long 类型数据，表示底层流程已经执行的工作总量。可以用这个属性和 ProgressEvent.total 计算工作完成比例。当使用 HTTP 下载资源，它只表示内容本身的部分，不包括首部和其它开销。</p>
</li>
<li><p><code>ProgressEvent.total</code> 只读<br>是一个 unsigned long long 类型数据，表示正在执行的底层流程的工作总量。当使用 HTTP 下载资源，它只表示内容本身的部分，不包括首部和其它开销。</p>
</li>
</ul>
<p>即我们通过loaded/total可以得到当前进度的百分比。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> progressBar = <span class="built_in">document</span>.getElementById(<span class="string">"p"</span>),</span><br><span class="line">    client = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    client.open(<span class="string">"GET"</span>, <span class="string">"xxx/xxx"</span>)</span><br><span class="line">client.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.lengthComputable) &#123;</span><br><span class="line">      <span class="keyword">let</span> total = e.total;</span><br><span class="line">      <span class="keyword">let</span> loaded = e.loaded;</span><br><span class="line">      <span class="keyword">let</span> percentage = <span class="built_in">Math</span>.floor(total/loaded);</span><br><span class="line">      progressBar.style.width = <span class="string">`<span class="subst">$&#123;percentage&#125;</span>%`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">client.send()</span><br></pre></td></tr></table></figure>

<h3 id="2-多图上传"><a href="#2-多图上传" class="headerlink" title="2. 多图上传"></a>2. 多图上传</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">multiple</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>多图上传，这里一般的处理步骤：</p>
<ol>
<li><p>获得图片列表</p>
</li>
<li><p>处理图片，每处理完成一个图片即提交到后端服务器，后端返回一个服务端图片地址</p>
</li>
<li><p>把返回的服务端图片地址的数组提交到服务器</p>
</li>
</ol>
<h3 id="3-拖拽上传"><a href="#3-拖拽上传" class="headerlink" title="3. 拖拽上传"></a>3. 拖拽上传</h3><p>在移动端中很少使用拖拽上传的交互方式，一般桌面端才会做这个事件处理。</p>
<p>拖拽上传的三个相关事件：</p>
<ul>
<li><p><code>dragenter</code> 当拖动的元素或被选择的文本进入有效的放置目标时</p>
</li>
<li><p><code>dragover</code> 当元素或者选择的文本被拖拽到一个有效的放置目标上时(每几百毫秒触发一次)</p>
</li>
<li><p><code>drop</code> 当一个元素或是选中的文字被拖拽释放到一个有效的释放目标位置时</p>
</li>
</ul>
<h3 id="4-本地预览"><a href="#4-本地预览" class="headerlink" title="4. 本地预览"></a>4. 本地预览</h3><ol>
<li><p>图片上传后使用 FileReader 将文件读取成 base64</p>
</li>
<li><p>预览的img标签使用绝对定位，然后把这个img的src值设置为获得的base64字符串</p>
</li>
</ol>
<p>这里用base64预览会有一个问题，就是当图片过大时，生成的base64字符串也会非常大，所以把预览的img标签使用绝对定位，使得这个img脱离文档流，当页面重绘时reflow，就不会过渡消耗性能了。</p>
<p>这里第1步也可以使用<code>window.URL.createObjectURL()</code>生成数据链接。完成预览后需要使用<code>window.URL.revokeObjectURL()</code>释放内存。</p>
<h3 id="5-拍照上传"><a href="#5-拍照上传" class="headerlink" title="5. 拍照上传"></a>5. 拍照上传</h3><p>使用拍照上传图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 调用系统录制功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"video/*"</span> <span class="attr">capture</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 调用系统相机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">capture</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 调用前置摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">capture</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 调用后置摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">capture</span>=<span class="string">"environment"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-图片旋转"><a href="#6-图片旋转" class="headerlink" title="6. 图片旋转"></a>6. 图片旋转</h3><p>使用相机拍照在 IOS 中会有一个问题，当手机是竖着拍的，图片上传后会被逆时针90°旋转。这是因为从相机拍照获取的图片的EXIF（Exchangeable image file format）会默认设置一个orientation tag。注意，目前只有<code>jpeg</code>格式的图片会有这个问题。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>获取图片的orientation</p>
<p>可以使用 <code>exif</code> 这个 js 库来解决这个问题。</p>
<p><code>exif</code>: 获取相片的属性，比如曝光度、拍照方向、GPS 等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EXIF <span class="keyword">from</span> <span class="string">'exif'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根据图片的orientation做对应的旋转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (orientation) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="comment">// horizontal flip</span></span><br><span class="line">   ctx.translate(width, <span class="number">0</span>);</span><br><span class="line">   ctx.scale(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="comment">// 180 rotate left</span></span><br><span class="line">   ctx.translate(width, height);</span><br><span class="line">   ctx.rotate(<span class="built_in">Math</span>.PI);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">   <span class="comment">// vertical flip</span></span><br><span class="line">   ctx.translate(<span class="number">0</span>, height);</span><br><span class="line">   ctx.scale(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">   <span class="comment">// vertical flip + 90 rotate right</span></span><br><span class="line">   ctx.rotate(<span class="number">0.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">   ctx.scale(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">   <span class="comment">// 90 rotate right</span></span><br><span class="line">   ctx.rotate(<span class="number">0.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">   ctx.translate(<span class="number">0</span>, -height);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">   <span class="comment">// horizontal flip + 90 rotate right</span></span><br><span class="line">   ctx.rotate(<span class="number">0.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">   ctx.translate(width, -height);</span><br><span class="line">   ctx.scale(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">   <span class="comment">// 90 rotate left</span></span><br><span class="line">   ctx.rotate(<span class="number">-0.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">   ctx.translate(-width, <span class="number">0</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-压缩图片"><a href="#7-压缩图片" class="headerlink" title="7. 压缩图片"></a>7. 压缩图片</h3><p>图片过大会拖慢上传时间，并且后端一般情况下回限制上传文件的大小，因此在移动端上传文件时需要进行压缩。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li><p>压缩上传基本操作流程：</p>
</li>
<li><p>图片上传后使用 FileReader 将文件读取成 base64</p>
</li>
<li><p>创建 Image，设置 src 属性为图片 base64</p>
</li>
<li><p>创建 canvas，绘制 Image，控制图片宽高</p>
</li>
<li><p>调用 canvas 的 toDataURL 方法压缩，返回压缩后的 base64</p>
</li>
<li><p>将 base64 转成 Blob 对象</p>
</li>
<li><p>创建 FormData 对象，append Blob 对象，提交给服务端</p>
</li>
</ol>
<h3 id="8-裁剪图片"><a href="#8-裁剪图片" class="headerlink" title="8. 裁剪图片"></a>8. 裁剪图片</h3><p>可以使用 <a href="https://fengyuanchen.github.io/cropperjs/" target="_blank" rel="noopener">cropper.js</a> 这个库来裁剪图片。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-键盘意外弹出"><a href="#1-键盘意外弹出" class="headerlink" title="1. 键盘意外弹出"></a>1. 键盘意外弹出</h3><p>有部分手机在点击 input 的时候，会弹出键盘选择。</p>
<p><strong>解决办法</strong>：用 <code>onfocus=&quot;this.blur()&quot;</code>，来强制失去焦点。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">onfocus</span>=<span class="string">"this.blur()"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-选择文件没响应"><a href="#2-选择文件没响应" class="headerlink" title="2. 选择文件没响应"></a>2. 选择文件没响应</h3><p>当选择过一次后，再次选择同一个文件，<code>change</code> 事件不会触发，因为 value 没有改变</p>
<p><strong>解决办法</strong>：给 input 添加点击事件，点击后使 value 值为空字符串即可，<code>HTMLInputElement.value = &#39;&#39;</code>。</p>
<h3 id="3-获取不到type值"><a href="#3-获取不到type值" class="headerlink" title="3. 获取不到type值"></a>3. 获取不到type值</h3><p>在安卓机器中，部分 4.x 的机型, 在 webview 里面对 file 对象进行了阉割，因此拿不到 file.type 的值。</p>
<p><strong>解决办法</strong>：暂无。</p>
<h3 id="4-onprogress只调用了一次"><a href="#4-onprogress只调用了一次" class="headerlink" title="4. onprogress只调用了一次"></a>4. onprogress只调用了一次</h3><p>本地上传请求事件小于50ms</p>
<h3 id="5-浏览器不支持"><a href="#5-浏览器不支持" class="headerlink" title="5. 浏览器不支持"></a>5. 浏览器不支持</h3><p><strong>解决办法</strong>：在上传图片之前先检测浏览器兼容性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测是否支持File API</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.File &amp;&amp; <span class="built_in">window</span>.FileReader &amp;&amp; <span class="built_in">window</span>.FileList &amp;&amp; <span class="built_in">window</span>.Blob) &#123;</span><br><span class="line">  <span class="comment">//  支持</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'不支持'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-图片过大"><a href="#6-图片过大" class="headerlink" title="6. 图片过大"></a>6. 图片过大</h3><p>图片的大小：如果图片的大小超过两百万像素，图片是无法绘制到 canvas 上的，调用 drawImage 的时候不会报错，但是你用 toDataURL 获取图片数据的时候获取到的是空的图片数据。</p>
<p><strong>解决方法</strong>：瓦片绘制，也就是将图片分割成多块绘制到 canvas 上，代码里的实现是把图片分割成 100 万像素一块的大小，再绘制到 canvas 上。</p>
<p>canvas 的大小有限制，如果 canvas 的大小大于大概五百万像素（宽 * 高）时，不仅图片画不出来，其他什么东西也都是画不出来的。</p>
<p><strong>解决方法</strong>：对图片的宽高进行适当压缩。具体实现以上限四百万像素为基准，如果图片大于四百万像素就压缩到小于四百万像素。</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>移动端</tag>
        <tag>HTML5</tag>
        <tag>文件上传</tag>
        <tag>图片上传</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小游戏开发总结</title>
    <url>//frontend/wechat/game/</url>
    <content><![CDATA[<p>to be continue</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>微信小游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发总结</title>
    <url>//frontend/wechat/app/</url>
    <content><![CDATA[<h2 id="原生语法"><a href="#原生语法" class="headerlink" title="原生语法"></a>原生语法</h2><p>to be continue</p>
<a id="more"></a>

<h3 id="http封装"><a href="#http封装" class="headerlink" title="http封装"></a>http封装</h3><ol>
<li><p>二次封装http方法</p>
<p>小程序提供了原生的http方法，为了方便使用，我这里可以进行二次封装。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> API_URI = <span class="string">'https://www.huanggaofang.com/api/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">"./util"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> token = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">url, params, method, header, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _header = &#123;</span><br><span class="line">    ...header,</span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'miniapp'</span>,</span><br><span class="line">    <span class="string">'Authorization'</span>: <span class="string">"Bearer "</span> + token</span><br><span class="line">  &#125;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;API_URI&#125;</span>/<span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">    data: params,</span><br><span class="line">    method: method,</span><br><span class="line">    header: _header,</span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.statusCode === <span class="number">200</span> || res.statusCode === <span class="number">201</span> || res.statusCode === <span class="number">202</span> || res.statusCode === <span class="number">204</span>) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.statusCode === <span class="number">401</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"token过期重新登录"</span>)</span><br><span class="line">        wx.removeStorage(&#123;</span><br><span class="line">          key: <span class="string">'token'</span>,</span><br><span class="line">          success(res) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          wx.reLaunch(&#123;</span><br><span class="line">            url: <span class="string">'index'</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;, <span class="number">600</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="function"><span class="keyword">function</span> (<span class="params">url, params, method, header</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    wx.getStorage(&#123;</span><br><span class="line">      key: <span class="string">'token'</span>,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        token = res.data</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fetch(url, params, method, header, resolve, reject)</span><br><span class="line">      &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fetch(url, params, method, header, resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  baseUrl: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> API_URI</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span>: function (url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> http(url, params, <span class="string">"GET"</span>, &#123;</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">delete</span>: <span class="function"><span class="keyword">function</span> (<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> http(url, params, <span class="string">"DELETE"</span>, &#123;</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  post: <span class="function"><span class="keyword">function</span> (<span class="params">url, params, header = &#123; <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> formData = util.json2Form(params)</span><br><span class="line">    <span class="keyword">return</span> http(url, formData, <span class="string">"POST"</span>, header)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">json2Form</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> json) &#123;</span><br><span class="line">    str.push(<span class="built_in">encodeURIComponent</span>(p) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(json[p]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  json2Form,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="上拉加载下拉刷新"><a href="#上拉加载下拉刷新" class="headerlink" title="上拉加载下拉刷新"></a>上拉加载下拉刷新</h3><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h2 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="在-mpvue-中使用iView"><a href="#在-mpvue-中使用iView" class="headerlink" title="在 mpvue 中使用iView"></a>在 mpvue 中使用iView</h4><p><a href="https://weapp.iviewui.com/docs/guide/start" target="_blank" rel="noopener">查看文档</a></p>
<h3 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h3><h2 id="wepy"><a href="#wepy" class="headerlink" title="wepy"></a>wepy</h2><h2 id="其他平台小程序"><a href="#其他平台小程序" class="headerlink" title="其他平台小程序"></a>其他平台小程序</h2><h3 id="支付宝小程序"><a href="#支付宝小程序" class="headerlink" title="支付宝小程序"></a>支付宝小程序</h3><h3 id="快应用"><a href="#快应用" class="headerlink" title="快应用"></a>快应用</h3>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信H5海报开发总结</title>
    <url>//frontend/wechat/poster/</url>
    <content><![CDATA[<p>to be continue…</p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>HTML5</tag>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>微信H5网站开发总结</title>
    <url>//frontend/wechat/wap/</url>
    <content><![CDATA[<p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html" target="_blank" rel="noopener">微信公众号JS-SDK开放文档</a></p>
<a id="more"></a>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="npm库"><a href="#npm库" class="headerlink" title="npm库"></a>npm库</h3><p>安装SDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install weixin-js-sdk --save</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="用户消息推送"><a href="#用户消息推送" class="headerlink" title="用户消息推送"></a>用户消息推送</h3><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>HTML5</tag>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>H5自适应小结</title>
    <url>//frontend/flow/h5-adaptive/</url>
    <content><![CDATA[<h2 id="H5-头标签"><a href="#H5-头标签" class="headerlink" title="H5 头标签"></a>H5 头标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome / 使用极速模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge,chrome=1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 360 使用Google Chrome Frame --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用响应式渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="单位-VW-REM"><a href="#单位-VW-REM" class="headerlink" title="单位 VW/REM"></a>单位 VW/REM</h2><h3 id="VW"><a href="#VW" class="headerlink" title="VW"></a>VW</h3><p>1.<strong>vw</strong>：1vw 等于视口宽度的 1%。</p>
<p>2.<strong>vh</strong>：1vh 等于视口高度的 1%。</p>
<p>3.<strong>vmin</strong>：选取 vw 和 vh 中最小的那个。</p>
<p>4.<strong>vmax</strong>：选取 vw 和 vh 中最大的那个</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例 */</span></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40vw</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4.72vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h3><p>rem 是相对于根元素（html）字体大小的单位，他只是一种相对单位。不同于另一个相对单位 em，em 是相对于父元素的字体大小，而 rem 则相对于根元素（html），与父元素的字体大小无关。</p>
<p>字号大小不推荐用 rem 作为单位，否则可能会有文字排版问题。因此，字号仍旧使用 px 作为单位，并配合 data-dpr 自定义属性来在普通屏和高清屏设置不同的 font-size。</p>
<p>原理：1. 使用 js 根据屏幕宽度设置不同的根字体大小；2. 使用 rem 为单位绘制元素宽高；3. 文字大小仍旧使用 px 为单位。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  RootSize()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RootSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">  <span class="keyword">var</span> objHtml = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>]</span><br><span class="line">  objHtml.style.fontSize = docWidth / <span class="number">7.5</span> + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br><span class="line">RootSize()</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例 */</span></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* 平滑渐变 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: font-size <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">401px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">428px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26.75px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">481px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">569px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">641px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="刘海屏-异性屏处理"><a href="#刘海屏-异性屏处理" class="headerlink" title="刘海屏/异性屏处理"></a>刘海屏/异性屏处理</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="comment">/* Status bar height on iOS 10 */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* Status bar height on iOS 11+ */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="built_in">constant</span>(safe-area-inset-top);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在移动端项目里推荐使用<code>vm</code>做单位</p>
<p>需要同时兼容PC端和移动端时使用<code>rem</code>做单位</p>
<h2 id="当前方案"><a href="#当前方案" class="headerlink" title="当前方案"></a>当前方案</h2><p>本博客使用的自适应方案</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;<span class="function">(<span class="params">(doc, win</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> docEl = doc.documentElement</span><br><span class="line">  <span class="keyword">const</span> resizeEvt =</span><br><span class="line">    <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span></span><br><span class="line">  <span class="keyword">const</span> recalc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> clientWidth = docEl.clientWidth</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    clientWidth = clientWidth &gt; <span class="number">750</span> ? <span class="number">750</span> : clientWidth</span><br><span class="line">    <span class="keyword">const</span> rem = <span class="number">30</span> * (clientWidth / <span class="number">750</span>)</span><br><span class="line">    win.$REM = rem</span><br><span class="line">    docEl.style.fontSize = <span class="string">`<span class="subst">$&#123;rem&#125;</span>px`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="comment">/* 平滑渐变 */</span></span><br><span class="line">  -webkit-<span class="attribute">transition</span>: font-size <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 自适应 */</span></span><br><span class="line"><span class="comment">/** 桌面端 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (min-width: <span class="number">1025px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (min-width: <span class="number">1367px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 移动端 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (max-width: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="comment">// 个别模块兼容性处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>HTML5</tag>
        <tag>自适应</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器数据存储方案</title>
    <url>//frontend/flow/web-store/</url>
    <content><![CDATA[<p>常见的浏览器数据存储方法：Cookie、WEB 存储 (localStorage 和 sessionStorage)、IndexedDB。</p>
<p>需要注意的是，以上方法都不适合存储敏感数据。</p>
<a id="more"></a>

<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>优点：Cookie 的兼容性最好，可以兼容现在市面上所有的主流浏览器。</p>
<p>缺点：存储量小、性能差、只能储存字符串、安全问题。</p>
<p>Cookie 是没有过期时间的，可以设置永不过期，也可以默认不设置的话，是关闭浏览器自动过期。</p>
<p>cookie 过期时间设置方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">0</span>) <span class="comment">//不记录cookie</span></span><br><span class="line"></span><br><span class="line">cookie.setMaxAge(<span class="number">-1</span>) <span class="comment">//会话级cookie，关闭浏览器失效</span></span><br><span class="line"></span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span>) <span class="comment">//过期时间为1小时</span></span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line">    <span class="comment">// get可根据cookie的名字获取相应的值</span></span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="keyword">const</span> cookieName = encodeURIcOMPONET(name) + <span class="string">"="</span>,</span><br><span class="line">               cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">               cookieValue = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span>(cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart)</span><br><span class="line">            <span class="keyword">if</span>(cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length</span><br><span class="line">            &#125;</span><br><span class="line">            cookieValue = decodeURICompoent(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set设置一个cookie</span></span><br><span class="line">    <span class="keyword">set</span>: function(name, value, expires, path, domain, secure) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = encodeURIComponet(name)+<span class="string">"="</span>+encodeURIComponet(value)</span><br><span class="line">        <span class="keyword">if</span>(expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">            cookieText += <span class="string">"; expires="</span> + expires.toGMTString()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path) &#123;</span><br><span class="line">            cookieText += <span class="string">";path="</span> + path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(domain) &#123;</span><br><span class="line">            cookieText += <span class="string">"; domain"</span> + domain</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(secure) &#123;</span><br><span class="line">            cookieText += <span class="string">"; secure"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除已有的cookie</span></span><br><span class="line">    unset: <span class="function"><span class="keyword">function</span>(<span class="params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WEB-存储"><a href="#WEB-存储" class="headerlink" title="WEB 存储"></a>WEB 存储</h2><p>WEB 存储，即 localStorage 和 sessionStorage。</p>
<p>与 Cookie 的区别：</p>
<ol>
<li><p>属于 HTML5 标准的新 API，上古浏览器不支持。</p>
</li>
<li><p>存储量大，可以跨会话存在。</p>
</li>
<li><p>更安全。</p>
</li>
</ol>
<h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方法存储数据</span></span><br><span class="line">localStorage.setItem(<span class="string">'name'</span>, <span class="string">'Srtian'</span>)</span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'Srtian'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">localStorage.setItem(<span class="string">'user'</span>, <span class="built_in">JSON</span>.stringify(user))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用属性存储数据</span></span><br><span class="line">localStorage.say = <span class="string">'Hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法读取数据</span></span><br><span class="line"><span class="keyword">const</span> name = localStorage.getItem(<span class="string">'name'</span>)</span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'user'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用属性读取数据</span></span><br><span class="line"><span class="keyword">const</span> say = localStorage.say</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">localStorage.removeItem(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存数据到sessionStorage</span></span><br><span class="line">sessionStorage.setItem(<span class="string">'name'</span>, <span class="string">'Srtian'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从sessionStorage获取数据</span></span><br><span class="line"><span class="keyword">var</span> data = sessionStorage.getItem(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从sessionStorage删除保存的数据</span></span><br><span class="line">sessionStorage.removeItem(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从sessionStorage删除所有保存的数据</span></span><br><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>

<h3 id="时效"><a href="#时效" class="headerlink" title="时效"></a>时效</h3><p><strong>永久的</strong>：</p>
<p>localStorage 存储的数据时永久性的，除非我们使用 removeItem 来删除或者用户通过设置浏览器配置来删除，负责数据会一直保留在用户的电脑上，永不过期。</p>
<p><strong>暂时的</strong>：</p>
<p>Session Storage 只存储当前会话页的数据，且只有当用户关闭当前会话页或浏览器时，数据才会被清除。</p>
<h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>IndexedDB 的优点：</p>
<ol>
<li><p>数据格式是 JSON</p>
</li>
<li><p>存储量较 localStorage/sessionStorage 更大，取决于设备（分配到浏览器）的内存大小。</p>
</li>
</ol>
<p>缺点是浏览器兼容问题，IE10 以下无法使用。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意数据库的版本号只能是整数</span></span><br><span class="line"><span class="keyword">const</span> request = IndexedDB.open(databasename, version)</span><br><span class="line"></span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建数据库失败时的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建数据库成功时的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line">request.onupgradeneededd = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当数据库改变时的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> db = event.target.result</span><br><span class="line">  <span class="keyword">const</span> objectStore = db.createObjectStore(<span class="string">'name'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">'id'</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><table>
<thead>
<tr>
<th align="center">区别</th>
<th align="center">Cookie</th>
<th align="center">localStorage</th>
<th align="center">sessionStorage</th>
<th align="center">IndexedDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">兼容</td>
<td align="center">良好</td>
<td align="center">一般</td>
<td align="center">一般</td>
<td align="center">差</td>
</tr>
<tr>
<td align="center">安全</td>
<td align="center">差</td>
<td align="center">一般</td>
<td align="center">一般</td>
<td align="center">良好</td>
</tr>
<tr>
<td align="center">性能</td>
<td align="center">差</td>
<td align="center">一般</td>
<td align="center">一般</td>
<td align="center">良好</td>
</tr>
<tr>
<td align="center">容量</td>
<td align="center">4k 以内</td>
<td align="center">5M 左右</td>
<td align="center">5M 左右</td>
<td align="center">50M 以上（或不限）</td>
</tr>
<tr>
<td align="center">时效</td>
<td align="center">无过期</td>
<td align="center">永久</td>
<td align="center">当前会话</td>
<td align="center">永久</td>
</tr>
<tr>
<td align="center">格式</td>
<td align="center">字符串</td>
<td align="center">key/value(字符串)</td>
<td align="center">key/value(字符串)</td>
<td align="center">key/value(Json)</td>
</tr>
<tr>
<td align="center">同域限制</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>数据存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>//frontend/flow/git/</url>
    <content><![CDATA[<h2 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h2><p>Git，分布式版本控制系统。GitHub 网站，为开源项目免费提供 Git 存储。</p>
<a id="more"></a>

<h2 id="集中式-vs-分布式"><a href="#集中式-vs-分布式" class="headerlink" title="集中式 vs 分布式"></a>集中式 vs 分布式</h2><p>集中式版本控制系统的代表，SVN。版本库是集中存放在中央服务器。</p>
<p>分布式，即每个人的电脑上都是一个完整的版本库。</p>
<h2 id="Git-优势"><a href="#Git-优势" class="headerlink" title="Git 优势"></a>Git 优势</h2><ol>
<li><p>去中心化：SVN 需要一个中央服务器，当服务器出问题时，所有的版本都丢失了。Git 没有中央服务器的概念，当一个电脑的版本库出问题，clone 其他电脑的版本库即可。</p>
</li>
<li><p>本地提交：没有网络时，SVN 不能提交修改，Git 可以提交修改。</p>
</li>
<li><p>分支策略：Git 拥有强大的分支管理，可以更方便的进行分离和合并的操作。</p>
</li>
</ol>
<h2 id="Git-切换账号"><a href="#Git-切换账号" class="headerlink" title="Git 切换账号"></a>Git 切换账号</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "Your Name"</span><br><span class="line">git config --global user.email "email@example.com"</span><br></pre></td></tr></table></figure>

<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><p>clone远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure>


<p>更新提交命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge origin/develop</span><br></pre></td></tr></table></figure>

<p>更新子模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>

<p>放弃本地修改强制更新:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/develop</span><br></pre></td></tr></table></figure>

<h2 id="Git-命令列表"><a href="#Git-命令列表" class="headerlink" title="Git 命令列表"></a>Git 命令列表</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把变动文件添加到仓库</span></span><br><span class="line">git add ReadMe.md</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把变动提交到仓库</span></span><br><span class="line">git commit -m "add ReadMe"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前变动状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前变动详情</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看最近提交的记录</span></span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库<span class="built_in">clone</span></span></span><br><span class="line">git clone git@github.com:xxx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把本地仓库关联到远程github仓库</span></span><br><span class="line">git remote add origin git@github.com:xxx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支</span></span><br><span class="line">git switch &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并切换分支</span></span><br><span class="line">git switch -c &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并某分支到当前分支上</span></span><br><span class="line">git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line">git branch -d &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把本地提交的变动，推送到远程仓库</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取远程仓库中的某个分支的最新代码，并合并到本地的指定分支上</span></span><br><span class="line">git pull &lt;远程库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Text Reader For Web 文本阅读器</title>
    <url>//project/textreader/</url>
    <content><![CDATA[<h3 id="功能说明："><a href="#功能说明：" class="headerlink" title="功能说明："></a>功能说明：</h3><ol>
<li><p>在浏览器上阅读 Text 文本</p>
</li>
<li><p>支持添加书签</p>
</li>
</ol>
<h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><p><a href="https://gaofanghuang.github.io/txt-reader/" target="_blank" rel="noopener">Text Reader For Web</a></p>
<h2 id="功能更新："><a href="#功能更新：" class="headerlink" title="功能更新："></a>功能更新：</h2><h3 id="v0-1-2020-03-21："><a href="#v0-1-2020-03-21：" class="headerlink" title="v0.1 2020-03-21："></a>v0.1 2020-03-21：</h3><ol>
<li>发布v0.1</li>
</ol>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Web App</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器、Switch、Array循环</title>
    <url>//frontend/js/loop/</url>
    <content><![CDATA[<p><a href="https://gaofanghuang.github.io/demo/api/loop/demo1" target="_blank" rel="noopener">查看 demo</a></p>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>for 语句用于创建一个循环，它包含了三个可选的表达式，这三个表达式被包围在圆括号之中，使用分号分隔，后跟一个用于在循环中执行的语句（通常是一个块语句）。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ([initialization]; [condition]; [final - expression]) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>initialization</strong>: 一个表达式 (包含赋值语句) 或者变量声明。典型地被用于初始化一个计数器。该表达式可以使用 var 或 let 关键字声明新的变量，使用 var 声明的变量不是该循环的局部变量，而是与 for 循环处在同样的作用域中。用 let 声明的变量是语句的局部变量。该表达式的结果无意义。</p>
<p><strong>condition</strong>: 一个条件表达式被用于确定每一次循环是否能被执行。如果该表达式的结果为 true，statement 将被执行。这个表达式是可选的。如果被忽略，那么就被认为永远为真。如果计算结果为假，那么执行流程将被跳到 for 语句结构后面的第一条语句。</p>
<p><strong>final-expression</strong>: 每次循环的最后都要执行的表达式。执行时机是在下一次 condition 的计算之前。通常被用于更新或者递增计数器变量。</p>
<p><strong>statement</strong>: 只要 condition 的结果为 true 就会被执行的语句。要在循环体内执行多条语句，使用一个块语句（{ … }）来包含要执行的语句。没有任何语句要执行，使用一个空语句（;）。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，for 里的三个表达式是可省略的(如果条件语句省略，必须确保在循环体内跳出，否则将造成死循环)，例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="comment">// 注意，for()里的分号是强制性的不可省略</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">3</span>) <span class="keyword">break</span></span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p>以任意顺序遍历一个对象的除 Symbol 以外的可枚举属性。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> iterable) &#123;</span><br><span class="line">  <span class="comment">//statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>variable</strong> 在每次迭代时，variable 会被赋值为不同的属性名。</p>
<p><strong>object</strong> 非 Symbol 类型的可枚举属性被迭代的对象。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="停止迭代"><a href="#停止迭代" class="headerlink" title="停止迭代"></a>停止迭代</h3><p>对于 for…of 的循环，可以由<code>break</code>, <code>throw</code>, <code>continue</code>或<code>return</code>终止。</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>次序问题，遍历数组时不要使用<code>for...in</code></li>
</ol>
<p>for…in 的迭代顺序依赖执行环境，不一定是数组的索引顺序。当需要遍历数组时，使用 forEach 或 for…of 更好。</p>
<ol start="2">
<li>只迭代自身属性</li>
</ol>
<p>for…in 无法迭代类的原型，只能迭代类的属性。</p>
<ol start="3">
<li>在 ts 中使用以下方法代替</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li><p>迭代对象：key-value 数据</p>
</li>
<li><p>检查某键是否为某值时</p>
</li>
</ol>
<h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><p>在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象，DOM 元素集合等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句.</p>
<p><strong>TypedArray</strong>：类型化数组。</p>
<p><strong>Map</strong>：Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。</p>
<p><strong>Set</strong>：Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="comment">//statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>variable</strong> 在每次迭代中，将不同属性的值分配给变量。</p>
<p><strong>iterable</strong> 被迭代枚举其属性的对象。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="停止迭代-1"><a href="#停止迭代-1" class="headerlink" title="停止迭代"></a>停止迭代</h3><p>对于 for…of 的循环，可以由<code>break</code>, <code>throw</code>, <code>continue</code>或<code>return</code>终止。</p>
<h3 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>不能迭代对象</li>
</ol>
<p>obj is not iterable</p>
<ol start="2">
<li>不能迭代类</li>
</ol>
<p>Ani is not iterable</p>
<ol start="3">
<li>不能重复迭代生成器</li>
</ol>
<p>同一个生成器只能迭代一次</p>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  i++</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h2><p>do…while 语句创建一个执行指定语句的循环，直到 condition 值为 false。在执行 statement 后检测 condition，所以指定的 statement 至少执行一次。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125; <span class="keyword">while</span> (condition)</span><br></pre></td></tr></table></figure>

<p><strong>statement</strong>: 执行至少一次的语句，并在每次 condition 值为真时重新执行。想执行多行语句，可使用 block 语句（{ … }）包裹这些语句。</p>
<p><strong>condition</strong>: 循环中每次都会计算的表达式。如果 condition 值为真， statement 会再次执行。当 condition 值为假，则跳到 do…while 之后的语句。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="常见问题-2"><a href="#常见问题-2" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>当 <strong>condition</strong> 一直为 <code>true</code> 时，会一直循环至浏览器崩溃为止。</li>
</ol>
<h2 id="for-await…of"><a href="#for-await…of" class="headerlink" title="for await…of"></a>for await…of</h2><p>for await…of 语句会在异步或者同步可迭代对象上创建一个迭代循环，包括 String，Array，Array-like 对象（比如 arguments 或者 NodeList)，TypedArray，Map， Set 和自定义的异步或者同步可迭代对象。其会调用自定义迭代钩子，并为每个不同属性的值执行语句。</p>
<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>variable</strong> 在每次迭代中，将不同属性的值分配给变量。变量有可能以 const, let, 或者 var 来声明。</p>
<p><strong>iterable</strong> 被迭代枚举其属性的对象。与 for…of 相比，这里的对象可以返回 Promise，如果是这样，那么 variable 将是 Promise 所包含的值，否则是值本身。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">asyncGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (num <span class="keyword">of</span> asyncGenerator()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch 语句评估一个表达式，将表达式的值与 case 子句匹配，并执行与该情况相关联的语句。</p>
<h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> value1:</span><br><span class="line">    <span class="comment">// 当 expression 的结果与 value1 匹配时，执行此处语句</span></span><br><span class="line">    [<span class="keyword">break</span>;]</span><br><span class="line">  <span class="keyword">case</span> value2:</span><br><span class="line">    <span class="comment">// 当 expression 的结果与 value2 匹配时，执行此处语句</span></span><br><span class="line">    [<span class="keyword">break</span>;]</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">case</span> valueN:</span><br><span class="line">    <span class="comment">// 当 expression 的结果与 valueN 匹配时，执行此处语句</span></span><br><span class="line">    [<span class="keyword">break</span>;]</span><br><span class="line">  [<span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 如果 expression 与上面的 value 值都不匹配，执行此处语句</span></span><br><span class="line">    [<span class="keyword">break</span>;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>expression</strong>:一个用来与 case 子语句匹配的表达式。</p>
<p><strong>case valueN</strong>: 可选。用于匹配 expression 的 case 子句。如果 expression 与给定的 valueN 相匹配，则执行该 case 子句中的语句直到该 switch 语句结束或遇到一个 break 。</p>
<p><strong>default 可选</strong>：一个 default 子句；如果给定，这条子句会在 expression 的值与任一 case 语句均不匹配时执行。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (animal.name) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'dog'</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dag age is 10.'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'cat'</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Cat age is 4.'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'fish'</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fish age is 1.'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'什么也没找到'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见问题-3"><a href="#常见问题-3" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>两个 case 之间没有 break</li>
</ol>
<p>即上一个匹配的 case 没有 break，那么下一个 case 里的语句也会被执行，知道遇到 break。</p>
<ol start="2">
<li>default 的位置</li>
</ol>
<p>default 的位置不一定要放在流程的最后，也可以在第一个或者随便中间的某个位置，但是如果为了代码看起来更规范，还是建议放在流程尾部。</p>
<ol start="3">
<li>多 case 单一操作</li>
</ol>
<p>如果 case 语句之下没有 break ，它将继续执行下一个 case 语句，而不管 case 是否符合条件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch (animal.name) &#123;</span><br><span class="line">  case &#39;dog&#39;:</span><br><span class="line">  case &#39;cat&#39;:</span><br><span class="line">  case &#39;fish&#39;:</span><br><span class="line">    console.log(&#39;fish age is 1.&#39;)</span><br><span class="line">    break</span><br><span class="line">  default:</span><br><span class="line">    console.log(&#39;什么也没找到&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="arr-every"><a href="#arr-every" class="headerlink" title="arr.every()"></a>arr.every()</h2><p>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p>
<p><strong>注意</strong>：若收到一个空数组，此方法在一切情况下都会返回 true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> score = [<span class="number">16</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>]</span><br><span class="line"><span class="keyword">const</span> res = score.every(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">9</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="arr-some"><a href="#arr-some" class="headerlink" title="arr.some()"></a>arr.some()</h2><p>测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p>
<h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.some(callback(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure>

<p><strong>callback</strong> 生成新数组元素的函数，使用三个参数：</p>
<ul>
<li><p>element 数组中正在处理的元素。</p>
</li>
<li><p>index 可选 数组中正在处理的元素的索引值。</p>
</li>
<li><p>array 可选 some 方法调用的数组。</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选 执行 callback 函数时值被用作this。</p>
<h2 id="arr-fill"><a href="#arr-fill" class="headerlink" title="arr.fill()"></a>arr.fill()</h2><p>用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p>
<h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p><code>arr.fill(value[, start[, end]])</code></p>
<p><strong>value</strong> 用来填充数组元素的值。</p>
<p><strong>start</strong> 可选，起始索引，默认值为 0。</p>
<p><strong>end</strong> 可选，终止索引，默认值为 this.length。</p>
<h3 id="常见问题-4"><a href="#常见问题-4" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p><code>fill</code> 方法会改变数组本身。</p>
</li>
<li><p>start 和 end 参数是可选的, 其默认值分别为 0 和 this 对象的 length 属性值。如果 start 是个负数, 则开始索引会被自动计算成为 length+start, 其中 length 是 this 对象的 length 属性值。如果 end 是个负数, 则结束索引会被自动计算成为 length+end</p>
</li>
<li><p><code>fill</code> 方法可以用于非数组对象。(???)</p>
</li>
<li><p>当一个对象被传递给 fill 方法的时候, 填充数组的是这个对象的引用。</p>
</li>
</ol>
<h2 id="arr-filter"><a href="#arr-filter" class="headerlink" title="arr.filter()"></a>arr.filter()</h2><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p>
<h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><p><code>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</code></p>
<p><strong>callback</strong> 用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。它接受以下三个参数：</p>
<ul>
<li><p>element 数组中当前正在处理的元素。</p>
</li>
<li><p>index 可选 正在处理的元素在数组中的索引。</p>
</li>
<li><p>array 可选 调用了 filter 的数组本身。</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选, 执行 callback 时，用于 this 的值。</p>
<h2 id="arr-find"><a href="#arr-find" class="headerlink" title="arr.find()"></a>arr.find()</h2><p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>
<h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><p><code>arr.find(callback[, thisArg])</code></p>
<p><strong>callback</strong> 在数组每一项上执行的函数，接收 3 个参数：</p>
<ul>
<li><p>element 当前遍历到的元素。</p>
</li>
<li><p>index 可选 当前遍历到的索引。</p>
</li>
<li><p>array 可选 数组本身。</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选 执行回调时用作 this 的对象。</p>
<h2 id="arr-findIndex"><a href="#arr-findIndex" class="headerlink" title="arr.findIndex()"></a>arr.findIndex()</h2><p>返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p>
<h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><p><code>arr.findIndex(callback[, thisArg])</code></p>
<p><strong>callback</strong> 针对数组中的每个元素, 都会执行该回调函数, 执行时会自动传入下面三个参数:</p>
<ul>
<li><p>element 当前元素。</p>
</li>
<li><p>index 当前元素的索引。</p>
</li>
<li><p>array 调用 findIndex 的数组。</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选。执行 callback 时作为 this 对象的值。</p>
<h2 id="arr-map"><a href="#arr-map" class="headerlink" title="arr.map()"></a>arr.map()</h2><p>创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>
<h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>

<p><strong>callback</strong> 生成新数组元素的函数，使用三个参数：</p>
<ul>
<li><p>currentValue callback 数组中正在处理的当前元素。</p>
</li>
<li><p>index 可选 callback 数组中正在处理的当前元素的索引。</p>
</li>
<li><p>array 可选 map 方法调用的数组。</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选 执行 callback 函数时值被用作 this。</p>
<h2 id="arr-flatMap"><a href="#arr-flatMap" class="headerlink" title="arr.flatMap()"></a>arr.flatMap()</h2><p>首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</p>
<h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.flatMap(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return element for new_array</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>

<p><strong>callback</strong> 可以生成一个新数组中的元素的函数，可以传入三个参数：</p>
<ul>
<li><p>currentValue 当前正在数组中处理的元素</p>
</li>
<li><p>index 可选 数组中正在处理的当前元素的索引。</p>
</li>
<li><p>array 可选 被调用的 map 数组</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选 执行 callback 函数时 使用的 this 值。</p>
<h2 id="arr-forEach"><a href="#arr-forEach" class="headerlink" title="arr.forEach()"></a>arr.forEach()</h2><p>对数组的每个元素执行一次给定的函数。</p>
<h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><p><code>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</code></p>
<p><strong>callback</strong> 为数组中每个元素执行的函数，该函数接收一至三个参数：</p>
<ul>
<li><p>currentValue 数组中正在处理的当前元素。</p>
</li>
<li><p>index 可选 数组中正在处理的当前元素的索引。</p>
</li>
<li><p>array 可选 forEach() 方法正在操作的数组。</p>
</li>
</ul>
<p><strong>thisArg</strong> 可选 当执行回调函数 callback 时，用作 this 的值。</p>
<h3 id="常见问题-5"><a href="#常见问题-5" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>forEach 无法跳出循环</li>
</ol>
<p>除了抛出异常以外，没有办法中止或跳出 forEach() 循环。只要条件允许，也可以使用 filter() 提前过滤出需要遍历的部分，再用 forEach() 处理。</p>
<p>若你需要提前终止循环，你可以使用：</p>
<p><code>for...of</code> / <code>for...in</code> 循环</p>
<p><code>arr.every()</code></p>
<p><code>arr.some()</code></p>
<p><code>arr.find()</code></p>
<p><code>arr.findIndex()</code></p>
<p>这些数组方法则可以对数组元素判断，以便确定是否需要继续遍历：</p>
<p><code>every()</code></p>
<p><code>some()</code></p>
<p><code>find()</code></p>
<p><code>findIndex()</code></p>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>MIDI-Keyboard</title>
    <url>//project/midi-keyboard/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Windows</tag>
        <tag>Music</tag>
        <tag>Node.js</tag>
        <tag>Electron</tag>
        <tag>MIDI</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘 KeyCode 对照表</title>
    <url>//frontend/flow/keycode/</url>
    <content><![CDATA[<style>
table tr td:nth-of-type(2n-1){
  background:#fbfbfb
}
</style>

<h2 id="字母数字键键码值"><a href="#字母数字键键码值" class="headerlink" title="字母数字键键码值"></a>字母数字键键码值</h2><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">65</td>
<td align="center">J</td>
<td align="center">74</td>
<td align="center">S</td>
<td align="center">83</td>
<td align="center">1</td>
<td align="center">49</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">66</td>
<td align="center">K</td>
<td align="center">75</td>
<td align="center">T</td>
<td align="center">84</td>
<td align="center">2</td>
<td align="center">50</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">67</td>
<td align="center">L</td>
<td align="center">76</td>
<td align="center">U</td>
<td align="center">85</td>
<td align="center">3</td>
<td align="center">51</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">68</td>
<td align="center">M</td>
<td align="center">77</td>
<td align="center">V</td>
<td align="center">86</td>
<td align="center">4</td>
<td align="center">52</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">69</td>
<td align="center">N</td>
<td align="center">78</td>
<td align="center">W</td>
<td align="center">87</td>
<td align="center">5</td>
<td align="center">53</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">70</td>
<td align="center">O</td>
<td align="center">79</td>
<td align="center">X</td>
<td align="center">88</td>
<td align="center">6</td>
<td align="center">54</td>
</tr>
<tr>
<td align="center">G</td>
<td align="center">71</td>
<td align="center">P</td>
<td align="center">80</td>
<td align="center">Y</td>
<td align="center">89</td>
<td align="center">7</td>
<td align="center">55</td>
</tr>
<tr>
<td align="center">H</td>
<td align="center">72</td>
<td align="center">Q</td>
<td align="center">81</td>
<td align="center">Z</td>
<td align="center">90</td>
<td align="center">8</td>
<td align="center">56</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">73</td>
<td align="center">R</td>
<td align="center">82</td>
<td align="center">0</td>
<td align="center">48</td>
<td align="center">9</td>
<td align="center">57</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="数字键盘键码值"><a href="#数字键盘键码值" class="headerlink" title="数字键盘键码值"></a>数字键盘键码值</h2><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">96</td>
<td align="center">8</td>
<td align="center">104</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">97</td>
<td align="center">9</td>
<td align="center">105</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">98</td>
<td align="center">*</td>
<td align="center">106</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">99</td>
<td align="center">+</td>
<td align="center">107</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">100</td>
<td align="center">Enter</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">101</td>
<td align="center">-</td>
<td align="center">109</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">102</td>
<td align="center">.</td>
<td align="center">110</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">103</td>
<td align="center">/</td>
<td align="center">111</td>
</tr>
</tbody></table>
<h2 id="功能键键码值"><a href="#功能键键码值" class="headerlink" title="功能键键码值"></a>功能键键码值</h2><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">F1</td>
<td align="center">112</td>
<td align="center">F7</td>
<td align="center">118</td>
</tr>
<tr>
<td align="center">F2</td>
<td align="center">113</td>
<td align="center">F8</td>
<td align="center">119</td>
</tr>
<tr>
<td align="center">F3</td>
<td align="center">114</td>
<td align="center">F9</td>
<td align="center">120</td>
</tr>
<tr>
<td align="center">F4</td>
<td align="center">115</td>
<td align="center">F10</td>
<td align="center">121</td>
</tr>
<tr>
<td align="center">F5</td>
<td align="center">116</td>
<td align="center">F11</td>
<td align="center">122</td>
</tr>
<tr>
<td align="center">F6</td>
<td align="center">117</td>
<td align="center">F12</td>
<td align="center">123</td>
</tr>
</tbody></table>
<h2 id="控制键键码值"><a href="#控制键键码值" class="headerlink" title="控制键键码值"></a>控制键键码值</h2><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
<th align="center">按键</th>
<th align="center">键码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BackSpace</td>
<td align="center">8</td>
<td align="center">Esc</td>
<td align="center">27</td>
<td align="center">Right Arrow</td>
<td align="center">39</td>
<td align="center">-_</td>
<td align="center">189</td>
</tr>
<tr>
<td align="center">Tab</td>
<td align="center">9</td>
<td align="center">Spacebar</td>
<td align="center">32</td>
<td align="center">Dw Arrow</td>
<td align="center">40</td>
<td align="center">.&gt;</td>
<td align="center">190</td>
</tr>
<tr>
<td align="center">Clear</td>
<td align="center">12</td>
<td align="center">Page Up</td>
<td align="center">33</td>
<td align="center">Insert</td>
<td align="center">45</td>
<td align="center">/?</td>
<td align="center">191</td>
</tr>
<tr>
<td align="center">Enter</td>
<td align="center">13</td>
<td align="center">Page Down</td>
<td align="center">34</td>
<td align="center">Delete</td>
<td align="center">46</td>
<td align="center">`~</td>
<td align="center">192</td>
</tr>
<tr>
<td align="center">Shift</td>
<td align="center">16</td>
<td align="center">End</td>
<td align="center">35</td>
<td align="center">Num Lock</td>
<td align="center">144</td>
<td align="center">[{</td>
<td align="center">219</td>
</tr>
<tr>
<td align="center">Control</td>
<td align="center">17</td>
<td align="center">Home</td>
<td align="center">36</td>
<td align="center">;:</td>
<td align="center">186</td>
<td align="center">╲┆</td>
<td align="center">220</td>
</tr>
<tr>
<td align="center">Alt</td>
<td align="center">18</td>
<td align="center">Left Arrow</td>
<td align="center">37</td>
<td align="center">=+</td>
<td align="center">187</td>
<td align="center">]}</td>
<td align="center">221</td>
</tr>
<tr>
<td align="center">Cape Lock</td>
<td align="center">20</td>
<td align="center">Up Arrow</td>
<td align="center">38</td>
<td align="center">,&lt;</td>
<td align="center">188</td>
<td align="center">‘“</td>
<td align="center">222</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Keyboard</tag>
        <tag>KeyCode</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式、设计原则和反模式</title>
    <url>//frontend/base/anti-patterns/</url>
    <content><![CDATA[<h2 id="1-设计模式"><a href="#1-设计模式" class="headerlink" title="1. 设计模式"></a>1. 设计模式</h2><h3 id="1-1-什么是设计模式？"><a href="#1-1-什么是设计模式？" class="headerlink" title="1.1 什么是设计模式？"></a>1.1 什么是设计模式？</h3><p>模式是在某种情境下，针对某种问题的某种解决方案。<br>设计模式算是一种经验复用。</p>
<h3 id="1-2-为什么要使用设计模式？"><a href="#1-2-为什么要使用设计模式？" class="headerlink" title="1.2 为什么要使用设计模式？"></a>1.2 为什么要使用设计模式？</h3><ol>
<li><p>开发小组不需要重新设计解决方案来解决已经被前人解决过的问题。如此可以节省很多设计开发时间。</p>
</li>
<li><p>当开发小组讨论设计的时候，使用设计模式可以使大家更好了理解问题所在和解决方案，而且对解决方案有一个比较统一的认知。</p>
</li>
<li><p>设计模式本身已经通过了大量的实际运用和验证，其设计质量和实用价值有很好的保证。</p>
</li>
<li><p>设计模式本身有健全的文档，可以一定程度上简化撰写开发文档。</p>
</li>
</ol>
<a id="more"></a>

<h2 id="2-设计模式的分类"><a href="#2-设计模式的分类" class="headerlink" title="2. 设计模式的分类"></a>2. 设计模式的分类</h2><h3 id="2-1-创建型"><a href="#2-1-创建型" class="headerlink" title="2.1. 创建型"></a>2.1. 创建型</h3><p>涉及到将对象实例化。</p>
<p>如：单例模式，工厂模式 </p>
<h3 id="2-2-结构型"><a href="#2-2-结构型" class="headerlink" title="2.2. 结构型"></a>2.2. 结构型</h3><p>把类或对象组合到更大的结构中。 </p>
<p>如：装饰器，代理模式，适配器模式 </p>
<h3 id="2-3-行为型"><a href="#2-3-行为型" class="headerlink" title="2.3. 行为型"></a>2.3. 行为型</h3><p>涉及到类和对象如何交互及分配职责。 </p>
<p>模板方法，观察者模式，策略模式</p>
<h2 id="3-什么是设计原则"><a href="#3-什么是设计原则" class="headerlink" title="3. 什么是设计原则"></a>3. 什么是设计原则</h2><h3 id="3-1-封装变化"><a href="#3-1-封装变化" class="headerlink" title="3.1. 封装变化"></a>3.1. 封装变化</h3><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起 </p>
<h3 id="3-2-针对接口编程"><a href="#3-2-针对接口编程" class="headerlink" title="3.2. 针对接口编程"></a>3.2. 针对接口编程</h3><p>针对接口编程，而不是针对实现编程。此处的接口是指超类型，针对接口编程的意思是利用多态的能力，使得实际的类型可以动态绑定到真正需要的实现上。 </p>
<h3 id="3-3-多用组合"><a href="#3-3-多用组合" class="headerlink" title="3.3. 多用组合"></a>3.3. 多用组合</h3><p>多用组合，少用继承。组合比继承更灵活。 </p>
<h3 id="3-4-松耦合设计"><a href="#3-4-松耦合设计" class="headerlink" title="3.4. 松耦合设计"></a>3.4. 松耦合设计</h3><p>为了交互对象之间的松耦合设计而努力。这样会使我们的系统更有弹性，在应对新的需求时，由于对象之间的相互依赖降低到最低，从而需要修改的量最小。 </p>
<h3 id="3-5-开闭原则"><a href="#3-5-开闭原则" class="headerlink" title="3.5. 开闭原则"></a>3.5. 开闭原则</h3><p>开闭原则：类应该对扩展开放，对修改关闭。意思是在不修改现有类的代码情况下，扩展类可以满足新的需求。因为已有代码是精心设计的，修改容易产生BUG，而且精心设计的代码，是易于扩展的。 </p>
<h3 id="3-6-依赖导致原则"><a href="#3-6-依赖导致原则" class="headerlink" title="3.6. 依赖导致原则"></a>3.6. 依赖导致原则</h3><p>依赖导致原则：要依赖抽象，不要依赖具体类。 </p>
<h3 id="3-7-最少知识原则"><a href="#3-7-最少知识原则" class="headerlink" title="3.7. 最少知识原则"></a>3.7. 最少知识原则</h3><p>最少知识原则：只和你的密友谈话。减少对象之间的交互。从而将受到影响而导致修改的可能性降到最低。 </p>
<h3 id="3-8-高层级调用"><a href="#3-8-高层级调用" class="headerlink" title="3.8. 高层级调用"></a>3.8. 高层级调用</h3><p>别调用我，我会调用你。这是组合高层组件和低层组件的一种原则。高层组件决定什么时候以及如何调用低层组件。低层组件只是挂在高层组件之下。 </p>
<h3 id="3-9-单一责任原则"><a href="#3-9-单一责任原则" class="headerlink" title="3.9. 单一责任原则"></a>3.9. 单一责任原则</h3><p>对于一个模块，或者一个类来说，这个模块或者这个类应该只对系统/软件的一个功能负责，而且该责任应该被该类完全封装起来。</p>
<h2 id="4-常用的模式类型"><a href="#4-常用的模式类型" class="headerlink" title="4. 常用的模式类型"></a>4. 常用的模式类型</h2><h3 id="4-1-策略模式"><a href="#4-1-策略模式" class="headerlink" title="4.1. 策略模式"></a>4.1. 策略模式</h3><p>定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p>
<h3 id="4-2-观察者模式"><a href="#4-2-观察者模式" class="headerlink" title="4.2. 观察者模式"></a>4.2. 观察者模式</h3><p>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 </p>
<h3 id="4-3-装饰器模式"><a href="#4-3-装饰器模式" class="headerlink" title="4.3. 装饰器模式"></a>4.3. 装饰器模式</h3><p>动态的将责任附加到对象上，若要扩展功能，装饰器提供了比继承更有弹性的替代方案。 </p>
<h3 id="4-4-工厂模式"><a href="#4-4-工厂模式" class="headerlink" title="4.4. 工厂模式"></a>4.4. 工厂模式</h3><p>简单的工厂模式，就是把对象的创建提出来单独处理。而标准的工厂模式，定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。</p>
<p>工厂方法让类把实例化推迟到子类。 </p>
<h3 id="4-5-抽象工厂模式"><a href="#4-5-抽象工厂模式" class="headerlink" title="4.5. 抽象工厂模式"></a>4.5. 抽象工厂模式</h3><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确确定具体类。 </p>
<h3 id="4-6-单例模式"><a href="#4-6-单例模式" class="headerlink" title="4.6. 单例模式"></a>4.6. 单例模式</h3><p>确保一个类只有一个实例，并提供一个全局访问点。 </p>
<h3 id="4-7-命令模式"><a href="#4-7-命令模式" class="headerlink" title="4.7. 命令模式"></a>4.7. 命令模式</h3><p>将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其它对象。</p>
<p>命令模式也支持可撤销的操作。 </p>
<h3 id="4-8-适配器模式"><a href="#4-8-适配器模式" class="headerlink" title="4.8. 适配器模式"></a>4.8. 适配器模式</h3><p>将一个类的接口，转换成客户期望的另一个接口。</p>
<p>适配器让原本接口不兼容的类可以合作无间。 </p>
<h3 id="4-9-外观模式"><a href="#4-9-外观模式" class="headerlink" title="4.9. 外观模式"></a>4.9. 外观模式</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。 </p>
<h3 id="4-10-模板方法模式"><a href="#4-10-模板方法模式" class="headerlink" title="4.10. 模板方法模式"></a>4.10. 模板方法模式</h3><p>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。</p>
<p>模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。 </p>
<h3 id="4-11-迭代器模式"><a href="#4-11-迭代器模式" class="headerlink" title="4.11. 迭代器模式"></a>4.11. 迭代器模式</h3><p>提供一种方法顺序访问一个聚合对象中的各个元素，而不暴露其内部的表示。 </p>
<h3 id="4-12-组合模式"><a href="#4-12-组合模式" class="headerlink" title="4.12. 组合模式"></a>4.12. 组合模式</h3><p>允许你将对象组合成树形结构来表现『整体/部分』层次结构。</p>
<p>组合能让客户以一致的方式处理个别对象以及对象组合。 </p>
<h3 id="4-13-状态模式"><a href="#4-13-状态模式" class="headerlink" title="4.13. 状态模式"></a>4.13. 状态模式</h3><p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。 </p>
<h3 id="4-14-代理模式"><a href="#4-14-代理模式" class="headerlink" title="4.14. 代理模式"></a>4.14. 代理模式</h3><p>为另一个对象提供一个替身或占位符以访问这个对象。</p>
<h2 id="5-反模式"><a href="#5-反模式" class="headerlink" title="5. 反模式"></a>5. 反模式</h2><h3 id="5-1-什么是反模式"><a href="#5-1-什么是反模式" class="headerlink" title="5.1 什么是反模式"></a>5.1 什么是反模式</h3><p>反模式是指在对经常面对的问题经常使用的低效、不良、或者有待优化的设计模式/方法。甚至，反模式也可以是一种错误的开发思想/理念。</p>
<h3 id="5-2-常见的反模式案例"><a href="#5-2-常见的反模式案例" class="headerlink" title="5.2. 常见的反模式案例"></a>5.2. 常见的反模式案例</h3><p><strong>软件膨胀</strong>：随着版本的升级，软件越来越消耗系统资源。</p>
<p><strong>反抽象</strong>：需要的功能并不暴露给用户，导致用户要在较高层次重新实现一些功能。</p>
<p><strong>万能类</strong>︰在一个类的设计中，聚集了太多的函数。</p>
<p><strong>硬编码(Hard Code)</strong>：或称写死。在实现某系统用途上设死该系统的运作环境。</p>
<p><strong>超布尔逻辑</strong>︰不必要的比较，或是过于抽象的布尔计算。</p>
<p><strong>剪贴编程(Copy-n-paste programming)</strong>：宁愿拷贝(并修改)现存代码而非创造通用的解决方案。</p>
<h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%8F%8D%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">反模式wiki</a></li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>反模式</tag>
        <tag>设计模式</tag>
        <tag>设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>Canvas 基础</title>
    <url>//frontend/base/canvas/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>canvas 元素可被用来通过 JavaScript（Canvas API 或 WebGL API）绘制图形及图形动画。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><strong>width</strong>：该元素占用空间的宽度，以 CSS 像素（px）表示，默认为 300。</p>
<p><strong>height</strong>：该元素占用空间的高度，以 CSS 像素（px）表示，默认为 150。</p>
<h3 id="Canvas-和-SVG-的区别是什么？"><a href="#Canvas-和-SVG-的区别是什么？" class="headerlink" title="Canvas 和 SVG 的区别是什么？"></a>Canvas 和 SVG 的区别是什么？</h3><p>一句话总结：都是 2D 做图，svg 是矢量图，canvas 是位图。</p>
<p>svg 适合用于渲染图标 logo；Canvas 是逐像素进行渲染的，适合用于渲染游戏。</p>
<p><strong>svg</strong>: 一种使用 XML 描述 2D 图形的语言。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>canvas</strong>: 由于是位图，当 w 或 h 有小数时，会产生虚边。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300px"</span> <span class="attr">height</span>=<span class="string">"100px"</span>&gt;</span> <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span></span><br><span class="line"><span class="actionscript">  ctx.fillStyle = <span class="string">'red'</span></span></span><br><span class="line">  ctx.fillRect(0, 0, 300, 100)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo1" target="_blank" rel="noopener">查看 demo</a></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo2" target="_blank" rel="noopener">查看 demo</a></p>
<h3 id="1-坐标轴"><a href="#1-坐标轴" class="headerlink" title="1. 坐标轴"></a>1. 坐标轴</h3><p>canvas 的<strong>默认</strong>原点在画布的左上角。x = 0, y = 0。</p>
<p>X 轴向右延伸，Y 轴向下延伸。在 canvas 中顺时针为正，逆时针为负。</p>
<p><img src="/images/canvas/coordinate.png" alt=""></p>
<p>改变 Y 轴方向：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改变Y轴方向</span></span><br><span class="line">context.translate(<span class="number">0</span>, offsetY)</span><br><span class="line">context.scale(<span class="number">1</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/images/canvas/coordinate2.png" alt=""></p>
<h3 id="2-HTMLCanvasElement"><a href="#2-HTMLCanvasElement" class="headerlink" title="2. HTMLCanvasElement"></a>2. HTMLCanvasElement</h3><p>DOM canvas 元素暴露了 <strong>HTMLCanvasElement</strong> 接口,该接口提供了用来操作一个 <strong>canvas</strong> 元素布局和呈现的属性和方法。HTMLCanvasElement 接口继承了 element 接口的属性和方法。</p>
<ul>
<li><p><code>HTMLCanvasElement.width</code> canvas 元素在 html 文档中的宽度</p>
</li>
<li><p><code>HTMLCanvasElement.height</code> canvas 元素在 html 文档中的高度</p>
</li>
</ul>
<h3 id="3-canvas-toDataURL"><a href="#3-canvas-toDataURL" class="headerlink" title="3. canvas.toDataURL()"></a>3. canvas.toDataURL()</h3><ul>
<li>如果画布的高度或宽度是 0，那么会返回字符串“data:,”。</li>
<li>如果传入的类型非“image/png”，但是返回的值以“data:image/png”开头，那么该传入的类型是不支持的。</li>
<li>Chrome 支持“image/webp”类型。</li>
</ul>
<h4 id="3-1-Data-URLs"><a href="#3-1-Data-URLs" class="headerlink" title="3.1. Data URLs"></a>3.1. Data URLs</h4><p>即前缀为 data: 协议的 URL，其允许内容创建者向文档中嵌入小文件。</p>
<p>Data URLs 由四个部分组成：前缀(data:)、指示数据类型的 MIME 类型、如果非文本则为可选的 base64 标记、数据本身：</p>
<p><code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></p>
<p>mediatype 是个 MIME 类型的字符串，例如 “image/jpeg” 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII</p>
<p>如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行 base64 编码之后再进行嵌入。</p>
<p>下面是一些示例：</p>
<ol>
<li><p>简单的 text/plain 类型数据</p>
<p><code>data:,Hello%2C%20World!</code></p>
</li>
<li><p>上一条示例的 base64 编码版本</p>
<p><code>data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</code></p>
</li>
<li><p>一个 HTML 文档源代码 <code>&lt;h1&gt;Hello, World&lt;/h1&gt;</code></p>
<p><code>data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</code></p>
</li>
<li><p>一个会执行 JavaScript alert 的 HTML 文档。注意 script 标签必须封闭。</p>
<p><code>data:text/html,&lt;script&gt;alert(&#39;hi&#39;);&lt;/script&gt;</code></p>
</li>
</ol>
<h4 id="3-2-语法"><a href="#3-2-语法" class="headerlink" title="3.2. 语法"></a>3.2. 语法</h4><ul>
<li><p><code>canvas.toDataURL(type, encoderOptions)</code> 返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为 96dpi。</p>
<p><strong>type</strong>: 可选, 图片格式，默认为 image/png。</p>
<p><strong>encoderOptions</strong>： 可选，在指定图片格式为 image/jpeg 或 image/webp 的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。</p>
</li>
</ul>
<h3 id="4-canvas-toBlob"><a href="#4-canvas-toBlob" class="headerlink" title="4. canvas.toBlob()"></a>4. canvas.toBlob()</h3><p>创造 Blob 对象，用以展示 canvas 上的图片；这个图片文件可以被缓存或保存到本地，由用户代理端自行决定。如不特别指明，图片的类型默认为 image/png，分辨率为 96dpi。第三个参数用于针对 image/jpeg 格式的图片进行输出图片的质量设置。</p>
<h4 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1. 语法"></a>4.1. 语法</h4><ul>
<li><code>canvas.toBlob(callback, type, encoderOptions)</code></li>
</ul>
<p><strong>callback</strong>：回调函数，可获得一个单独的 Blob 对象参数。</p>
<p><strong>type</strong>： 可选，DOMString 类型，指定图片格式，默认格式为 image/png。</p>
<p><strong>encoderOptions</strong>： 可选，Number 类型，值在 0 与 1 之间，当请求图片格式为 image/jpeg 或者 image/webp 时用来指定图片展示质量。如果这个参数的值不在指定类型与范围之内，则使用默认值，其余参数将被忽略。</p>
<h3 id="5-canvas-getContext"><a href="#5-canvas-getContext" class="headerlink" title="5. canvas.getContext()"></a>5. canvas.getContext()</h3><p><code>canvas.getContext()</code> 方法返回 canvas 的上下文，如果上下文没有定义则返回 null。在同一个 canvas 上以相同的 contextType 多次调用此方法只会返回同一个上下文。</p>
<p>当我们想要实现一些 ctx 目前没有的方法和属性时，我们可以通过 <strong>ctx.prototype</strong> 增加新的自定义属性和方法。即<code>ctx.prototype.新属性</code>、<code>ctx.prototype.新方法</code>。注意自定义的新属性和新方法不能和原生的重名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加新属性, 角度 1° 的值</span></span><br><span class="line">ctx.prototype.angleValue = <span class="built_in">Math</span>.PI / <span class="number">180</span></span><br><span class="line"><span class="comment">// 增加新方法，清空画布</span></span><br><span class="line">ctx.prototype.clearCanvas(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to do Something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(contextType)</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(contextType, contextAttributes)</span><br></pre></td></tr></table></figure>

<p><strong>contextType</strong></p>
<ul>
<li><p><code>2d</code>： 二维平面效果渲染</p>
</li>
<li><p><code>webgl</code>：三维立体效果渲染</p>
</li>
<li><p><code>bitmaprenderer</code>：<code>TODO:!暂时未知使用方法!</code></p>
</li>
</ul>
<p><strong>contextAttributes</strong></p>
<p>ctxType = ‘2d’:</p>
<ul>
<li><code>alpha</code>: boolean 值表明 canvas 包含一个 alpha 通道. 如果设置为 false, 浏览器将认为 canvas 背景总是不透明的, 这样可以加速绘制透明的内容和图片.</li>
</ul>
<p>ctxType = ‘webgl’:</p>
<ul>
<li><p><code>alpha</code>: boolean 值表明 canvas 包含一个 alpha 缓冲区。</p>
</li>
<li><p><code>antialias</code>: boolean 值表明是否开启抗锯齿。</p>
</li>
<li><p><code>depth</code>: boolean 值表明绘制缓冲区包含一个深度至少为 16 位的缓冲区。</p>
</li>
<li><p><code>failIfMajorPerformanceCaveat</code>: 表明在一个系统性能低的环境是否创建该上下文的 boolean 值。</p>
</li>
<li><p><code>powerPreference</code>: 指示浏览器在运行 WebGL 上下文时使用相应的 GPU 电源配置。”default”:自动选择，默认值。”high-performance”: 高性能模式。”low-power”: 节能模式。</p>
</li>
<li><p><code>premultipliedAlpha</code>: 表明排版引擎讲假设绘制缓冲区包含预混合 alpha 通道的 boolean 值。</p>
</li>
<li><p><code>preserveDrawingBuffer</code>: 如果这个值为 true 缓冲区将不会被清除，会保存下来，直到被清除或被使用者覆盖。</p>
</li>
<li><p><code>stencil</code>: 表明绘制缓冲区包含一个深度至少为 8 位的模版缓冲区 boolean 值。</p>
</li>
</ul>
<h2 id="绘图方法"><a href="#绘图方法" class="headerlink" title="绘图方法"></a>绘图方法</h2><h3 id="1-设置绘图环境和样式"><a href="#1-设置绘图环境和样式" class="headerlink" title="1. 设置绘图环境和样式"></a>1. 设置绘图环境和样式</h3><ul>
<li><code>ctx.canvas</code> 上下文关联的 HTMLCanvasElement 对象。如果没有 <code>&lt;canvas&gt;</code> 元素与之对应，对象值为 null 。可以使用<code>ctx.canvas.width</code>来获取 canvas 宽度，或者<code>ctx.canvas.width=&#39;500px&#39;</code>来重设新置 canvas 宽度。</li>
</ul>
<h4 id="1-1-设置填充和描边颜色"><a href="#1-1-设置填充和描边颜色" class="headerlink" title="1.1. 设置填充和描边颜色"></a>1.1. 设置填充和描边颜色</h4><ul>
<li><p><code>ctx.fillStyle</code> 设置填充颜色, 接受三种类型参数：color（颜色字符串）、gradient（渐变对象）、pattern（图案对象）</p>
</li>
<li><p><code>ctx.strokeStyle</code> 设置描边颜色，接受三种类型参数，同上。</p>
</li>
</ul>
<h4 id="1-2-设置线型样式"><a href="#1-2-设置线型样式" class="headerlink" title="1.2. 设置线型样式"></a>1.2. 设置线型样式</h4><ul>
<li><p><code>ctx.lineCap</code> 线段端点的样式类型 <code>butt</code>方形(默认)、<code>round</code>圆形（半径是线段的宽度）、<code>square</code>矩形（高度是线段厚度一半的）</p>
</li>
<li><p><code>ctx.lineJoin</code> 线段拐角的样式类型 <code>miter</code>尖角(默认)、<code>round</code>圆角（半径是线段的宽度）、<code>bevel</code>平角</p>
</li>
<li><p><code>ctx.lineWidth</code> 设置线条宽度，默认对齐方式为居中对齐，默认为 1px</p>
<p>线宽对齐方式参考 PS：</p>
<p><img src="/images/canvas/line_style.jpg" alt=""></p>
</li>
<li><p><code>ctx.miterLimit</code> 斜接面限制比例的的数字。 0、负数、Infinity 和 NaN 都会被忽略。只当 <code>ctx.lineJoin=&#39;miter&#39;</code>时才有效。</p>
</li>
</ul>
<h4 id="1-3-设置字体和文字对齐"><a href="#1-3-设置字体和文字对齐" class="headerlink" title="1.3. 设置字体和文字对齐"></a>1.3. 设置字体和文字对齐</h4><ul>
<li><p><code>ctx.font</code> 设置文本样式，参数参考 css font 属性。如：<code>ctx.font = &#39;10px sans-serif&#39;</code></p>
</li>
<li><p><code>ctx.textAlign</code> 设置文本对齐方式，”left” || “right” || “center” || “start”（默认） || “end”。当设置为”center”时，fillText 的 xy 值为中点。</p>
</li>
<li><p><code>ctx.textBaseline</code> 设置文本的基线对齐方式（垂直方向），”top” || “hanging” || “middle” || “alphabetic”（默认） || “ideographic” || “bottom”。</p>
</li>
</ul>
<h4 id="1-4-设置阴影样式"><a href="#1-4-设置阴影样式" class="headerlink" title="1.4. 设置阴影样式"></a>1.4. 设置阴影样式</h4><ul>
<li><p><code>ctx.shadowColor</code> 设置阴影颜色，只能接受 color 类型的颜色字符串。注意，阴影颜色可以通过颜色类型 rgba 或 hsla 设置阴影的透明度，但当透明度完全为 0 时，阴影不会被绘制。</p>
</li>
<li><p><code>ctx.shadowBlur</code> 设置阴影模糊程度，默认为 0。float 类型，即负数、 Infinity 或者 NaN 都会被忽略。当 blur = 0，且 offsetX 或 offsetY 的值不为 0 时，阴影仍然会被绘制，只是没有模糊效果。</p>
</li>
<li><p><code>ctx.shadowOffsetX</code> 设置阴影水平偏移距离，默认为 0。float 类型。</p>
</li>
<li><p><code>ctx.shadowOffsetY</code> 设置阴影垂直偏移距离，默认为 0。float 类型。</p>
</li>
</ul>
<h4 id="1-5-设置全局透明度"><a href="#1-5-设置全局透明度" class="headerlink" title="1.5. 设置全局透明度"></a>1.5. 设置全局透明度</h4><ul>
<li><code>ctx.globalAlpha</code> 设置图形和图片透明度的属性。 数值的范围从 0.0 （完全透明）到 1.0 （完全不透明）。 默认值是 1.0。 如果数值不在范围内，包括 Infinity 和 NaN ，无法赋值，并且 globalAlpha 会保持原有的数值。</li>
</ul>
<h4 id="1-6-设置图层混合模式"><a href="#1-6-设置图层混合模式" class="headerlink" title="1.6. 设置图层混合模式"></a>1.6. 设置图层混合模式</h4><ul>
<li><p><code>ctx.globalCompositeOperation</code> 设置合成操作的类型。类型可选：source-over、source-in、source-out、source-atop、destination-over、destination-in、destination-out、destination-atop、lighter、copy、xor（差集）、multiply、screen、overlay、darken、lighten、color-dodge、color-burn、hard-light、soft-light、difference、exclusion、hue、saturation、color、luminosity。可理解为 PS 中的图层混合模式 + AI 中的路径查找器。</p>
<p><img src="/images/canvas/composite.png" alt=""></p>
</li>
</ul>
<h4 id="1-7-设置图案样式"><a href="#1-7-设置图案样式" class="headerlink" title="1.7. 设置图案样式"></a>1.7. 设置图案样式</h4><ul>
<li><p><code>ctx.createPattern(image, repetition)</code> 根据传入的图片，创建一个可重复的图案。返回 <strong>CanvasPattern</strong> 对象，不透明。创建完成后，可以使用 <code>CanvasPattern.setTransform()</code>方法对图案进行变形。</p>
<p><strong>image</strong>：作为重复图像源的 <strong>CanvasImageSource</strong> 对象。可以是下列之一</p>
<ul>
<li>HTMLImageElement (<code>&lt;img&gt;</code>),</li>
<li>HTMLVideoElement (<code>&lt;video&gt;</code>),</li>
<li>HTMLCanvasElement (<code>&lt;canvas&gt;</code>),</li>
<li>CanvasRenderingContext2D,</li>
<li>ImageBitmap,</li>
<li>ImageData,</li>
<li>Blob.</li>
</ul>
<p><strong>repetition</strong>：DOMString，指定如何重复图像。如果为空字符串 (‘’) 或 null (但不是 undefined)，repetition 将被当作”repeat”。允许的值有：</p>
<ul>
<li>“repeat” (both directions),</li>
<li>“repeat-x” (horizontal only),</li>
<li>“repeat-y” (vertical only),</li>
<li>“no-repeat” (neither).</li>
</ul>
</li>
<li><p><code>pattern.setTransform(matrix)</code> 使用 SVGMatrix 对象作为图案的变换矩阵，并在此图案上调用它。</p>
</li>
</ul>
<h4 id="1-8-设置渐变样式"><a href="#1-8-设置渐变样式" class="headerlink" title="1.8. 设置渐变样式"></a>1.8. 设置渐变样式</h4><ul>
<li><p><code>ctx.createLinearGradient(x0, y0, x1, y1)</code> 创建一个沿参数坐标指定的直线的渐变。起点（x0, y0），终点（x1, y1）。返回 <strong>CanvasGradient</strong> 对象。<br>改变线性渐变的方向有两种方式：1️⃣ 调换 addColorStop 0 和 1 对应的值；2️⃣ 调换 createLinearGradient 创建的起点和终点，即（x1, y1, x0, y0）。<br>我们知道，通过两不同点的直线有且只有一条。所以一般来说，我们只要改变 x0, y0, x1, y1 这四个值就可以轻松的改变渐变方向。这点可以结合 PS 里的线性渐变理解。</p>
<p><img src="/images/canvas/gradient_line.png" alt=""></p>
</li>
</ul>
<p><strong>CanvasGradient</strong> 描述渐变的不透明对象。CanvasGradient 有一个方法：<code>CanvasGradient.addColorStop()</code></p>
<ul>
<li><p><code>CanvasGradient.addColorStop(offset, color)</code> 添加一个由偏移值和颜色值指定的断点到渐变。offset: 0 到 1 之间的值，超出范围将抛出 INDEX_SIZE_ERR 错误; color: CSS 颜色值 <code>&lt;color&gt;</code>。如果颜色值不能被解析为有效的 CSS 颜色值 <code>&lt;color&gt;</code>，将抛出 SYNTAX_ERR 错误。</p>
</li>
<li><p><code>ctx.createRadialGradient(x0, y0, r0, x1, y1, r1)</code> 根据参数确定两个圆的坐标，绘制放射性渐变。起点圆，圆心(x0, y0)，半径（r0）; 结束圆，圆心(x1, y1)，半径（r1）。返回<strong>CanvasGradient</strong>对象。</p>
<p>注意: 1️⃣ 当两个圆的半径相同时，r0 = r1 时，渐变不可见。2️⃣ 当两个圆的圆心坐标不同时，渐变效果则无法填充满路径。</p>
</li>
</ul>
<h3 id="2-绘制矩形"><a href="#2-绘制矩形" class="headerlink" title="2. 绘制矩形"></a>2. 绘制矩形</h3><ul>
<li><p><code>ctx.clearRect(x, y, w, h)</code> 绘制一个起点在 (x, y) 、宽度为 w 、高度为 h 的透明矩形，此矩形将擦除所在区域的所有内容。</p>
</li>
<li><p><code>ctx.fillRect(x, y, w, h)</code> 绘制一个起点在 (x, y) 、宽度为 w 、高度为 h 的实心矩形。</p>
</li>
<li><p><code>ctx.strokeRect(x, y, w, h)</code> 绘制一个起点在 (x, y) 、宽度为 w 、高度为 h 的描边矩形。此方法直接绘制到画布而不会修改当前路径。</p>
</li>
</ul>
<h3 id="3-绘制虚线"><a href="#3-绘制虚线" class="headerlink" title="3. 绘制虚线"></a>3. 绘制虚线</h3><ul>
<li><p><code>ctx.setLineDash([length, spacing])</code> 传入一组数组设置线段和间距的值，以绘制虚线。如果数组元素的数量是奇数，数组元素会被复制并重复。如果数组为空，将会变为实线。</p>
</li>
<li><p><code>ctx.getLineDash()</code> 获取当前线段样式，得到一组数组为线段和间距的值，例：[5, 10], 长度为 5px 的线段, 间隔为 10px。</p>
</li>
<li><p><code>ctx.lineDashOffset</code> 设置虚线偏移量，默认 0</p>
</li>
</ul>
<h3 id="4-绘制路径"><a href="#4-绘制路径" class="headerlink" title="4. 绘制路径"></a>4. 绘制路径</h3><ul>
<li><p><code>ctx.beginPath()</code> 创建一个新的路径</p>
</li>
<li><p><code>ctx.moveTo()</code> 将笔触起点移动到 (x, y)</p>
</li>
<li><p><code>ctx.closePath()</code> 封闭当前路径，当存在起点和终点，并且图形为封闭时讲创建一个连接起点和终点的直线。</p>
</li>
<li><p><code>ctx.stroke()</code> 给当前路径描边</p>
</li>
<li><p><code>ctx.lineTo(x, y)</code> 绘制一个从起点到指定点 (x, y) 的直线</p>
</li>
<li><p><code>ctx.rect(x, y, w, h)</code> 绘制一个起点在 (x, y) 、宽度为 w 、高度为 h 的矩形路径</p>
</li>
<li><p><code>ctx.fill()</code> 填充当前或已存在的路径，可选传 fillRule, 或选传 (Path2d, fillRule)。</p>
<p><strong>fillRule</strong> 是一种算法，决定点是在路径内还是在路径外。”nonzero”: 非零环绕规则（默认），”evenodd”: 奇偶环绕规则。利用这一特性，我们可以做出非常复杂的镂空图形。</p>
<p><strong>非零环绕填充规则</strong>：如果想知道某一区域是否被填充，就从这一区域画一条直线向外，在与其他线的交点处，如果其他线是顺时针方向画的，就+1，逆时针则-1，如果最后总和为 0，则不会填充，非零则填充。</p>
<p><img src="/images/canvas/fillrule.png" alt=""></p>
<p><strong>奇偶环绕填充规则</strong>：在路径包围的区域中，随便找一点，向外发射一条射线，和所有围绕它的边相交，查看相交线的个数，如果为奇数，就填充，如果是偶数，就不填充。</p>
<p><strong>path2D()</strong> 转换 svg 格式的路径, 用法见 demo <a href="https://gaofanghuang.github.io/demo/api/canvas/demo1" target="_blank" rel="noopener">查看 demo</a></p>
</li>
<li><p><code>ctx.stroke()</code> 给当前或已经存在的路径创建描边</p>
</li>
<li><p><code>ctx.drawFocusIfNeeded(element)</code> 如果传入的元素是聚焦的，就给当前路径绘制焦点。也可传入(path, element)。 注意该元素必须写在 canvas 标签内。(这个 api 不知道有什么应用场景，因为写在 canvas 里的标签是不可见也不可点击的，感觉这个 api 是多余的)</p>
</li>
<li><p><code>ctx.clip()</code> 将当前创建的路径设置为当前剪切路径，之后创建的所有信息都只会出现在此路径内部。可选传 fillRule, 或选传 (Path2d, fillRule)。</p>
</li>
<li><p><code>ctx.isPointInPath(x, y, fillRule)</code> 判断当前路径内部是否包含指定的点</p>
</li>
<li><p><code>ctx.isPointInStroke(x, y)</code> 判断当前路径描边是否包含指定的点</p>
</li>
</ul>
<h3 id="5-绘制文本"><a href="#5-绘制文本" class="headerlink" title="5. 绘制文本"></a>5. 绘制文本</h3><ul>
<li><p><code>ctx.fillText(text, x, y [, maxWidth])</code> 绘制一个位于 (x, y) 的文本，并填充颜色。text 为文本内容。maxWidth 为文本最大宽度，可选项。</p>
</li>
<li><p><code>ctx.strokeText(text, x, y [, maxWidth])</code> 绘制一个位于 (x, y) 的文本，并描边颜色。text 为文本内容。maxWidth 为文本最大宽度，可选项。</p>
</li>
<li><p><code>ctx.measureText(text)</code> 返回 text 的信息，如文字宽度等内容.</p>
</li>
</ul>
<h3 id="6-绘制圆和弧"><a href="#6-绘制圆和弧" class="headerlink" title="6. 绘制圆和弧"></a>6. 绘制圆和弧</h3><p>圆周率 π：<code>π = Math.PI ≈ 3.14 = 180°</code>，注意在 canvas 中的角度的表示采用的是弧度制。</p>
<p>例如 30°，在 canvas 中用 <code>30 * Math.PI/180</code> 表示。即：<code>30° = 30 * Math.PI / 180 = Math.PI / 6</code></p>
<ul>
<li><p><code>ctx.arc(x, y, radius, startAngle, endAngle[, anticlockwise])</code> 圆弧路径的圆心在 (x, y) 位置，半径为 r ，根据 anticlockwise （默认为顺时针， true）指定的方向从 startAngle (x 轴方向开始计算) 开始绘制，到 endAngle (圆弧终点) 结束。</p>
</li>
<li><p><code>ctx.arcTo(x1, y1, x2, y2, radius)</code> 根据当前描点(前一个 moveTo 或 lineTo 等函数的止点)与给定的控制点 1 连接的直线，和控制点 1 与控制点 2 连接的直线，作为使用指定半径的圆的切线，画出两条切线之间的弧线路径。</p>
</li>
</ul>
<p><strong>开始角度</strong> 及 <strong>结束角度</strong>：</p>
<p>开始角度和结束角度都是以 x 轴为起点，顺时针环绕。</p>
<p><img src="/images/canvas/arc_angle.png" alt=""></p>
<h3 id="7-贝塞尔曲线"><a href="#7-贝塞尔曲线" class="headerlink" title="7. 贝塞尔曲线"></a>7. 贝塞尔曲线</h3><p><a href="https://www.jianshu.com/p/0c9b4b681724" target="_blank" rel="noopener">必须要理解掌握的贝塞尔曲线</a></p>
<ul>
<li><p><code>ctx.quadraticCurveTo(cpx, cpy, x, y)</code> 二次贝塞尔曲线。 需要传入 2 个点，第一个点是控制点，第二个点是终点。起始点是当前路径最新的点，当创建二次贝赛尔曲线之前，可以使用 moveTo() 方法进行改变。即以 3 个点产生一段曲线。</p>
</li>
<li><p><code>ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code> 三次贝塞尔曲线。需要传入 3 个点。 第一、第二个点是控制点，第三个点是结束点。起始点是当前路径的最后一个点，绘制贝赛尔曲线前，可以通过调用 moveTo() 进行修改。即以 4 个点产生一段曲线。</p>
</li>
</ul>
<h3 id="8-绘制图像"><a href="#8-绘制图像" class="headerlink" title="8. 绘制图像"></a>8. 绘制图像</h3><ul>
<li><p><code>ctx.drawImage(image[, sx, sy, sWidth, sHeight], dx, dy[, dWidth, dHeight])</code> 在 Canvas 上绘制图像。</p>
<p><strong>image</strong>: 允许 CanvasImageSource 对象，同上。</p>
<p><img src="https://mdn.mozillademos.org/files/225/Canvas_drawimage.jpg" alt=""></p>
<p><strong>dx</strong>：<br>image 的左上角在目标 canvas 上 X 轴坐标。</p>
<p><strong>dy</strong>：<br>image 的左上角在目标 canvas 上 Y 轴坐标。</p>
<p><strong>sx</strong>： 可选参<br>需要绘制到目标上下文中的，image 的矩形（裁剪）选择框的左上角 X 轴坐标。</p>
<p><strong>sy</strong>： 可选参<br>需要绘制到目标上下文中的，image 的矩形（裁剪）选择框的左上角 Y 轴坐标。</p>
<p><strong>sWidth</strong>： 可选参<br>需要绘制到目标上下文中的，image 的矩形（裁剪）选择框的宽度。如果不说明，整个矩形（裁剪）从坐标的 sx 和 sy 开始，到 image 的右下角结束。</p>
<p><strong>sHeight</strong>：可选参<br>需要绘制到目标上下文中的，image 的矩形（裁剪）选择框的高度。</p>
<p><strong>dWidth</strong>：可选<br>image 在目标 canvas 上绘制的宽度。 允许对绘制的 image 进行缩放。 如果不说明， 在绘制时 image 宽度不会缩放。</p>
<p><strong>dHeight</strong>：可选参<br>image 在目标 canvas 上绘制的高度。 允许对绘制的 image 进行缩放。 如果不说明， 在绘制时 image 高度不会缩放。</p>
</li>
</ul>
<h3 id="9-变换"><a href="#9-变换" class="headerlink" title="9. 变换"></a>9. 变换</h3><ul>
<li><p><code>ctx.rotate(angle)</code> 传入一个角度，用来旋转画布。旋转方向是顺时针的。旋转中心点是 canvas 的起始点, 默认 x = 0, y = 0。</p>
<p><img src="https://mdn.mozillademos.org/files/233/Canvas_grid_rotate.png" alt=""></p>
</li>
<li><p><code>ctx.scale(x, y)</code> 传入缩放比例来控制画布中的像素单位，x 为水平方向的缩放因子，y 垂直方向的缩放因子。默认情况下，x = 1, y = 1。可以使用 <code>ctx.scale(-1, 1)</code> 水平翻转上下文，使用 <code>ctx.scale(1, -1)</code> 垂直翻转上下文。</p>
</li>
<li><p><code>ctx.translate(x, y)</code> 偏移画布原点。x 水平方向的移动距离, y 垂直方向的移动距离。</p>
<p><img src="https://mdn.mozillademos.org/files/234/Canvas_grid_translate.png" alt=""></p>
</li>
<li><p><code>ctx.transform(a, b, c, d, e, f)</code> 多次叠加当前变换, 即可以缩放、旋转、移动和倾斜上下文。a，水平缩放。b，垂直倾斜。c，水平倾斜。d，垂直缩放。e，水平移动。f，垂直移动。会叠加之前的变换。默认画布配置参数为(1, 0, 0, 1, 0, 0)。即 ad 参数等同 ctx.scale(x, y)，当 ab 参数同时为 0 时，之后的内容不可见；ef 测试等同 ctx.translate(x, y)。bc 参数为 <strong>ctx.transform</strong> 特有，当 bc 参数同时为 1 时，之后的内容不可见。</p>
<p><strong>倾斜角度</strong>：bc 参数数值换算方式，即 tan45° = 1。例如当 b = 1, c = 0 时，将 x 轴方向上倾斜 45 度。</p>
</li>
<li><p><code>ctx.setTransform(a, b, c, d, e, f)</code> 重设当前变换，会覆盖之前的变换。</p>
</li>
</ul>
<h3 id="10-像素控制"><a href="#10-像素控制" class="headerlink" title="10. 像素控制"></a>10. 像素控制</h3><ul>
<li><p><code>ctx.createImageData(width, height)</code> 创建一个新的、空白的、指定大小的 ImageData 对象。 所有的像素在新对象中都是透明的。也可传参 <code>imageData</code>。返回一个指定了宽度和高度的，新的 ImageData 对象， 新对象使用透明的像素进行填充。</p>
<p>width：ImageData 新对象的宽度。</p>
<p>height：ImageData 新对象的高度。</p>
<p>imageData：从现有的 ImageData 对象中，复制一个和其宽度和高度相同的对象。图像自身不允许被复制。</p>
</li>
<li><p><code>ctx.getImageData(sx, sy, sw, sh)</code> 返回一个 ImageData 对象，用来描述 canvas 区域隐含的像素数据，这个区域通过矩形表示，起始点为(sx, sy)、宽为 sw、高为 sh。返回一个 ImageData 对象，包含 canvas 给定的矩形图像数据。</p>
</li>
</ul>
<p>ImageData 对象的值类似于[0, 0, 0, 0, 250, 250, 250, 128], 即每四个值描述了一个像素点的显示颜色，这四个值分别是RGBA。</p>
<p>R - 红色 (0-255)<br>G - 绿色 (0-255)<br>B - 蓝色 (0-255)<br>A - alpha 通道 (0-255; 0 是透明的，255 是完全可见的), 当透明度大于128时，表示这个像素点是有颜色的像素点。</p>
<ul>
<li><p><code>ctx.putImageData(imageData, dx, dy[, dirtyX, dirtyY, dirtyWidth, dirtyHeight])</code> 将数据从已有的 ImageData 对象绘制到位图的方法。 如果提供了一个绘制过的矩形，则只绘制该矩形的像素。此方法不受画布转换矩阵的影响。</p>
<p>imageData: ImageData ，包含像素值的数组对象。</p>
<p>dx: 源图像数据在目标画布中的 x 轴的坐标位置。</p>
<p>dy: 源图像数据在目标画布中的 y 轴的坐标位置。</p>
<p>dirtyX: 可选, 在源图像数据中，矩形区域左上角的位置。默认是整个图像数据的左上角（x 坐标）。</p>
<p>dirtyY: 可选, 在源图像数据中，矩形区域左上角的位置。默认是整个图像数据的左上角（y 坐标）。</p>
<p>dirtyWidth: 可选, 在源图像数据中，矩形区域的宽度。默认是图像数据的宽度。</p>
<p>dirtyHeight: 可选, 在源图像数据中，矩形区域的高度。默认是图像数据的高度。</p>
</li>
</ul>
<h3 id="11-状态"><a href="#11-状态" class="headerlink" title="11. 状态"></a>11. 状态</h3><ul>
<li><p><code>ctx.save()</code> 将当前状态放入栈中，保存 canvas 全部的状态。</p>
<p><strong>被保存的值</strong>：当前的变换矩阵。当前的剪切区域。当前的虚线列表. 以下属性当前的值： strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, lineDashOffset, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, globalCompositeOperation, font, textAlign, textBaseline, direction, imageSmoothingEnabled.</p>
</li>
<li><p><code>ctx.restore()</code> 将 canvas 恢复到最近的保存状态的方法。 如果没有保存状态，此方法不做任何改变。</p>
</li>
</ul>
<h2 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h2><p><strong>原理</strong>：创建缓冲区，需要额外创建一个canvas画布，将缓冲的画面现在该canvas上绘制好，在通过drawImage()的方式将该画布渲染到屏幕显示的画布上。</p>
<p><strong>注意</strong>：离屏渲染并不能在任何情况下都可以降低性能消耗，创建缓冲区和复制缓存画面这两个操作都会消耗性能。</p>
<p>使用场景，当我们需要进行大量的图形计算的时候，可以使用离屏渲染中的canvas对象计算。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo5" target="_blank" rel="noopener">查看 demo</a></p>
<h2 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h2><p>canvas 动画实现原理：使用<code>window.setInterval()</code>或<code>window.setTimeout()</code>或<code>window.requestAnimationFrame()</code>，来清空画布并重绘新一帧的画面。由于肉眼在看超过 24 帧每秒的静态图片就会认为是连续动态视频，所以在这里 1 秒内连续生成 24 帧画面，就会产生连续的动画效果。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo3" target="_blank" rel="noopener">查看 demo</a></p>
<p><strong>帧数</strong>：帧数(Frames)，为帧生成数量的简称。由于口语习惯上的原因，我们通常将帧数与帧率混淆。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象，因此高的帧率可以得到更流畅、更逼真的动画。</p>
<p><strong>帧率</strong>：帧率(Frame rate)=帧数(Frames)/时间(Time)，单位为帧每秒(f/s, frames per second, fps)。如果一个动画的帧率恒定为 60 帧每秒(fps)，那么它在一秒钟内的帧数为 60 帧，两秒钟内的帧数为 120 帧。</p>
<p><strong>性能</strong>：<code>window.requestAnimationFrame()</code>提供了更加平缓并更加有效率的方式来执行动画，当系统准备好了重绘条件的时候，才调用绘制动画帧。一般使用这个方法来执行动画，比 setInterval、setTimeout 效果更好。</p>
<h3 id="chrome浏览器查看帧率"><a href="#chrome浏览器查看帧率" class="headerlink" title="chrome浏览器查看帧率"></a>chrome浏览器查看帧率</h3><p>F12 → More tools → Rendering → 勾选 FPS meter</p>
<p><img src="/images/canvas/fps-view.jpg" alt=""></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo4" target="_blank" rel="noopener">查看 demo</a></p>
<p><code>window.requestAnimationFrame(callback)</code> 执行动画</p>
<p><code>window.cancelAnimationFrame()</code> 取消动画</p>
<h2 id="设备交互"><a href="#设备交互" class="headerlink" title="设备交互"></a>设备交互</h2><h3 id="1-鼠标事件"><a href="#1-鼠标事件" class="headerlink" title="1. 鼠标事件"></a>1. 鼠标事件</h3><p>Canvas 对象支持所有的 JavaScript 的鼠标事件，包括鼠标点击(MouseClick), 鼠标按下(Mouse Down), 鼠标抬起(Mouse Up), 鼠标移动( Mouse Move)。</p>
<p>添加鼠标事件的两种方式：</p>
<p>1.1. 给 canvas 增加事件监听（推荐）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标移动</span></span><br><span class="line">canvas.addEventListener(<span class="string">'mousemove'</span>, doMouseMove, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标按下</span></span><br><span class="line">canvas.addEventListener(<span class="string">'mousedown'</span>, doMouseDown, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标抬起</span></span><br><span class="line">canvas.addEventListener(<span class="string">'mouseup'</span>, doMouseUp, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标点击</span></span><br><span class="line">canvas.addEventListener(<span class="string">'click'</span>, doMouseClick, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>1.2. 调用 canvas 自身鼠标事件（反模式，不推荐）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标移动</span></span><br><span class="line">canvas.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标按下</span></span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标抬起</span></span><br><span class="line">canvas.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标点击</span></span><br><span class="line">canvas.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3. 获取鼠标在 canvas 上的坐标</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getPointOnCanvas = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> canvasBox = canvas.getBoundingClientRect()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'canvasBox'</span>, canvasBox)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x: x - canvasBox.left * (canvas.width / canvasBox.width),</span><br><span class="line">    y: y - canvasBox.top * (canvas.height / canvasBox.height)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canvas.addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  e =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> mousePoint = getPointOnCanvas(e.x, e.y)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'获取鼠标在canvas对象上的坐标'</span>, e, mousePoint)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="2. 键盘事件"></a>2. 键盘事件</h3><p>HTML5 Canvas 本身不支持键盘事件监听与获取，常用的有两种方法来解决这个问题:</p>
<p>2.1 监听 window 对象的键盘事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'keydown'</span>, doKeyDown, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>2.2 在 Canvas 标签上增加支持键盘事件的 DOM 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"event_canvas"</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">canvas.addEventListener(<span class="string">'keydown'</span>, doKeyDown, <span class="literal">true</span>)</span><br><span class="line">canvas.focus()</span><br></pre></td></tr></table></figure>

<p>其中 <strong>tabindex</strong> 为 HTML5 DOM 元素，支持键盘事件。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo6" target="_blank" rel="noopener">查看 demo</a></p>
<h2 id="高级动画"><a href="#高级动画" class="headerlink" title="高级动画"></a>高级动画</h2><p>高级动画和简单动画的区别，就是我们需要增加一些现实特性，如物理碰撞、加速度、摩擦力、重力作用等等因素，使动画的元素，运动过程中更贴合现实。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo7" target="_blank" rel="noopener">查看 demo</a></p>
<h3 id="1-边界"><a href="#1-边界" class="headerlink" title="1. 边界"></a>1. 边界</h3><h4 id="1-1-设置边界"><a href="#1-1-设置边界" class="headerlink" title="1.1. 设置边界"></a>1.1. 设置边界</h4><p>一般情况下我们把边界设置为 canvas 左上角到右下角，即</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> top = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> right = canvas.width</span><br><span class="line"><span class="keyword">let</span> bottom = canvas.height</span><br></pre></td></tr></table></figure>

<p>或者其他参数例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> top = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> left = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> right = canvas.width - <span class="number">50</span></span><br><span class="line"><span class="keyword">let</span> bottom = canvas.height - <span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>当设置好边界之后，即可对小球超出边界后进行其他操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ball.x &gt; right) &#123;</span><br><span class="line">  <span class="comment">// to do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ball.x &lt; left) &#123;</span><br><span class="line">  <span class="comment">// to do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ball.y &gt; bottom) &#123;</span><br><span class="line">  <span class="comment">// to do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ball.y &lt; top) &#123;</span><br><span class="line">  <span class="comment">// to do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-超出边界移除"><a href="#1-2-超出边界移除" class="headerlink" title="1.2. 超出边界移除"></a>1.2. 超出边界移除</h4><p>效果：若干小球朝不同的方向移动，当某小球超出边界即不再显示这个小球，直到画面上全部小球消失。</p>
<p>原理：生成若干小球 push 到数组里，当某小球超出边界时，通过 id 删除数组中该小球的数据，即下次渲染帧时，不会再渲染该小球。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo8" target="_blank" rel="noopener">查看 demo 超出边界移除</a></p>
<h4 id="1-3-超出边界重新形成"><a href="#1-3-超出边界重新形成" class="headerlink" title="1.3. 超出边界重新形成"></a>1.3. 超出边界重新形成</h4><p>效果：若干小球朝不同的方向移动，当小球超出边界时，重新再指定位置出现，并不断移动。</p>
<p>原理：生成若干小球 push 到数组里，当某小球超出边界时，重置数组中该小球的位置即可。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo9" target="_blank" rel="noopener">查看 demo 超出边界重新形成</a></p>
<h4 id="1-4-边界环绕"><a href="#1-4-边界环绕" class="headerlink" title="1.4. 边界环绕"></a>1.4. 边界环绕</h4><p>效果：若干小球朝不同的方向移动，当小球超出边界时，小球从反方向的边界出现，并不断移动。例：小球从右往左移动，当小球超出左边界时，小球重新出现在右边界，并继续往左移动。</p>
<p>原理：生成若干小球 push 到数组里，当某小球超出任意边界时，数组中该小球的位置取边界的反值即可。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo10" target="_blank" rel="noopener">查看 demo 边界环绕</a></p>
<h4 id="1-5-边界反弹"><a href="#1-5-边界反弹" class="headerlink" title="1.5. 边界反弹"></a>1.5. 边界反弹</h4><p>效果：若干小球朝不同的方向移动，当小球超出边界时，小球往该边界的反方向的移动。</p>
<p>原理：生成若干小球 push 到数组里，当某小球超出任意边界时，数组中该小球的加速度取反即可。如果需要模拟现实中的重力加速度，则使 vy 衰减即可。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo11" target="_blank" rel="noopener">查看 demo 边界反弹</a></p>
<h3 id="2-速度、加速度和重力加速度"><a href="#2-速度、加速度和重力加速度" class="headerlink" title="2. 速度、加速度和重力加速度"></a>2. 速度、加速度和重力加速度</h3><p><strong>速度</strong>，描述物体运动快慢和方向的物理量。在 canvas 中速度是矢量的，既有大小又有方向，而方向的体现就是其值的正负。任何一个速度都可以分解为 x 轴和 y 轴上的速度。</p>
<p><strong>加速度</strong>，即速率，是描述物体速度变化快慢的物理量。加速度的方向与速度相同即加速，方向相反即减速，如果加速度为零，速度将恒定，物体做匀速直线运动。</p>
<p><img src="/images/canvas/speed.png" alt=""></p>
<p><code>vx = speed * Math.cos(angle)</code></p>
<p><code>vy = speed * Math.sin(angle)</code></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo16" target="_blank" rel="noopener">查看 demo 匀速运动和加速度运动</a></p>
<p><strong>重力加速度</strong>，重力对自由下落的物体产生的加速度。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo17" target="_blank" rel="noopener">查看 demo 重力加速度</a></p>
<h3 id="3-摩擦力"><a href="#3-摩擦力" class="headerlink" title="3. 摩擦力"></a>3. 摩擦力</h3><p>两个相互接触并挤压的物体，当它们发生相对运动或具有相对运动趋势时，就会在接触面上产生阻碍相对运动或相对运动趋势的力，这种力叫做<strong>摩擦力</strong>。通常我们用字母 <code>f</code> 来表示摩擦力。</p>
<p>通俗的说，就是一个物体的速度，因为摩擦力的影响，会不断的发生衰减，直到速度为 0 时，物体也停止了运动。</p>
<ul>
<li><p>计算物体运动的角度 <code>angle = Math.atan2(vy, vx)</code></p>
</li>
<li><p>计算物体运动的速度 <code>speed = Math.sqrt(vx*vx + vy*vy)</code></p>
</li>
</ul>
<p>当速度大于摩擦力时，将速度减去摩擦力，得到一个衰减后的速度值，然后再使用加速度计算公式，算出新速度的 vx 和 vy 的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (speed &gt; f) &#123;</span><br><span class="line">  speed -= f</span><br><span class="line">  vx = <span class="built_in">Math</span>.cos(angle) * speed</span><br><span class="line">  vy = <span class="built_in">Math</span>.sin(angle) * speed</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  speed = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo18" target="_blank" rel="noopener">查看 demo 摩擦力</a></p>
<h3 id="4-拖尾效果"><a href="#4-拖尾效果" class="headerlink" title="4. 拖尾效果"></a>4. 拖尾效果</h3><p>拖尾效果常用于绘制流星和烟花等动画。顾名思义，就是物体运动时会有一个尾巴跟随。</p>
<p>最简单的拖尾效果实现方案，使用以下代码代替 <code>clear</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.fillStyle=<span class="string">"rgba(0,0,0,0.2)"</span></span><br><span class="line">ctx.rect(<span class="number">0</span>,<span class="number">0</span>,w,h);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure>
<p>原理是每帧画面加上一个透明度为0.2的蒙层，随着蒙层叠加的层数越多，较底层的图层也被覆盖到看不见了，以此而形成了拖尾效果。</p>
<h3 id="5-物理碰撞"><a href="#5-物理碰撞" class="headerlink" title="5. 物理碰撞"></a>5. 物理碰撞</h3><p>为了模拟真实世界的物体运动，我们知道不止物体与边界碰撞后有反弹效果，物体与物体之间碰撞后也应该有反弹效果。</p>
<p>物体碰撞检测方法:</p>
<ul>
<li><p>判断物体与物体之间是否有重叠，一般使用物体的外接矩形边界来确定。（矩形边界的精度不够准确，如果需要更精准的碰撞检测，则需要更复杂的边界算法。）</p>
</li>
<li><p>判断物体与物体之间的距离，当距离小于某个值时，满足碰撞条件，物体产生碰撞效果。</p>
</li>
</ul>
<h4 id="5-1-分离轴定理"><a href="#5-1-分离轴定理" class="headerlink" title="5.1 分离轴定理"></a>5.1 分离轴定理</h4><p>分离轴定理（英文简称SAT）是一项用于检测圆或凸多边形碰撞的技术（无法检测凹多边形的碰撞）。</p>
<h4 id="5-2-最小平移向量"><a href="#5-2-最小平移向量" class="headerlink" title="5.2 最小平移向量"></a>5.2 最小平移向量</h4><p>两个物品碰撞之后，使他们分开需要的最小平移向量。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo19" target="_blank" rel="noopener">查看 demo 拖拽抛扔</a></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo25" target="_blank" rel="noopener">查看 demo 碰撞检测</a></p>
<h3 id="6-缓动动画"><a href="#6-缓动动画" class="headerlink" title="6. 缓动动画"></a>6. 缓动动画</h3><p>物体由以低速开始，然后加快，在结束前变慢的滑行到目标位置，然后停止。类似于<strong>CSS</strong>中的<code>animation-timing-function: ease</code>效果。</p>
<p>实现原理：目标位置减去当前位置再乘以缓动系数，即可得到缓动动画的加速度效果。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo20" target="_blank" rel="noopener">查看 demo 定点缓动</a></p>
<p>缓动动画的应用使元素<strong>变换</strong>的过程<strong>过渡</strong>得十分自然，避免了生硬和突兀的感觉。缓动动画不止应用于位移中，在旋转、变色、透明度等方面也可以得到很好的效果。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo21" target="_blank" rel="noopener">查看 demo 旋转</a></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo22" target="_blank" rel="noopener">查看 demo 变色</a></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo23" target="_blank" rel="noopener">查看 demo 渐入渐隐</a></p>
<h3 id="7-弹性动画"><a href="#7-弹性动画" class="headerlink" title="7. 弹性动画"></a>7. 弹性动画</h3><p>物体运动到目标位置之后，并不会立刻停止，而是以目标位置为中心点做一个类似弹簧的往复运动，其速度不断衰减，最终会停止在目标位置。</p>
<p>为了得到平滑的弹性动画效果，我们一般会用到缩放、平移、旋转、透明度等变换属性。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo24" target="_blank" rel="noopener">查看 demo 弹性动画</a></p>
<h3 id="8-粒子动画"><a href="#8-粒子动画" class="headerlink" title="8. 粒子动画"></a>8. 粒子动画</h3><p>制作粒子动画我们常用的一个api就是<code>ctx.getImageData(sx, sy, sw, sh)</code>, 即获得画面的像素点，再通过位移、缩放等变形制作动画效果。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo26" target="_blank" rel="noopener">查看 demo 文字粒子</a></p>
<h2 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h2><p>在绘制 canvas 时，经常需要进行各种数值计算，除了简单的加减乘除，要实现更复杂的效果往往需要使用到三角函数、圆周率等数学概念，还需要理解摩擦力、加速度等物理概念。</p>
<p>各种动效的具体计算公式，可以参考<a href="http://inloop.github.io/interpolator/" target="_blank" rel="noopener">interpolator</a></p>
<h3 id="1-三角函数"><a href="#1-三角函数" class="headerlink" title="1. 三角函数"></a>1. 三角函数</h3><p><code>π = Math.PI ≈ 3.14 = 180°</code></p>
<p>常见的三角函数包括正弦函数、余弦函数和正切函数。</p>
<p><img src="/images/canvas/cossincot.png" alt=""></p>
<p>通过夹角，计算边：</p>
<ul>
<li><p><strong>sin(θ) = X / R</strong> → <code>Math.sin( θ * Math.PI / 180 )</code></p>
</li>
<li><p><strong>cos(θ) = Y / R</strong> → <code>Math.cos( θ * Math.PI / 180 )</code></p>
</li>
<li><p><strong>tan(θ) = X / Y</strong> → <code>Math.tan( θ * Math.PI / 180 )</code></p>
</li>
</ul>
<p>通过边，计算夹角：</p>
<ul>
<li><p><strong>θ = arcsin(X / R)</strong> → <code>Math.asin(X / R) * (180 / Math.PI)</code></p>
</li>
<li><p><strong>θ = arccos(Y / R)</strong> → <code>Math.acos(Y / R) * (180 / Math.PI)</code></p>
</li>
<li><p><strong>θ = arctan(X / Y)</strong> → <code>Math.atan(X / Y) * (180 / Math.PI)</code></p>
</li>
</ul>
<p><strong>Math.atan</strong> 有一个缺陷，就是无法获取角度的方向。我们指定坐标轴有四个象限：<code>X / Y = -X / -Y</code>，<code>-X / Y = X / Y</code>。</p>
<p><img src="/images/canvas/atant.png" alt=""></p>
<p>即在 Math.atan 计算中, A、B、C、D 的值是相等的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="built_in">Math</span>.atan(<span class="number">2</span> / <span class="number">1</span>) * ((<span class="number">26.57</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line"><span class="keyword">const</span> B = <span class="built_in">Math</span>.atan(<span class="number">-2</span> / <span class="number">1</span>) * ((<span class="number">-26.57</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line"><span class="keyword">const</span> C = <span class="built_in">Math</span>.atan(<span class="number">-2</span> / <span class="number">-1</span>) * ((<span class="number">26.57</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line"><span class="keyword">const</span> D = <span class="built_in">Math</span>.atan(<span class="number">2</span> / <span class="number">-1</span>) * ((<span class="number">-26.57</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line"><span class="built_in">console</span>.log(A, B, C, D)</span><br><span class="line"><span class="comment">// 0.5134224838510526 0.5134224838510526 0.5134224838510526 0.5134224838510526</span></span><br></pre></td></tr></table></figure>

<p>因此当我们需要获取角度的方向时，可以使用<code>Math.atan2(dy, dx)</code>来计算：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A2 = <span class="built_in">Math</span>.atan2(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> B2 = <span class="built_in">Math</span>.atan2(<span class="number">-2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> C2 = <span class="built_in">Math</span>.atan2(<span class="number">-2</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">const</span> D2 = <span class="built_in">Math</span>.atan2(<span class="number">2</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(A2, B2, C2, D2)</span><br><span class="line"><span class="comment">// 1.1071487177940904 -1.1071487177940904 -2.0344439357957027 2.0344439357957027</span></span><br></pre></td></tr></table></figure>

<p>由于 <strong>Math.atan</strong> 的弊端，使用<code>Math.atan2(dy, dx)</code>来代替 Math.atan 计算角度即可。</p>
<p><strong>特殊角的值</strong>：</p>
<p><code>Math.sqrt()</code> 计算平方根。注意：tan90° 不存在。</p>
<table>
<thead>
<tr>
<th align="center">角度</th>
<th align="center">0°</th>
<th align="center">15°</th>
<th align="center">30°</th>
<th align="center">45°</th>
<th align="center">60°</th>
<th align="center">90°</th>
<th align="center">120°</th>
<th align="center">135°</th>
<th align="center">150°</th>
<th align="center">180°</th>
<th align="center">270°</th>
</tr>
</thead>
<tbody><tr>
<td align="center">弧度</td>
<td align="center">0</td>
<td align="center">π/12</td>
<td align="center">π/6</td>
<td align="center">π/4</td>
<td align="center">π/3</td>
<td align="center">π/2</td>
<td align="center">2π/3</td>
<td align="center">3π/4</td>
<td align="center">5π/6</td>
<td align="center">π</td>
<td align="center">3π/2</td>
</tr>
<tr>
<td align="center">sin 值</td>
<td align="center">0</td>
<td align="center">[（√6）-（√2）]/4</td>
<td align="center">1/2</td>
<td align="center">（√2）/2</td>
<td align="center">（√3）/2</td>
<td align="center">1</td>
<td align="center">（√3）/2</td>
<td align="center">（√2）/2</td>
<td align="center">1/2</td>
<td align="center">0</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">cos 值</td>
<td align="center">1</td>
<td align="center">[（√6）+（√2）]/4</td>
<td align="center">（√3）/2</td>
<td align="center">（√2）/2</td>
<td align="center">1/2</td>
<td align="center">0</td>
<td align="center">-1/2</td>
<td align="center">-（√2）/2</td>
<td align="center">-（√3）/2</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">tan 值</td>
<td align="center">0</td>
<td align="center">2-√3</td>
<td align="center">（√3）/3</td>
<td align="center">1</td>
<td align="center">√3</td>
<td align="center">∅</td>
<td align="center">-√3</td>
<td align="center">-1</td>
<td align="center">-（√3）/3</td>
<td align="center">0</td>
<td align="center">∅</td>
</tr>
<tr>
<td align="center">cot 值</td>
<td align="center">∅</td>
<td align="center">2+√3</td>
<td align="center">√3</td>
<td align="center">1</td>
<td align="center">√3/3</td>
<td align="center">0</td>
<td align="center">-（√3）/3</td>
<td align="center">-1</td>
<td align="center">-√3</td>
<td align="center">∅</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo12" target="_blank" rel="noopener">查看 demo 鼠标跟随</a></p>
<h3 id="2-波形运动"><a href="#2-波形运动" class="headerlink" title="2. 波形运动"></a>2. 波形运动</h3><p>凡质地柔软的物体由于力的作用，从受力点一端向另一端推移，就产生波形的曲线运动，曲线运动都是反复循环的。波形图像，又叫做正弦曲线。</p>
<p>即使用 <code>Math.sin(angle)</code> 计算，我们可以绘制出十分自然的波形运动动画。计算出的值，在[-1, 1]的区间中逐步递增或逐步衰减，一直循环下去。</p>
<p>例：[0.1, 0.2, …… 0.8, 0.9, 0.8 …… 0.2, 0.1, -0.1, -0.2 …… -0.9, -0.8 …… -0.1, 0.1, 0.2]</p>
<p>因此，当我们需要绘制一个循环反复的动画运动效果时，可以使用 <code>Math.sin(angle)</code> 来计算动画变换的值。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo14" target="_blank" rel="noopener">查看 demo 曲线球</a></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo15" target="_blank" rel="noopener">查看 demo 脉冲球</a></p>
<p><a href="https://gaofanghuang.github.io/demo/api/canvas/demo13" target="_blank" rel="noopener">查看 demo 水草摆动</a></p>
<h2 id="运动规律"><a href="#运动规律" class="headerlink" title="运动规律"></a>运动规律</h2><p>要了解运动规律，可以参考<a href="https://book.douban.com/subject/1485731/" target="_blank" rel="noopener">《原动画基础教程动画人的生存手册》</a></p>
<ol>
<li><p><strong>动态线</strong>：呈现出运动的物体动态走向的趋势辅助线，是表现动作特征的主线，是运动主题中心线的变化样式。</p>
</li>
<li><p><strong>夸张</strong>：夸张就是根据变性原理，对动作的变形程度进行夸大，并且延长变形时间，使这一瞬间给观众留下深刻印象的表现手法。包括弹性变形、惯性变形等。（动作效果、力与质感、情绪、性格）</p>
</li>
<li><p><strong>动画时间分配</strong>：对动作过程中的每张动画的时间长短做合理安排。</p>
</li>
<li><p><strong>停顿</strong>：运动过程中的突然停止。</p>
</li>
<li><p><strong>循环动画</strong>： 周期性重复性的动作。</p>
</li>
<li><p><strong>压缩与拉伸</strong>：通过外力作用下的物体的变形表现力量的方向和大小，并对变形程度进行夸大，以强调力的效果。</p>
</li>
<li><p><strong>运动轨迹</strong>：运动轨迹就是指的是主体的运动路线和各活动部件自身的运动轨迹，是一种运动效果草图。</p>
</li>
<li><p><strong>加速度</strong>：物体受力后运动速度的变化快慢程度。</p>
</li>
<li><p><strong>预备动作</strong>：预备动作指的是与主要动作相反的提示性动作。</p>
</li>
<li><p><strong>跟随动作</strong>：指的是物体运动过程中，主体身上的附属物做出与主体不同步（往往是延迟一段时间），但方向一致的跟随动作。</p>
</li>
<li><p><strong>缓冲动作</strong>：指的是运动主体突然停止运动时，因克服惯性而缓慢停止的过程。</p>
</li>
</ol>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ol>
<li><p>在离屏 canvas 上预渲染相似的图形或重复的对象。</p>
</li>
<li><p>避免浮点数的坐标点，用整数取而代之。用 Math.floor() 函数对所有的坐标点取整。</p>
</li>
<li><p>不要在用 drawImage 时缩放图像。在离屏 canvas 中缓存图片的不同尺寸，而不要用 drawImage() 去缩放它们。</p>
</li>
<li><p>使用多层画布去画一个复杂的场景。</p>
</li>
<li><p>用 CSS 设置大的背景图。</p>
</li>
<li><p>用 CSS transforms 特性缩放画布。</p>
</li>
<li><p>关闭透明度。<code>var ctx = canvas.getContext(&#39;2d&#39;, { alpha: false });</code></p>
</li>
<li><p>将画布的函数调用集合到一起（例如，画一条折线，而不要画多条分开的直线）。</p>
</li>
<li><p>避免不必要的画布状态改变。</p>
</li>
<li><p>渲染画布中的不同点，而非整个新状态。</p>
</li>
<li><p>尽可能避免 shadowBlur 特性。</p>
</li>
<li><p>尽可能避免 text rendering。</p>
</li>
<li><p>使用不同的办法去清除画布(clearRect() vs. fillRect() vs. 调整 canvas 大小)。</p>
</li>
<li><p>有动画，请使用 window.requestAnimationFrame() 而非 window.setInterval()。</p>
</li>
<li><p>请谨慎使用大型物理库。</p>
</li>
<li><p>制作粒子效果时，尽量使用矩形方法绘制点，而不是圆方法绘制点。</p>
</li>
</ol>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li><p>标签需要闭合，<code>&lt;canvas&gt;</code> 元素需要有闭合标签 (<code>&lt;/canvas&gt;</code>)。</p>
</li>
<li><p>设置画布( canvas )的大小</p>
<p>可以直接在 html 标签中使用 width 和 height 属性 或 css 来设置画布尺寸，canvas 会通过放大缩小图像来适应画布。需要注意的是，这样容易造成图像内容模糊变形，我们目前无法使用 css 的样式来控制变形，如<code>object-fit:cover</code>，目前只能用改变宽高属性实现。</p>
<p>推荐的方法是宽高直接写在 canvas 标签上，或者使用 js 来修改 canvas 的宽高。</p>
</li>
<li><p>canvas 标签内的内容，当 canvas 工作时并不会显示，而当浏览器不支持 canvas 时，才会显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">  抱歉，您的浏览器不支持canvas元素 （这些内容将会在不支持 canvas</span><br><span class="line">  元素的浏览器或是禁用了 JavaScript 的浏览器内渲染并展现）</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>canvas 画布清空问题</p>
<p>清除 Canvas 任意区域像素可以用 canvas_context.clearRect(x, y, width, height)，但如果只有一个 Canvas，不同的方法都调用同一个 Canvas 时，只调用 canvas_context.clearRect(x, y, width, height)之后，再次绘制会出现偏移现象。</p>
<p>此时只要重置画布的宽度或者高度<code>canvas.width = canvas.width</code>，canvas 标签就会重新被渲染，以此达到完全清空画布内容的效果。</p>
</li>
<li><p>ctx.font 不生效</p>
<p>ctx.font 必须同时设置 字体大小 和 字体名称， 如设置 <code>ctx.font = &#39;16px&#39;</code> 时是无效的，必须加上 font-family 才行, 即：<code>ctx.font = &#39;16px serif&#39;</code></p>
</li>
<li><p>引用外部图片资源绘制，toDataUrl()报错：Uncaught DOMException: Failed to execute ‘toDataURL’ on ‘HTMLCanvasElement’: Tainted canvases may not be exported.</p>
<p>解决方案：</p>
<p>① 把图片移动到当前域下。</p>
<p>② 服务器允许跨域，并且 img 设置允许跨域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.setAttribute(<span class="string">'crossOrigin'</span>, <span class="string">'anonymous'</span>)</span><br><span class="line">img.src = url</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><ol>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex" target="_blank" rel="noopener">tabindex</a></p>
<p><strong>tabindex 全局属性</strong> 指示其元素是否可以聚焦，以及它是否/在何处参与顺序键盘导航（通常使用 Tab 键，因此得名）。</p>
</li>
<li><p><a href="https://huanggaofang.com/2020/keycode/">keycode 键位表</a></p>
</li>
<li><p><a href="http://inloop.github.io/interpolator/" target="_blank" rel="noopener">interpolator</a></p>
</li>
<li><p><a href="https://blog.csdn.net/yorhomwang/article/details/54869018" target="_blank" rel="noopener">碰撞检测之分离轴定理算法讲解</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/sevenyuan/p/7125642.html" target="_blank" rel="noopener">常见的2D碰撞检测</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Canvas</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 基础</title>
    <url>//frontend/js/promise/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="1-Async"><a href="#1-Async" class="headerlink" title="1. Async"></a>1. Async</h3><p>async function 用来定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。</p>
<h3 id="2-Await"><a href="#2-Await" class="headerlink" title="2. Await"></a>2. Await</h3><p>异步函数可以包含 await 指令，该指令会暂停异步函数的执行，并等待 Promise 执行，然后继续执行异步函数，并返回结果。</p>
<p>await 关键字只在异步函数内有效。如果在异步函数外使用它，会抛出语法错误。</p>
<p>当异步函数暂停时，它调用的函数会继续执行(收到异步函数返回的隐式 Promise)</p>
<h3 id="3-Promise"><a href="#3-Promise" class="headerlink" title="3. Promise"></a>3. Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>
<a id="more"></a>

<h4 id="Async-Await-和-Promise-的关系"><a href="#Async-Await-和-Promise-的关系" class="headerlink" title="Async/Await 和 Promise 的关系"></a>Async/Await 和 Promise 的关系</h4><p>async/await 的目的是简化使用多个 promise 时的同步行为，并对一组 Promises 执行某些操作。正如 Promises 类似于结构化回调，async/await 更像结合了 generators 和 promises。</p>
<p>大多数异步函数也可以使用 Promises 编写。</p>
<h4 id="Async-Await-和-Promise-的区别"><a href="#Async-Await-和-Promise-的区别" class="headerlink" title="Async/Await 和 Promise 的区别"></a>Async/Await 和 Promise 的区别</h4><p>在错误处理方面，async 函数更容易捕获异常错误。</p>
<h4 id="回调函数和-Promise-的区别"><a href="#回调函数和-Promise-的区别" class="headerlink" title="回调函数和 Promise 的区别"></a>回调函数和 Promise 的区别</h4><p>回调函数容易造成回调地狱。promise 可以让代码更容易读懂。</p>
<p>回调函数：</p>
<p>把一个函数 A 传给另一个函数 B 调用，并在函数 B 完成后执行，那么 A 就是回调函数。</p>
<p><a href="https://gaofanghuang.github.io/demo/api/promise/demo4" target="_blank" rel="noopener">查看 demo</a></p>
<h3 id="4-bluebird"><a href="#4-bluebird" class="headerlink" title="4. bluebird"></a>4. bluebird</h3><p>bluebird 是一个第三方 Promise 规范实现库，它不仅完全兼容原生 Promise 对象，且比原生对象功能更强大。bluebird 的浏览器兼容性比原生的更好。</p>
<p><a href="http://bluebirdjs.com/docs/getting-started.html" target="_blank" rel="noopener">bluebird api 文档</a></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="1-Async-1"><a href="#1-Async-1" class="headerlink" title="1. Async"></a>1. Async</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params </span>name 函数名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params </span>param 要传递给函数的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params </span>statements 函数体语句</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, param[, ... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<p>返回的 Promise 对象会运行<strong>执行</strong>(resolve)异步函数的返回结果，或者运行<strong>拒绝</strong>(reject)——如果异步函数抛出异常的话。</p>
<h3 id="2-Await-1"><a href="#2-Await-1" class="headerlink" title="2. Await"></a>2. Await</h3><p><code>[return_value] = await expression;</code></p>
<p><strong>expression</strong> 表达式:</p>
<p>一个 Promise 对象或者任何要等待的值。</p>
<p><strong>return_value</strong> 返回值:</p>
<p>返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</p>
<h3 id="3-Promise-1"><a href="#3-Promise-1" class="headerlink" title="3. Promise"></a>3. Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params </span>resolve 将promise的状态改为fulfilled（完成）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prams </span>reject 将promise的状态改为rejected（失败）</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125; <span class="comment">/* executor */</span>  );</span><br></pre></td></tr></table></figure>

<p>如果在 executor 函数中抛出一个错误，那么该 promise 状态为 rejected。 executor 函数的返回值被忽略。</p>
<p>一个 Promise 有以下几种状态：</p>
<ul>
<li><p>pending: 初始状态，既不是成功，也不是失败状态。</p>
</li>
<li><p>fulfilled: 意味着操作成功完成。</p>
</li>
<li><p>rejected: 意味着操作失败。</p>
</li>
</ul>
<p>状态变化过程（from MDN）:</p>
<p><img src="https://mdn.mozillademos.org/files/8633/promises.png" alt=""></p>
<p>方法：</p>
<ul>
<li><p><code>Promise.all(iterable)</code>: 返回一个新的 promise 对象，该 promise 对象在 iterable 参数对象里所有的 promise 对象都成功的时候才会触发成功，一旦有任何一个 iterable 里面的 promise 对象失败则立即触发该 promise 对象的失败。 Promise.all 方法常被用于处理多个 promise 对象的状态集合。</p>
</li>
<li><p><code>Promise.race(iterable)</code>: 当 iterable 参数里的任意一个子 promise 被成功或失败后，父 promise 马上也会用子 promise 的成功返回值或失败详情作为参数调用父 promise 绑定的相应句柄，并返回该 promise 对象。</p>
</li>
<li><p><code>Promise.reject(reason)</code>: 返回一个状态为失败的 Promise 对象，并将给定的失败信息传递给对应的处理方法。注意当使用 reject 之后，必须要加 catch 声明 onRejected 回调。</p>
</li>
<li><p><code>Promise.resolve(value)</code>: 返回一个状态由给定 value 决定的 Promise 对象。如果该值是 thenable (即，带有 then 方法的对象)，返回的 Promise 对象的最终状态由 then 方法执行决定；否则的话(该 value 为空，基本类型或者不带 then 方法的对象)，返回的 Promise 对象状态为 fulfilled，并且将该 value 传递给对应的 then 方法。</p>
</li>
</ul>
<p>Promise 原型方法：</p>
<ul>
<li><p><code>Promise.prototype.catch(onRejected)</code>：添加一个拒绝(rejection) 回调到当前 promise, 返回一个新的 promise。当这个回调函数被调用，新 promise 将以它的返回值来 resolve，否则如果当前 promise 进入 fulfilled 状态，则以当前 promise 的完成结果作为新 promise 的完成结果。</p>
</li>
<li><p><code>Promise.prototype.then(onFulfilled, onRejected)</code>：添加<strong>解决</strong>(fulfillment)和<strong>拒绝</strong>(rejection)回调到当前 promise, 返回一个新的 promise, 将以回调的返回值来 resolve。</p>
</li>
<li><p><code>Promise.prototype.finally(onFinally)</code>：不管最终返回的是 resolve 还是 reject, finally 里的代码都会执行，一般写在 catch 后面。</p>
</li>
<li><p><code>Promise.allSettled()</code> 返回一个在所有给定的promise已被决议或被拒绝后决议的promise，并带有一个对象数组，每个对象表示对应的promise结果。</p>
</li>
</ul>
<p>Tips:</p>
<ol>
<li><p>写 promise 最好加上 catch。</p>
</li>
<li><p>由于 promise 是异步的, try catch 语句也无法捕获其错误。</p>
</li>
</ol>
<h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><h3 id="1-创建一个-promise"><a href="#1-创建一个-promise" class="headerlink" title="1. 创建一个 promise"></a>1. 创建一个 promise</h3><p><a href="https://gaofanghuang.github.io/demo/api/promise/demo1" target="_blank" rel="noopener">查看 demo</a></p>
<h3 id="2-使用-async-函数重写-promise-链"><a href="#2-使用-async-函数重写-promise-链" class="headerlink" title="2. 使用 async 函数重写 promise 链"></a>2. 使用 async 函数重写 promise 链</h3><p><a href="https://gaofanghuang.github.io/demo/api/promise/demo2" target="_blank" rel="noopener">查看 demo</a></p>
<h3 id="3-多个-promise-同时执行"><a href="#3-多个-promise-同时执行" class="headerlink" title="3. 多个 promise 同时执行"></a>3. 多个 promise 同时执行</h3><p><a href="https://gaofanghuang.github.io/demo/api/promise/demo3" target="_blank" rel="noopener">查看 demo</a></p>
<h3 id="4-Promise-和-this-指向"><a href="#4-Promise-和-this-指向" class="headerlink" title="4. Promise 和 this 指向"></a>4. Promise 和 this 指向</h3><p><a href="https://gaofanghuang.github.io/demo/api/promise/demo5" target="_blank" rel="noopener">查看 demo</a></p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="1-Uncaught-in-promise-报错"><a href="#1-Uncaught-in-promise-报错" class="headerlink" title="1. Uncaught (in promise) 报错"></a>1. Uncaught (in promise) 报错</h3><p>promise 上必须加上 <code>.catch((e) =&gt; {})</code>。 如果使用 async/await, 则需要使用 <code>try {...} catch {...}</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; promise 错误写法</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const res &#x3D; &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回 0 或 1</span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">    if (res.code) &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回一个成功结果</span><br><span class="line">      resolve(&#39;[code is 1]&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回一个失败结果</span><br><span class="line">      reject(&#39;[code is not 1]&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; async&#x2F;await 错误写法</span><br><span class="line">const doAsync2 &#x3D; async () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;执行 async 方法2&#39;, new Date().getTime())</span><br><span class="line">  const res &#x3D; await todoSth()</span><br><span class="line">  console.log(&#39;成功2&#39;, res, new Date().getTime())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; promise 正确写法</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const res &#x3D; &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回 0 或 1</span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">    if (res.code) &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回一个成功结果</span><br><span class="line">      resolve(&#39;[code is 1]&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回一个失败结果</span><br><span class="line">      reject(&#39;[code is not 1]&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; async&#x2F;await 正确写法</span><br><span class="line">const doAsync &#x3D; async () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;执行 async 方法&#39;, new Date().getTime())</span><br><span class="line">  try &#123;</span><br><span class="line">    const res &#x3D; await todoSth()</span><br><span class="line">    console.log(&#39;成功&#39;, res, new Date().getTime())</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&#39;失败&#39;, err, new Date().getTime())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-重复的-catch，一个-promise-只需要一个-catch"><a href="#2-重复的-catch，一个-promise-只需要一个-catch" class="headerlink" title="2. 重复的 catch，一个 promise 只需要一个 catch"></a>2. 重复的 catch，一个 promise 只需要一个 catch</h3><p>当同一个 promise 上 then 里调用了 err 和 链式调用了 catch 时，错误只会在 err 中被捕获， catch 中的代码是不会被执行的。</p>
<p>如果 一个 promise 里 还有嵌套 promise, 那么只需要在最外层的 promise 加上 catch。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确写法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法1</span><br><span class="line">todoSth()</span><br><span class="line">  .then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;成功&#39;, res)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;失败&#39;, err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法二</span><br><span class="line">todoSth().then(</span><br><span class="line">    res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;成功&#39;, res)</span><br><span class="line">    &#125;,</span><br><span class="line">    err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;失败&#39;, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 错误写法</span><br><span class="line">todoSth().then(</span><br><span class="line">    res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;成功&#39;, res)</span><br><span class="line">    &#125;,</span><br><span class="line">    err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;失败&#39;, err)</span><br><span class="line">    &#125;</span><br><span class="line">  ).catch(err &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;失败2&#39;, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-then-和-catch-执行顺序问题"><a href="#3-then-和-catch-执行顺序问题" class="headerlink" title="3. then 和 catch 执行顺序问题"></a>3. then 和 catch 执行顺序问题</h3><p>当 catch 写在 then 前时，then 中的代码也会被执行，但是 <code>res = undefined</code>。因此，catch 应该写在链式调用的最后部分。</p>
<p>多个 then 时，前面 then 报错会阻塞后面 then 中代码的执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 错误写法</span><br><span class="line">todoSth().catch(err &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;失败&#39;, err)</span><br><span class="line">  &#125;).then(</span><br><span class="line">    res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;成功&#39;, res)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确写法</span><br><span class="line">todoSth().then(</span><br><span class="line">    res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;成功&#39;, res)</span><br><span class="line">    &#125;</span><br><span class="line">  ).catch(err &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;失败&#39;, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Promise</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog Init</title>
    <url>//daily/init/</url>
    <content><![CDATA[<p>前段时间体验了两个月阿里云服务器，自己用Node搭后端服务、做CMS后台管理系统，运维部署，还是学到蛮多东西的。</p>
<p>不过还是不想花太多时间在建站维护上了，后端涉及的东西太多了感觉头大，网络安全、数据库管理啊什么的，所以还是回归hexo吧。</p>
<p>多出的时间想学点感兴趣的新东西，着重研究图形和视觉方面的技术：canvas、webGl、three、vr、ar等等。</p>
<p>这周把 MDN 的 canvas 教程又过了一遍，然后每个知识点自己撸了遍 demo, 对 api 的理解又加深了一丢丢😄</p>
<p>接下来准备用 canvas 做一些更复杂的案例啦，加油吧~</p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>流水账</tag>
      </tags>
  </entry>
</search>
